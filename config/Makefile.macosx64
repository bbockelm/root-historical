# -*- mode: makefile -*-
#
# Makefile of ROOT for MacOS X, using g++ 64-bit mode

PLATFORM      = macosx

#DWARF2       := $(shell gcc --version | sed -n 's,.*build \([0-9]*\).$$,\1,p' |\
#                  awk '{ if ($$1>=5341) print "dwarf-2" }')

DEBUGFLAGS    = -g$(DWARF2)
OPTFLAGS      = -O2
ifeq (debug,$(findstring debug,$(ROOTBUILD)))
OPT           = $(DEBUGFLAGS)
NOOPT         =
else
OPT           = $(OPTFLAGS)
NOOPT         =
endif

# OS version
MACOSX_MINOR := $(shell sw_vers | sed -n 's/ProductVersion://p' | cut -d . -f 2)
MACOSX_CPU   := $(shell uname -p)
FINK_DIR     := $(shell which fink 2>&1 | sed -ne "s/\/bin\/fink//p")
CLANG_MAJOR  := $(shell clang -v 2>&1 | sed -n "s/^Apple.*version //p" | cut -d . -f 1)
ifeq ($(CLANG_MAJOR),)
CLANG_MAJOR  := 1
endif
ifeq ($(MACOSX_DEPLOYMENT_TARGET),)
MACOSXVERS    = 10.$(MACOSX_MINOR)
else
MACOSXVERS    = $(MACOSX_DEPLOYMENT_TARGET)
endif

# Compiler:
ifeq ($(subst $(CLANG_MAJOR),,12),12)
CXX           = clang++
CC            = clang
else
CXX           = g++
CC            = gcc
endif
CXXFLAGS      = -m64 -pipe -Wshadow -W -Wall -Woverloaded-virtual \
                -fsigned-char -fno-common $(EXTRA_CXXFLAGS) $(FINK_CXXFLAGS) \
                $(TARGETFLAGS)
CFLAGS        = -m64 -pipe -Wshadow -W -Wall -fsigned-char -fno-common \
                $(EXTRA_CFLAGS) $(FINK_CFLAGS) $(TARGETFLAGS)
CINTCXXFLAGS  = -m64 -pipe -W -Wall -Woverloaded-virtual \
                -fsigned-char -fno-common $(EXTRA_CXXFLAGS) $(FINK_CXXFLAGS) \
                -DG__REGEXP -DG__UNIX -DG__SHAREDLIB \
                -DG__ROOT -DG__REDIRECTIO -DG__OSFDLL \
                -DG__STD_EXCEPTION $(TARGETFLAGS)
CINTCFLAGS    = -m64 -pipe -W -Wall -fsigned-char -fno-common \
                $(EXTRA_CFLAGS) $(FINK_CFLAGS) \
                -DG__REGEXP -DG__UNIX -DG__SHAREDLIB \
                -DG__ROOT -DG__REDIRECTIO -DG__OSFDLL \
                -DG__STD_EXCEPTION $(TARGETFLAGS)
COMPILER      = gnu

# Linker:
ifeq ($(subst $(CLANG_MAJOR),,12),12)
LD            = clang++
else
LD            = g++
endif
LDFLAGS       = $(OPT) -m64 -mmacosx-version-min=$(MACOSXVERS)

FORCELINK     = yes
NEEDFINK      = yes

ifeq ($(subst $(MACOSX_MINOR),,1234),1234)
ifeq ($(USECONFIG),FALSE)
SOFLAGS       = -dynamiclib -single_module \
                -undefined dynamic_lookup -install_name @rpath/
else
SOFLAGS       = -dynamiclib -single_module \
                -undefined dynamic_lookup -install_name $(LIBDIR)/
endif
FORCELINK     = no
NEEDFINK      = no
else
ifeq ($(subst $(MACOSX_MINOR),,123),123)
SOFLAGS       = -dynamiclib -single_module \
                -undefined dynamic_lookup -install_name $(LIBDIR)/
FORCELINK     = no
NEEDFINK      = no
else
ifeq ($(MACOSX_MINOR),3)
SOFLAGS       = -dynamiclib -single_module \
                -undefined dynamic_lookup -install_name $(LIBDIR)/
LDFLAGS      += -bind_at_load
else
SOFLAGS       = -dynamiclib -single_module \
                -undefined suppress -install_name $(LIBDIR)/
LDFLAGS      += -bind_at_load
endif
endif
endif
ifeq ($(subst $(MACOSX_MINOR),,1234),1234)
SOEXT         = so
else
SOEXT         = dylib
endif

# System libraries:
SYSLIBS       = -lm $(EXTRA_LDFLAGS) $(FINK_LDFLAGS) $(OSTHREADLIBDIR) \
                $(OSTHREADLIB) -ldl $(ALLOCLIBDIR) $(ALLOCLIB)
XLIBS         = $(XPMLIBDIR) $(XPMLIB) $(X11LIBDIR) -lXext -lX11
CILIBS        = -lm $(EXTRA_LDFLAGS) $(FINK_LDFLAGS) -ldl

# Fortran:
F77           = gfortran
F77FLAGS      = -m64 -std=legacy
F77LIBS      := $(shell $(F77) -m64 -print-file-name=libgfortran.dylib | grep /)
F77LIBS      += $(shell $(F77) -m64 -print-file-name=libgfortranbegin.a | grep /)

# Override default in Makefile.config
INSTALL      := /bin/cp -pPR
INSTALLDATA  := /bin/cp -pPR

# Extras
ifeq ($(NEEDFINK),yes)
FINK_CXXFLAGS := $(shell [ -d $(FINK_DIR)/include ] && echo -I$(FINK_DIR)/include)
FINK_CFLAGS   := $(shell [ -d $(FINK_DIR)/include ] && echo -I$(FINK_DIR)/include)
FINK_LDFLAGS  := $(shell [ -d $(FINK_DIR)/lib ] && echo -L$(FINK_DIR)/lib)
endif

ifeq ($(CONFIGURE),yes)
showcxx:
	@echo "$(CXX)"

showcc:
	@echo "$(CC)"

showld:
	@echo "$(LD)"

showf77:
	@echo "$(F77)"
endif
