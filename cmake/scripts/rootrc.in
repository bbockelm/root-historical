# @(#)root/config:$Id: rootrc.in 24458 2008-06-21 11:56:48Z rdm $
# Author: Fons Rademakers  22/09/95

# ROOT Environment settings are handled via the class TEnv. To see
# which values are active do: gEnv->Print().

# Path used by dynamic loader to find shared libraries.
# This path will be prepended to the (DY)LD_LIBRARY_PATH.
# Paths are different for Unix and Windows. The example shows the defaults
# for all ROOT applications for either Unix or Windows.
Unix.*.Root.DynamicPath:    .:@LIB_INSTALL_DIR@:
WinNT.*.Root.DynamicPath:   .;@bBIN_INSTALL_DIR@;$(PATH);

# Path used to find macros.
# Paths are different for Unix and Windows. The example shows the defaults
# for all ROOT applications for either Unix or Windows.
Unix.*.Root.MacroPath:      .:@MACRO_INSTALL_DIR@:
WinNT.*.Root.MacroPath:     .;@MACRO_INSTALL_DIR@;

# Path used to find plugin macros.
# Paths are different for Unix and Windows. The example shows the defaults
# for all ROOT applications for either Unix or Windows.
Unix.*.Root.PluginPath:      :@ETC_INSTALL_DIR@/plugins:
WinNT.*.Root.PluginPath:     ;@ETC_INSTALL_DIR@/plugins;

# Path where to look for TrueType fonts.
Unix.*.Root.UseTTFonts:     true
*.*.Root.TTFontPath:        @FONT_INSTALL_DIR@

# Use Net* API functions.
WinNT.UseNetAPI:         true

# Use thread library (if exists).
Unix.*.Root.UseThreads:     false

# Select the compression algorithm (0=old zlib, 1=new zlib)
# Note, setting this to `0' may be a security vulnerability.
Root.ZipMode:            1

# Show where item is found in the specified path.
Root.ShowPath:           false

# Activate memory statistics (size and cnt is used to trap allocation of
# blocks of a certain size after cnt times).
Root.MemStat:            0
Root.MemStat.size:      -1
Root.MemStat.cnt:       -1
Root.ObjectStat:         0

# Activate memory leak checker (use in conjunction with $ROOTSYS/bin/memprobe).
# Currently only works on Linux with gcc.
Root.MemCheck:           0
Root.MemCheckFile:       memcheck.out

# Global debug mode. When >0 turns on progressively more details debugging.
Root.Debug:              0
Root.Stacktrace:         yes

# Ignore errors lower than the ignore level. Possible values:
# Print, Info, Warning, Error, Break, SysError and Fatal.
Root.ErrorIgnoreLevel:   Print

# Settings for X11 behaviour.
X11.Sync:                no
X11.FindBestVisual:      yes
X11.UseXft:              no
X11.XInitThread:         yes

# Settings for Win32 behavior.
Win32.UseSysPointers:    no

# Default editor.
Unix.*.Editor:           vi
WinNT.*.Editor:          notepad

# Default 3d Viewer.
# By default 3-D views are shown in the pad,
# if the next line is activated, the default viewer will be OpenGL.
#Viewer3D.DefaultDrawOption:   ogl

# Default Fitter (current choices are Minuit and Fumili).
Root.Fitter:             Minuit

# Specify list of file endings which TTabCom (TAB completion) should ignore.
#TabCom.FileIgnore:       .cpp:.h:.cmz

# TCanvas specific settings. Opaque move and resize show full pad during
# the operation instead of only the outline. Especially for resize you'll
# need serious CPU power. UseScreenFactor=true means to size canvas according
# to size of screen, so a canvas still looks good on a low resolution
# laptop screen without having to change canvas size in macros.
# HighLightColor 2 = red. ShowEventStatus allows the event status bar to
# be turned on by default. AutoExec allows TExec objects to be executed
# on mouse and key events.
Canvas.MoveOpaque:          false
Canvas.ResizeOpaque:        false
Canvas.UseScreenFactor:     true
Canvas.HighLightColor:      2
Canvas.ShowEventStatus:     false
Canvas.ShowToolBar:         false
Canvas.ShowEditor:          false
Canvas.AutoExec:            true
Canvas.PrintDirectory       .
#set the default precision when writing floating point numbers in TCanvas::SaveSource
Canvas.SavePrecision        7

# Printer settings.
#WinNT.*.Print.Command:      AcroRd32.exe
#Unix.*.Print.Command:       a2ps -P%p --landscape --columns=2 --margin=30 -rf8.0 %f
#Print.Printer:              32-rb20-hp
#Print.Directory:            .
#Print.FileType:             pdf

# Default histogram binnings for TTree::Draw().
Hist.Binning.1D.x:          100

Hist.Binning.2D.x:           40
Hist.Binning.2D.y:           40
Hist.Binning.2D.Prof:       100

Hist.Binning.3D.x:           20
Hist.Binning.3D.y:           20
Hist.Binning.3D.z:           20
Hist.Binning.3D.Profx:      100
Hist.Binning.3D.Profy:      100

# Default statistics parameters names.
Hist.Stats.Entries    Entries
Hist.Stats.Mean       Mean
Hist.Stats.MeanX      Mean x
Hist.Stats.MeanY      Mean y
Hist.Stats.RMS        RMS
Hist.Stats.RMSX       RMS x
Hist.Stats.RMSY       RMS y
Hist.Stats.Underflow  Underflow
Hist.Stats.Overflow   Overflow
Hist.Stats.Integral   Integral
Hist.Stats.Skewness   Skewness
Hist.Stats.SkewnessX  Skewness x
Hist.Stats.SkewnessY  Skewness y
Hist.Stats.Kurtosis   Kurtosis
Hist.Stats.KurtosisX  Kurtosis x
Hist.Stats.KurtosisY  Kurtosis y

# THtml specific settings (for more see doc of THtml class).
Root.Html.SourceDir:    .
Root.Html.Root:         http://root.cern.ch/root/html
Root.Html.ViewCVS:      http://root.cern.ch/viewcvs/trunk/%f?view=log
Root.Html.Search:       http://www.google.com/search?q=%s+site%3A%u+-site%3A%u%2Fsrc%2F+-site%3A%u%2Fexamples%2F
#Root.Html.OutputDir:   htmldoc/
#Root.Html.Homepage:
#Root.Html.Header:
#Root.Html.Footer:
#Root.Html.Description: //____________________
#Root.Html.Author:      // Author:
#Root.Html.LastUpdate:  // @(#)
#Root.Html.Copyright:   * Copyright

# GUI specific settings.
Gui.Backend:                native
Gui.Factory:                native
Gui.DefaultFont:            -*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Gui.MenuFont:               -*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Gui.MenuHiFont:             -*-helvetica-bold-r-*-*-12-*-*-*-*-*-iso8859-1
Gui.DocFixedFont:           -*-courier-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Gui.DocPropFont:            -*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
Gui.IconFont:               -*-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1
Gui.StatusFont:             -*-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1
Gui.BackgroundColor:         #c0c0c0
Gui.ForegroundColor:         black
Gui.SelectBackgroundColor:   #000080
Gui.SelectForegroundColor:   white
Gui.DocumentBackgroundColor: white
Gui.DocumentForegroundColor: black
Gui.TooltipBackgroundColor:  LightYellow
Gui.TooltipForegroundColor:  black
Gui.IconPath:                $(HOME)/icons:@ICON_INSTALL_DIR@:.
Gui.MimeTypeFile:            $(HOME)/.root.mimes
# If above does not exists defaults to this:
#Gui.MimeTypeFile:            @ETC_INSTALL_DIR@/root.mimes
Browser.Name:                TRootBrowserLite
# Browser Options (plugins)
# F: File browser E: Text Editor H: HTML browser 
# C: Canvas I: I/O redirection P: Proof G: GL viewer
Browser.Options:             FECI
# Can be either small, big, list, details
Browser.IconStyle:           small
# Can be either name, type, size, date
Browser.SortBy:              name
Browser.GroupView:           10000
Browser.ShowHidden:          no
Browser.AutoThumbnail:       yes

# Rint (interactive ROOT executable) specific alias, logon and logoff macros.
Rint.Load:               rootalias.C
Rint.Logon:              rootlogon.C
Rint.Logoff:             rootlogoff.C
# Record session commands, set to "-" to turn off command recording.
Rint.History:            $(HOME)/.root_hist
# History file size, once HistSize is reached remove all but HistSave entries,
# set to 0 to turn off command recording.
# Can be overridden by environment variable ROOT_HIST=size[:save],
# the ":save" part is optional.
# Rint.HistSize:         500
# Set to -1 for sensible default (80% of HistSize), set to 0 to disable history.
# Rint.HistSave:         400
# Print a single line welcome message instead of the default verbose version
# Rint.WelcomeLite:      no
# When the interactive ROOT starts, it can automatically load some frequently
# used includes. However, this introduces several overheads
#  - A long list of CINT and system files will be kept open during the session
#  - The initialisation takes more time (noticeable when using gdb or valgrind)
#  - Memory overhead of about 5 Mbytes (1/3 of the base ROOT executable) when
#    including <vector>
# You can set the variable below to 0 to disable the loading of these
# includes at startup. You can set the variable to 1 (default) to load
# only <iostream> , <string> and <RTypesCint.h>. You can set it to 2 to
# load in addition <vector> and <pair>.  We strongly recommend setting
# the variable to 2 if your scripts include <vector> and you execute
# your scripts multiple times.
Rint.Includes:      1

# CINT: use wrappers for calls (larger dictionaries).
# Only checked if configured with --no-stubs-test; defaults to "use wrappers":
# Cint.EnableWrappers: 1

# ACLiC customization.
# ACLiC.Linkdef specifies the suffix that will be added to the script name to
# try to locate a custom linkdef file when generating the dictionary.
ACLiC.Linkdef:          _linkdef
# Set a top directory for storing the libraries produced by ACLiC.
#ACLiC.BuildDir:        /where/I/would/like/my/compiled/scripts
# Add additional include directives for ACLiC compilations.
#ACLiC.IncludePaths:     -I/where/the/includes/are

# PROOF related variables
#
# PROOF debug options.
# Proof.DebugLevel:	0
# Proof.DebugMask:	-1
#
# PROOF GDB hooks
# allows a debugger to be attached early in the startup phase of proofserv
#  0 - don't wait
#  1 - master proofserv enters wait loop
#  2 - slave proofserv enters wait loop
#  3 - any proofserv enters wait loop
#
# Proof.GdbHook: 0
#
#
# On the master enable parallel startup of workers using threads
# Proof.ParallelStartup: no
#
# Proof.StatsHist:       no
# Proof.StatsTrace:      no
# Proof.SlaveStatsTrace: no
#
# Proof.CondorHome:     /opt/condor
# Proof.CondorConfig:   /opt/condor/etc/condor_config
#
# PEAC.GmUrl:           http://somewhere:8080/clarens/
# PEAC.LmUrl:           http://elsewhere:8080/clarens/

# Certificate and key
# Clarens.CertFile:     $(HOME)/.globus/usercert.pem
# Clarens.KeyFile:      $(HOME)/.globus/userkey.pem

# Variables related to authentication to rootd and proofd.
#
# Default authentication method for rootd and proofd.
# These are supported for backward compatibility but have a very
# low priority. System defaults are generated by configure as a list
# in system.rootauthrc in $ROOTSYS/etc/ or /etc/root; the file
# $HOME/.rootauthrc can be used to override the system defaults.
# (0=UsrPwd, 1=SRP, 2=Krb5, 3=Globus,4=SSH, 5=UidGid)
Rootd.Authentication:   0
Proofd.Authentication:  0

# Connection is shutdown at timeout expiration. Timeout is in seconds.
# Negotiation cannot be attempted at low level (i.e. inside
# TAuthenticate::Authenticate()) because of synchronization
# problems with the server.
# At higher level, TAuthenticate::HasTimedOut() gives information
# about timeout: 0 = no timeout; 1 = timeout, no methods left;
# 2 = timeout, still methods to be tried .
# Caller should decide about an additional attempt.
# Timeout disabled (< 0) by default. Can be changed on-the-fly
# with the static method TAuthenticate::SetTimeOut(to_value)
#
# Auth.Timeout:        -1

# Password dialog box.
# Set to 0 if you do not want a dialog box to be popped-up
# when a password is requested.
# Default is 1.
#
#  Auth.UsePasswdDialogBox: 0

# Set this to 1 if you want full SRP authentication in PROOF
# (Client-to-Master and Master-to-Slave).
Proofd.SendSRPPwd:      0

# Set this to 1 to use SSH authentication in PROOF servers
# (Master-to-Slave or Slaves-to-DataServers). This is switched
# off by default because credentials forwarding for SSH is not
# controlled by the system; however the user may have other
# ways to guarantee it, so it may want to switch it on.
ProofServ.UseSSH:       0

# Default login name (if not defined is taken from $(HOME)).
#UsrPwd.Login:           qwerty
#SRP.Login:              qwerty
#Krb5.Login:             qwerty@LOCAL.DOM.AIN
#Globus.Login:           cd:~/.globus cf:usercert.pem  kf:userkey.pem  ad:/etc/grid-security/certificates
#SSH.Login:              qwerty
#UidGid.Login:           qwerty

# To be prompted for login information.
#UsrPwd.LoginPrompt:     yes
#SRP.LoginPrompt:        yes
#Krb5.LoginPrompt:       yes
#Globus.LoginPrompt:     yes
#SSH.LoginPrompt:        yes
#UidGid.LoginPrompt:     yes

# To reuse established security context.
UsrPwd.ReUse:         yes
SRP.ReUse:            no
Krb5.ReUse:           no
Globus.ReUse:         yes
SSH.ReUse:            yes

# Duration validity of the sec context for UsrPwd, SRP and SSH.
# Format:  <hours>:<minutes>  (default 24:00)
#UsrPwd.Valid:     24:00
#SRP.Valid:        24:00
#SSH.Valid:        24:00

# To control password encryption for UsrPwd authentication.
UsrPwd.Crypt:         yes

# Globus miscellanea.
# Globus Proxy duration: HH:MM (ex 12:15 for 12 hours and 15 min)
# 'default' for system default.
Globus.ProxyDuration:    default
#Globus.ProxyDuration:    14
# Number of bits for the initial key.
Globus.ProxyKeyBits:     1024

# Path to alternative 'ssh' (to override $PATH if ever needed).
#SSH.ExecDir:      /usr/bin

# In case of error, SSH returns 1 (or 256 = 0x100).
# To trap those errors for which one should retry, error printouts
# must be parsed; any substring found under the Env SSH.ErrorRetry
# triggers a retry condition; strings can be added here
# in the form (including double quotes):
#              +SSH.ErrorRetry:     "<error_string>"
# This is what one usually gets if the server has reached the maximum
# number of sshd daemons (defined by MaxStartups in sshd_config);
# this is a typical case in which one should retry.
SSH.ErrorRetry:   "Connection closed by remote host"
# Max number of retries for SSH in case of retry error (see above).
SSH.MaxRetry:     100

# Type of key to be used for RSA encryption:
# 0 = local; 1 = SSL (default if openssl available).
RSA.KeyType:  1

# In case of 'RSA.KeyType: 1' this specifies the number of bits to
# be used for the Blowfish key used to encrypt the exchanged information
# Default 256, minimum 128, maximum 15912.
#SSL.BFBits:   256

# Server authentication in TServerSocket.
#
# General: file with server access rules
#SrvAuth.DaemonRc: /etc/root/system.daemonrc
#
# UsrPwd: check of host equivalence via /etc/hosts.equiv or $HOME/.rhosts.
#SrvAuth.CheckHostsEquivalence: 1
#
# SRP: pass file (default $HOME/.srootdpass).
#SrvAuth.SRPpassfile:  $HOME/.srootdpass
#
# Globus/GSI: hostcert configuration file.
#SrvAuth.HostCert:  /etc/root/hostcert.conf
# Globus/GSI: gridmap file.
#SrvAuth.GridMap:  /etc/grid-security/grid-mapfile
#
# SSH: port for the sshd daemon.
#SrvAuth.SshdPort:  22

# Force file opening via TNetFile (TXNetFile) if a hostname is specified
# in the Url.
# By default, for local files TFile::Open() invokes directly TFile
#TFile.ForceRemote:  yes

# Control the action to be taken when opening an existing ROOT file which
# looks corrupted; by default an attempt to recover the file is made; if
# this variable is set to no the file is just flagged as zombie.
#TFile.Recover:      no

# Control the usage of asynchronous reading capabilities eventually
# supported by the underlying TFile implementation. Default is yes.
#TFile.AsyncReading:     no

# Special cases for the TUrl parser, where the special cases are parsed
# in a protocol + file part, like rfio:host:/path/file.root,
# castor:/path/file.root or /alien/path/file.root.
# In case the file namespace descriptor ends with - the namespace
# is not a part of the filename.
# Extend in private .rootrc with a +Url.Special line.
Url.Special:         file: rfio: hpss: castor: gfal: dcache:
+Url.Special:        /alien/- /castor/

# PROOF XRD client variables
# Debug level (<0 : errors, 0 : minimal, 1 : low, 2 : medium, 3 : high) [-1]
# XProof.Debug:  0
# Socket read timeout [in secs: default 10 secs]
# XProof.ReadTimeout: 10

# The following env vars are handled by TXNetFile and related classes
# (module netx, libNetx.so).
#
# XNet.ConnectTimeout   - maximum time to wait before server's
#                         response on a connect [10 s]
# XNet.RequestTimeout   - maximum time to wait before considering
#                         a read/write failure [60 s]
# XNet.ConnectDomainAllowRE
#                       - sequence of TRegexp regular expressions
#                         separated by a |.
#                         A domain is granted access to for the
#                         first connection if it matches one of these
#                         regexps. Example:
#                         slac.stanford.edu|pd.infn.it|fe.infn.it
# XNet.ConnectDomainDenyRE
#                       - sequence of TRegexp regular expressions
#                         separated by a |.
#                         A domain is denied access to for the
#                         first connection if it matches one of these
#                         regexps. Example:
#                         slac.stanford.edu|pd.infn.it|fe.infn.it
# XNet.RedirDomainAllowRE
#                       - sequence of TRegexp regular expressions
#                         separated by a |.
#                         A domain is granted access to for a
#                         redirection if it matches one of these
#                         regexps. Example:
#                         slac.stanford.edu|pd.infn.it|fe.infn.it
# XNet.RedirDomainDenyRE
#                       - sequence of TRegexp regular expressions
#                         separated by a |.
#                         A domain is denied access to for a
#                         redirection if it matches one of these
#                         regexps. Example:
#                         slac.stanford.edu|pd.infn.it|fe.infn.it
# XNet.MaxRedirectCount - maximum number of redirections from
#                         server [255]
# XNet.Debug            - log verbosity level
#                         (0=nothing,
#                          1=messages of interest to the user,
#                          2=messages of interest to the developers
#                            (includes also user messages),
#                          3=dump of all sent/received data buffers
#                            (includes also user and developers
#                             messages). [0]
# XNet.ReconnectTimeout - sleep-time before going back to the
#                         load balancer (or rebouncing to the same
#                         failing host) after a read/write error
#                         [10 s]
# XNet.ReadAheadSize    - read ahead value, in bytes, to use with the XrdClient
#                         internal caching scheme
#                         Generally not much useful together with the TFile cache,
#                         which will disable the readahead as soon it starts operating,
#                         i.e. requesting async data through XrdClient.
#                         Note that we cannot suppose that the TFile cache
#                         will start working at the beginning of the data processing.
#                         Setting a read ahead size > 0 will involve this phase,
#                         sometimes it could be an advantage, sometimes not.
#                         If > 0, TXNetFile will switch it on again if it sees that
#                         synchronous ReadBuffer requests are issued again

XNet.ReadAheadSize: 500000

# XNet.ReadCacheSize    - Default read cache size inside XrdClient, in bytes.
#                         TXNetFile/TFileReadCache automatically sets this to a
#                         'correct' value when needed.
#                         Set a value here to override a *minimum*
#                         size. It is not preallocated.
#                         TFile/TXNetFile can anyway make it grow
#                         automatically when needed.

XNet.ReadCacheSize: 10000000

# XNet.FirstConnectMaxCnt
#                       - Number of connect retries to the first host
# XNet.PrintTAG         - Print a particular string the developers 
#                         can choose to quickly recognize the
#                         version at run time [0]
#
# XNet.ParStreamsPerPhyConn
#                       - Number of additional TCP streams to use per
#                         each physical connection
#                         0=monostream mode
#                         1-15=multistream mode

XNet.ParStreamsPerPhyConn: 0

# Example of custom setting for the Rint application (root.exe).
# This overrides the default specified above for a generic application.
# Color 5 is yellow.
Rint.Canvas.HighLightColor:      5
