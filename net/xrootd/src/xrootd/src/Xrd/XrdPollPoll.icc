/******************************************************************************/
/*                                                                            */
/*                       X r d P o l l P o l l . i c c                        */
/*                                                                            */
/* (c) 2004 by the Board of Trustees of the Leland Stanford, Jr., University  */
/*       All Rights Reserved. See XrdInfo.cc for complete License Terms       */
/*   Produced by Andrew Hanushevsky for Stanford University under contract    */
/*              DE-AC03-76-SFO0515 with the Department of Energy              */
/******************************************************************************/

//        $Id$

const char *XrdPollPollCVSID = "cvsid: $Id$";

#if !defined(__macos__) && !defined(__FreeBSD__)
#include <malloc.h>
#endif
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
  
#include "XrdSys/XrdSysError.hh"
#include "Xrd/XrdLink.hh"
#include "Xrd/XrdPollPoll.hh"
#include "Xrd/XrdScheduler.hh"

/******************************************************************************/
/*                           G l o b a l   D a t a                            */
/******************************************************************************/

extern XrdSysError    XrdLog;

extern XrdScheduler   XrdSched;

extern XrdOucTrace    XrdTrace;

/******************************************************************************/
/*                             n e w P o l l e r                              */
/******************************************************************************/
  
XrdPoll *XrdPoll::newPoller(int pollid, int maxfd)
{
   int bytes, alignment, pagsz = getpagesize();
   struct pollfd *pp;

// Calculate the size of the poll table and allocate it
//
   bytes     = maxfd * sizeof(struct pollfd);
   alignment = (bytes < pagsz ? 1024 : pagsz);
   if (!(pp = (struct pollfd *)memalign(alignment, bytes)))
      {XrdLog.Emsg("Poll", ENOMEM, "create poll table");
       return 0;
      }

// Create new poll object
//
   memset((void *)pp, 0, bytes);
   return (XrdPoll *)new XrdPollPoll(pp, maxfd);
}

/******************************************************************************/
/*                           C o n s t r c u t o r                            */
/******************************************************************************/
  
XrdPollPoll::XrdPollPoll(struct pollfd *pp, int numfd)
{

// Initialize the standard stuff
//
   PollTab = pp;
   PollTNum= 0;
   PollQ   = 0;
   maxent  = numfd;
}
 
/******************************************************************************/
/*                            D e s t r u c t o r                             */
/******************************************************************************/
  
XrdPollPoll::~XrdPollPoll()
{
   if (PollTab) free(PollTab);
}
 
/******************************************************************************/
/*                               I n c l u d e                                */
/******************************************************************************/
  
int XrdPollPoll::Include(XrdLink *lp)
{
   struct pollfd *pfd;
   int ptnum;

// Lock down the poll data structure
//
   PollMutex.Lock();

// Get the next entry to be used
//
   ptnum = 0;
   while((ptnum < PollTNum) && (PollTab[ptnum].fd != -1)) ptnum++;

// Make sure we have enough table entries to add this link
//
   if (ptnum > maxent)
      {XrdLog.Emsg("Attach","Attach",lp->ID,"failed; poll table overflow.");
       PollMutex.UnLock();
       return 0;
      }

// Initialize the polltable entry
//
   pfd = &(PollTab[ptnum]);
   pfd->fd      = -lp->FD;
   pfd->events  = POLLIN | POLLRDNORM;
   pfd->revents = 0;

// Record relevant information in the link
//
   lp->PollEnt  = pfd;
   if (ptnum == PollTNum) PollTNum++;

// All done
//
   PollMutex.UnLock();
   return 1;
}

/******************************************************************************/
/*                               D i s a b l e                                */
/******************************************************************************/

void XrdPollPoll::Disable(XrdLink *lp, const char *etxt)
{
   XrdSysSemaphore mySem(0);
   PipeData cmdbuff[2];
   int myerrno = 0;

// Check if this link is in the pollQ. If so, remove it.
//
   if (lp->inQ) dqLink(lp);

// Simply return if the link is already disabled
//
   if (!lp->isEnabled) return;

// Trace this event
//
   TRACEI(POLL, "Poller " <<PID <<" async disabling link FD " <<lp->FD);

// Send a disable request to the poller thread handling this link. We need to
// wait until the operation is actually completed before returning.
//
   memset(&cmdbuff, 0, sizeof(cmdbuff));
   cmdbuff[0].req           = PipeData::DiFD;
   cmdbuff[0].Parms.Arg.fd  = lp->FD;
   cmdbuff[0].Parms.Arg.ent = lp->PollEnt - PollTab;
   cmdbuff[1].req           = PipeData::Post;
   cmdbuff[1].Parms.theSem  = &mySem;
   PollPipe.Lock();
   if (write(CmdFD, &cmdbuff, sizeof(cmdbuff)) < 0) myerrno = errno;
   PollPipe.UnLock();

// Verify that all went well and if termination wanted, terminate the link
//
   if (myerrno) XrdLog.Emsg("Poll", myerrno, "disable link", lp->ID);
      else {mySem.Wait();
            if (etxt && Finish(lp, etxt)) XrdSched.Schedule((XrdJob *)lp);
           }
}
  
/******************************************************************************/
/*                                E n a b l e                                 */
/******************************************************************************/

int XrdPollPoll::Enable(XrdLink *lp)
{
   PipeData cmdbuff;
   int myerrno = 0;

// Simply return if the link is already enabled
//
   if (lp->isEnabled) return 1;

// Add this link element to the queue
//
   PollMutex.Lock();
   lp->Next      = PollQ;
   PollQ         = lp;
   lp->inQ       = 1;
   PollMutex.UnLock();

// Send an enable request to the poller thread handling this link
//
   TRACEI(POLL, "sending poller " <<PID <<" enable for link " <<lp->FD);
   cmdbuff.req           = PipeData::EnFD;
   cmdbuff.Parms.Arg.fd  = lp->FD;
   cmdbuff.Parms.Arg.ent = lp->PollEnt - PollTab;
   PollPipe.Lock();
   if (write(CmdFD, &cmdbuff, sizeof(cmdbuff)) < 0) myerrno = errno;
   PollPipe.UnLock();

// Verify that all went well. Note that the link stays in the pollQ.
//
   if (myerrno)
      {XrdLog.Emsg("Poll", myerrno, "enable link", lp->ID); return 0;}

// All done
//
   return 1;
}

/******************************************************************************/
/*                               E x c l u d e                                */
/******************************************************************************/
  
void XrdPollPoll::Exclude(XrdLink *lp)
{
   XrdSysSemaphore mySem(0);
   PipeData cmdbuff[2];
   int myerrno = 0;

// Make sure this link is not enabled
//
   if (lp->isEnabled)
      {XrdLog.Emsg("Poll", "Detach of enabled link", lp->ID);
       Disable(lp);
      }
      else if (lp->inQ) dqLink(lp);

// Send a deatch request to the poller thread handling this link
//
   TRACEI(POLL, "sending poller " <<PID <<" detach for link " <<lp->FD);
   cmdbuff[0].req           = PipeData::RmFD;
   cmdbuff[0].Parms.Arg.fd  = lp->FD;
   cmdbuff[0].Parms.Arg.ent = lp->PollEnt - PollTab;
   cmdbuff[1].req           = PipeData::Post;
   cmdbuff[1].Parms.theSem  = &mySem;
   PollPipe.Lock();
   if (write(CmdFD, &cmdbuff, sizeof(cmdbuff)) < 0) myerrno = errno;
   PollPipe.UnLock();

// Verify that all went well and if termination wanted, terminate the link
//
   if (myerrno) XrdLog.Emsg("Poll", myerrno, "detach link", lp->ID);
      else mySem.Wait();
}
 
/******************************************************************************/
/*                                 S t a r t                                  */
/******************************************************************************/
  
void XrdPollPoll::Start(XrdSysSemaphore *syncsem, int &retcode)
{
   int numpolled, num2sched;
   XrdJob *jfirst, *jlast;
   XrdLink *plp, *lp, *nlp;
   short pollevents;
   const short pollOK = POLLIN | POLLRDNORM;

// Set up he first entry in the poll table to be our communications port
//
   PollTab[0].fd      = ReqFD;
   PollTab[0].events  = pollOK;
   PollTab[0].revents = 0;
   PollTNum = 1;

// Signal the caller to continue
//
   retcode = 0;
   syncsem->Post();

// Now do the main poll loop
//
   do {do {numpolled = poll(PollTab, PollTNum, -1);}
          while(numpolled < 0 && (errno == EAGAIN || errno == EINTR));

       // Check if we had a polling error
       //
       if (numpolled < 0)
          {if (errno != EINTR) Restart(errno);
              else numInterrupts++;
           continue;
          }
       numEvents += numpolled;

       // Check out base poll table entry, we can do this without a lock
       //
       if (PollTab[0].revents & pollOK)
          {doRequests(numpolled); 
           if (--numpolled <= 0) continue;
          }

       // Checkout which links must be dispatched (do this locked)
       //
       PollMutex.Lock();
       plp = 0; nlp = PollQ; jfirst = jlast = 0; num2sched = 0;
       while ((lp = nlp) && numpolled > 0)
             {if ((pollevents = lp->PollEnt->revents))
                 {lp->PollEnt->fd = -lp->PollEnt->fd;
                  if (plp) nlp = plp->Next = lp->Next;
                     else  nlp =     PollQ = lp->Next;
                  numpolled--; lp->inQ = 0;
                  if (!(pollevents & pollOK))
                     Finish(lp, Poll2Text(pollevents));
                  if (!(lp->isEnabled))
                     XrdLog.Emsg("Poll", "Disabled event occured for", lp->ID);
                     else {lp->isEnabled = 0;
                           lp->NextJob = jfirst; jfirst = (XrdJob *)lp;
                           if (!jlast) jlast=(XrdJob *)lp;
                           num2sched++;
                           continue;
                          }
                 }
              plp = lp; nlp = lp->Next;
             }
       if (numpolled) Recover(numpolled);
       PollMutex.UnLock();

       // Schedule the polled links
       //
       if (num2sched == 1) XrdSched.Schedule(jfirst);
          else if (num2sched) XrdSched.Schedule(num2sched, jfirst, jlast);
      } while(1);
}

/******************************************************************************/
/*                       P r i v a t e   M e t h o d s                        */
/******************************************************************************/
/******************************************************************************/
/*                              d o D e t a c h                               */
/******************************************************************************/

void XrdPollPoll::doDetach(int pti)
{
   int lastent;

// Get some starting values
//
   PollMutex.Lock();
   if ((lastent = PollTNum-1) < 0)
      {XrdLog.Emsg("Poll","Underflow during detach"); abort();}

   if (pti == lastent)
      do {PollTNum--;} while(PollTNum && PollTab[PollTNum-1].fd == -1);
  PollMutex.UnLock();
}

/******************************************************************************/
/*                            d o R e q u e s t s                             */
/******************************************************************************/

void XrdPollPoll::doRequests(int maxreq)
{
   const char *act;
   int pti, ptfd, num2do;
   XrdLink *lp;

// To keep ourselves from being swamped, base request read-aheads on the number
// of pending poll events.
//
   num2do = (maxreq < 3 ? -1 : maxreq);

// Now process all poll table manipulation requests
//
   while(num2do-- && getRequest())
        {     if (ReqBuff.req == PipeData::Post)
                 {ReqBuff.Parms.theSem->Post();
                  continue;
                 }
              pti = ReqBuff.Parms.Arg.ent;
              if ((ptfd = abs(PollTab[pti].fd)) != ReqBuff.Parms.Arg.fd)
                 {LogEvent(ReqBuff.req, PollTab[pti].fd, ReqBuff.Parms.Arg.fd);
                  continue;
                 }
              if (!(lp = XrdLink::fd2link(ptfd)))
                 {LogEvent(ReqBuff.req, -1, ptfd); continue;}
              if (ReqBuff.req == PipeData::EnFD)
                 {PollTab[pti].events = POLLIN | POLLRDNORM;
                  PollTab[pti].fd     = ptfd;
                  lp->isEnabled = 1; numEnabled++;
                  act = " enabled fd ";
                 }
         else if (ReqBuff.req == PipeData::DiFD)
                 {PollTab[pti].fd     = -ptfd;
                  act = " disabled fd ";
                  lp->isEnabled = 0;
                 }
         else if (ReqBuff.req == PipeData::RmFD)
                 {PollTab[pti].fd     = -1;
                  doDetach(pti);
                  act = " detached fd ";
                  lp->isEnabled = 0;
                 }
         else {XrdLog.Emsg("Poll", "Received an invalid poll pipe request");
               continue;
              }
         TRACE(POLL, "Poller " <<PID <<act <<ReqBuff.Parms.Arg.fd
                     <<" entry " <<pti <<" now at " <<PollTNum);
        }
}

/******************************************************************************/
/*                                d q L i n k                                 */
/******************************************************************************/
  
void XrdPollPoll::dqLink(XrdLink *lp)
{
  XrdLink *plp, *nlp;

// Find matching link in the queue
//
   PollMutex.Lock();
   lp->inQ = 0;
   plp = 0; nlp = PollQ;
   while (nlp  && (lp != nlp)) {plp=nlp; nlp = nlp->Next;}

// If we found the link, remove it. Otherwise complain
//
   if (nlp) {if (plp) plp->Next = nlp->Next;
                else  PollQ     = nlp->Next;
             PollMutex.UnLock();
            }
       else {PollMutex.UnLock();
             XrdLog.Emsg("dqLink", "Link not found in Q", lp->ID);
            }
}
  
/******************************************************************************/
/*                              L o g E v e n t                               */
/******************************************************************************/
  
void XrdPollPoll::LogEvent(int req, int pollfd, int cmdfd)
{
   const char *opn, *id1, *id2;
   char buff[4096];
   XrdLink *lp;

        if (ReqBuff.req == PipeData::EnFD)  opn = "enable";
   else if (ReqBuff.req == PipeData::DiFD)  opn = "disable";
   else if (ReqBuff.req == PipeData::RmFD)  opn = "detach";
   else                                     opn = "???";

   if (pollfd < 0)
      {sprintf(buff, "poll %d failed; FD %d", PID, cmdfd);
       XrdLog.Emsg("Poll", opn, buff, "does not map to a link");
       return;
      }

   if ((lp = XrdLink::fd2link(pollfd))) id1 = lp->ID;
      else id1 = "unknown";
   if ((lp = XrdLink::fd2link(cmdfd)))  id2 = lp->ID;
      else id2 = "unknown";
   snprintf(buff, sizeof(buff)-1, 
            "%d poll fd=%d (%s) not equal %s cmd fd=%d (%s).",
            PID, pollfd, id1, opn, cmdfd, id2);

   XrdLog.Emsg("Poll", "cmd/poll mismatch:", buff);
}
  
/******************************************************************************/
/*                               R e c o v e r                                */
/******************************************************************************/
  
void XrdPollPoll::Recover(int numleft)
{
   int i;
   XrdLink *lp;

// Turn off any unaccounted links
//
   for (i = 1; i < PollTNum; i++)
       if (PollTab[i].revents)
          {if (!(lp = XrdLink::fd2link(PollTab[i].fd))) PollTab[i].fd = -1;
              else {lp->isEnabled = 0; PollTab[i].fd = -PollTab[i].fd;
                    XrdLog.Emsg("Poll","Improper poll event for", lp->ID);
                   }
          }
}

/******************************************************************************/
/*                               R e s t a r t                                */
/******************************************************************************/
  
void XrdPollPoll::Restart(int ecode)
{
   XrdLink *lp;

// Issue error message
//
   TRACE(POLL, PID <<'-' <<TID <<" Poll error " <<ecode);
   XrdLog.Emsg("Poll", errno, "poll");

// For any outstanding link here, close the link and detach it
//
   PollMutex.Lock();
   while((lp = PollQ))
        {PollQ = lp->Next;
         lp->PollEnt->fd = -1;
         Finish(lp, "Unexpected polling error");
         XrdSched.Schedule((XrdJob *)lp);
        }
   PollMutex.UnLock();
}
