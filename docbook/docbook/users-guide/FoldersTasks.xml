<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Folders and Tasks</title>

<sect1>
<title>Folders</title>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/030000E1.png" width="220.7pt" depth="476.65pt"/></imageobject></inlinemediaobject>A <emphasis role="bold"><code>TFolder</code></emphasis> is a collection of objects visible and expandable in the ROOT object browser. Folders have a name and a title and are identified in the folder hierarchy by an "UNIX-like" naming convention. The base of all folders is <code>//root</code>. It is visible at the top of the left panel in the browser. The browser shows several folders under <code>//root</code>. </para>
<para>New folders can be added and removed to/from a folder.</para>
</sect1>

<sect1>
<title>Why Use Folders?</title>
<para>One reason to use folders is to reduce class dependencies and improve modularity. Each set of data has a producer class and one or many consumer classes. When using folders, the producer class places a pointer to the data into a folder, and the consumer class retrieves a reference to the folder. </para>
<para>The consumer can access the objects in a folder by specifying the path name of the folder.</para>
<para>Here is an example of a folder's path name:</para>
<para> <code>//root/Event/Hits/TCP</code></para>
<para>One does not have to specify the full path name. If the partial path name is unique, it will find it; otherwise it will return the first occurrence of the path. </para>
<para>The first diagram shows a system without folders. The objects have pointers to each other to access each other's data. Pointers are an efficient way to share data between classes. However, a direct pointer creates a direct coupling between classes. This design can become a very tangled web of dependencies in a system with a large number of classes. </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020000E2.jpg" width="111.1pt" depth="122.3pt"/></imageobject></inlinemediaobject>
</para>
<para>In the second diagram, a reference to the data is in the folder and the consumers refer to the folder rather than each other to access the data. The naming and search service provided by the ROOT folders hierarchy provides an alternative. It loosely couples the classes and greatly enhances I/O operations. In this way, folders separate the data from the algorithms and greatly improve the modularity of an application by minimizing the class dependencies. </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020000E3.jpg" width="135.75pt" depth="54.6pt"/></imageobject></inlinemediaobject>
</para>
<para>In addition, the folder hierarchy creates a picture of the data organization. This is useful when discussing data design issues or when learning the data organization. The example below illustrates this point.</para>
<para/>
</sect1>

<sect1>
<title>How to Use Folders</title>
<para>Using folders means to build a hierarchy of folders, posting the reference to the data in the folder by the producer, and creating a reference to the folder by the user.</para>

<sect2>
<title>Creating a Folder Hierarchy</title>
<para>To create a folder hierarchy you add the top folder of your hierarchy to <code>//root</code>. Then you add a folder to an existing folder with the <emphasis role="bold"><code>TFolder</code></emphasis><code>::AddFolder</code>         method. This method takes two parameters: the name and title of the folder to be added. It returns a pointer of the newly created folder.</para>
<para>The code below creates the folder hierarchy shown in the browser. In this macro, the folder is also added to the list of browsable. This way, it is visible in the browser on the top level.</para>

<programlisting language="c++">
<code>{</code>
<emphasis role="italic"><code>// Add the top folder of my hierary to //root</code></emphasis>
<code>TFolder *aliroot=gROOT-&gt;GetRootFolder()-&gt;AddFolder("aliroot",</code>
<code>                                                   "aliroot top level folders");</code>
<emphasis role="italic"><code>// Add the hierarchy</code></emphasis><emphasis role="italic"><code> to the list of browsables</code></emphasis>
<code>gROOT-&gt;GetListOfBrowsables()-&gt;Add(aliroot,"aliroot");</code>

<emphasis role="italic"><code>// Create and add the constants folder</code></emphasis>
<code>TFolder *constants=aliroot-&gt;AddFolder("Constants","Detector constants");</code>

<emphasis role="italic"><code>// Create and add the pdg folder to pdg</code></emphasis>
<code>TFolder *pdg = constants-&gt;AddFolder("DatabasePDG","PDG database");</code>

<emphasis role="italic"><code>// Create and add the run folder</code></emphasis>
<code>TFolder *run = aliroot-&gt;AddFolder("Run","Run dependent folders");</code>

<emphasis role="italic"><code>// Create and add the configuration folder to run</code></emphasis>
<code>TFolder *configuration = run-&gt;AddFolder("Configuration","Run configuration");</code>

<emphasis role="italic"><code>// Create and add the run_mc folder</code></emphasis>
<code>TFolder *run_mc = aliroot-&gt;AddFolder("RunMC","MonteCarlo run dependent folders");</code>

<emphasis role="italic"><code>// Create and add the configuration_mc folder to run_mc</code></emphasis>
<code>TFolder *configuration_mc = run_mc-&gt;AddFolder("Configuration", </code>
<code>                                              "MonteCarlo run configuration");</code>
<code>}</code>
</programlisting>

<para/>
</sect2>

<sect2>
<title>Posting Data to a Folder (Producer)</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/030000E4.png" width="199.25pt" depth="298.65pt"/></imageobject></inlinemediaobject>
</para>
<para>A <emphasis role="bold"><code>TFolder</code></emphasis> can contain other folders as shown above or any <emphasis role="bold"><code>TObject</code></emphasis> descendents. In general, users will not post a single object to a folder; they will store a collection or multiple collections in a folder. For example, to add an array to a folder:</para>

<programlisting language="c++">
TObjArray *array;
run_mc-&gt;Add(array);
</programlisting>

</sect2>

<sect2>
<title>Reading Data from a Folder (Consumer)</title>
<para>One can search for a folder or an object in a folder using the <emphasis role="bold"><code>TROOT</code></emphasis><code>::FindObjectAny</code> method. It analyzes the string passed as its argument and searches in the hierarchy until it finds an object or folder matching the name. With <code>FindObjectAny</code>, you can give the full path name, or the name of the folder. If only the name of the folder is given, it will return the first instance of that name. A string-based search is time consuming. If the retrieved object is used frequently or inside a loop, you should save a pointer to the object as a class data member. Use the naming service only in the initialization of the consumer class. When a folder is deleted, any reference to it in the parent or other folder is deleted also.</para>

<programlisting language="c++">
<code>conf=(TFolder*)gROOT-&gt;FindObjectAny("/aliroot/Run/Configuration");  </code><emphasis role="italic"><code>// or</code></emphasis>
<code>conf=(TFolder*)gROOT-&gt;FindObjectAny("Configuration");</code>
</programlisting>

<para>By default, a folder does not own the object it contains. You can overwrite that with <emphasis role="bold"><code>TFolder</code></emphasis><code>::SetOwner</code>. Once the folder is the owner of its contents, the contents are deleted when the folder is deleted. Some ROOT objects are automatically added to the folder hierarchy. For example, the following folders exist on start up:</para>

<para><code>//root/ROOT Files</code> with the list of open Root files</para>
<para><code>//root/Classes</code>    with the list of active classes</para>
<para><code>//root/Geometries</code> with active geometries</para>
<para><code>//root/Canvases</code>  with the list of active canvases</para>
<para><code>//root/Styles</code>     with the list of graphics styles</para>
<para><code>//root/Colors</code>     with the list of active colors</para>

<para>For example, if a file <code>myFile.root</code> is added to the list of files, one can retrieve a pointer to the corresponding <emphasis role="bold"><code>TFile</code></emphasis> object with a statement like:</para>

<programlisting language="c++">
<code>TFile *myFile = (TFile*)gROOT-&gt;FindObjectAny("/ROOTFiles/myFile.root"); </code><emphasis role="italic"><code>//or</code></emphasis>
<code>TFile *myFile = (TFile*)gROOT-&gt;FindObjectAny("myFile.root");</code>
</programlisting>

</sect2>
</sect1>

<sect1>
<title>Tasks</title>
<para>Tasks can be organized into a hierarchy and displayed in the browser. The <emphasis role="bold"><code>TTask</code></emphasis> class is the base class from which the tasks are derived. To give task functionality, you need to subclass the <emphasis role="bold"><code>TTask</code></emphasis> class and override the <code>Exec</code> method. An example of <emphasis role="bold"><code>TTask</code></emphasis> subclasses<code> is $ROOTSYS/tutorials/MyTasks.cxx</code>. The script that creates a task hierarchy and adds it to the browser is $<code>ROOTSYS/tutorials/tasks.C</code>. Here is a part of <code>MyTasks.cxx</code> that shows how to subclass from <emphasis role="bold"><code>TTask</code></emphasis>.</para>

<programlisting language="c++">
<emphasis role="italic"><code>// A set of classes deriving from TTask see macro tasks.C. The Exec</code></emphasis>
<emphasis role="italic"><code>// function of each class prints one line when it is called.  </code></emphasis>
<code>#include "TTask.h"  </code>
<code>class MyRun : public TTask {</code>
<code>public:</code>
<code>   MyRun() { ; }</code>
<code>   MyRun(const char *name,const char *title);</code>
<code>   virtual ~MyRun() { ; }</code>
<code>   void Exec(Option_t *option="");</code>
<code>   ClassDef(MyRun,1)    </code>    <emphasis role="italic"><code> // Run Reconstruction task</code></emphasis>
<code>};</code>

<code>class MyEvent : public TTask {</code>
<code>public:</code>
<code>   MyEvent() { ; } </code>
<code>   MyEvent(const char *name,const char *title);</code>
<code>   virtual ~MyEvent() { ; }</code>
<code>   void Exec(Option_t *option="");</code>
<code>   ClassDef(MyEvent,1)   </code><emphasis role="italic"><code>// Event Reconstruction task</code></emphasis>
<code>};</code>
</programlisting>

<para>Later in <code>MyTasks.cxx</code>, we can see examples of the constructor and overridden <code>Exec()</code> method:</para>

<programlisting language="c++">
<code>ClassImp(MyRun)</code>
<code>MyRun::MyRun(const char *name,const char *title):TTask(name,title)</code>
<code>{</code>
<code>...</code>
<code>}</code>
<code>void MyRun::Exec(Option_t *option)</code>
<code>{</code>
<code>   printf("MyRun executingn");</code>
<code>}</code>
</programlisting>

<para>Each <emphasis role="bold"><code>TTask</code></emphasis> derived class may contain other <emphasis role="bold"><code>TTasks</code></emphasis> that can be executed recursively. In this way, a complex program can be dynamically built and executed by invoking the services of the top level task or one of its subtasks.  The constructor of <emphasis role="bold"><code>TTask</code></emphasis> has two arguments: the name and the title. This script creates the task defined above, and creates a hierarchy of tasks.</para>

<programlisting language="c++">
<emphasis role="italic"><code>// Show the tasks in a browser. To execute a Task, select </code></emphasis>
<emphasis role="italic"><code>// “ExecuteTask” in the context menu see also other functions in the</code></emphasis>
<emphasis role="italic"><code>// TTask context menu, such as:</code></emphasis>
<emphasis role="italic"><code>//           -setting a breakpoint in one or more tasks</code></emphasis>
<emphasis role="italic"><code>//           -enabling/disabling one task, etc</code></emphasis>
void tasks()
{
gROOT-&gt;ProcessLine(".L MyTasks.cxx+");

TTask *run = new MyRun("run","Process one run");
TTask *event = new MyEvent("event","Process one event");
TTask *geomInit = new MyGeomInit("geomInit", "Geometry Initialisation");
TTask *matInit    = new MyMaterialInit("matInit","MaterialsInitialisation");
TTask *tracker = new MyTracker("tracker","Tracker manager");
TTask *tpc     = new MyRecTPC("tpc","TPC Reconstruction");
TTask *its     = new MyRecITS("its","ITS Reconstruction");
TTask *muon    = new MyRecMUON("muon","MUON Reconstruction");
TTask *phos    = new MyRecPHOS("phos","PHOS Reconstruction");
TTask *rich    = new MyRecRICH("rich","RICH Reconstruction");
TTask *trd     = new MyRecTRD("trd","TRD Reconstruction");
TTask *global  = new MyRecGlobal("global","Global Reconstruction");

<emphasis role="italic"><code>   // Create a hierarchy</code></emphasis><emphasis role="italic"><code> by adding sub tasks</code></emphasis>
run-&gt;Add(geomInit);
run-&gt;Add(matInit);
run-&gt;Add(event);
event-&gt;Add(tracker);
event-&gt;Add(global);
tracker-&gt;Add(tpc);
tracker-&gt;Add(its);
tracker-&gt;Add(muon);
tracker-&gt;Add(phos);
tracker-&gt;Add(rich);
tracker-&gt;Add(trd);
<emphasis role="italic"><code>   // Add the top level task   </code></emphasis>
gROOT-&gt;GetListOfTasks()-&gt;Add(run);
<emphasis role="italic"><code>   // Add the task to the browser</code></emphasis>
gROOT-&gt;GetListOfBrowsables()-&gt;Add(run);
new TBrowser;
}
</programlisting>

<figure><title>Tasks in the ROOT browser</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/030000E5.png" width="185.45pt" depth="219.45pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>
Note that the first line loads the class definitions in <code>MyTasks.cxx</code> with ACLiC. ACLiC builds a shared library and adds the classes to the CINT dictionary.
See "Adding a Class with ACLiC".
</para>

<para>To execute a <emphasis role="bold"><code>TTask</code></emphasis>, you call the <code>ExecuteTask</code> method. <code>ExecuteTask</code> will recursively call:</para>
<para>-  the <emphasis role="bold"><code>TTask</code></emphasis><code>::Exec </code>method of the derived class;</para>
<para>- the <emphasis role="bold"><code>TTask</code></emphasis><code>::ExecuteTasks</code>         to execute for each task the list of its subtasks;</para>
<para>If the top level task is added to the list of ROOT browseable objects, the tree of tasks can be seen in the ROOT browser. To add it to the browser, get the list of browseable objects first and add it to the collection. </para>

<programlisting language="c++">
<code>gROOT-&gt;GetListOfBrowsables()-&gt;Add(run);</code>
</programlisting>

<para>The first parameter of the <code>Add</code> method is a pointer to a <emphasis role="bold"><code>TTask</code></emphasis>, the second parameter is the string to show in the browser. If the string is left out, the name of the task is used.</para>
<para>After executing, the script above the browser will look like in this figure. </para>
</sect1>

<sect1>
<title>Execute and Debug Tasks</title>
<para>The browser can be used to start a task, set break points at the beginning of a task or when the task has completed. At a breakpoint, data structures generated by the execution up this point may be inspected asynchronously and then the execution can be resumed by selecting the "<code>Continue</code>" function of a task.</para>
<para> A task may be active or inactive (controlled by <emphasis role="bold"><code>TTask</code></emphasis><code>::SetActive</code>). When a task is inactive, its sub tasks are not executed.  A task tree may be made persistent, saving the status of all the tasks.</para>
</sect1>
</chapter>



