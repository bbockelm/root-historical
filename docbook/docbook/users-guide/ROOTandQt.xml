<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>ROOT/Qt Integration Interfaces</title>

<sect1>
<title>Qt-ROOT Implementation of TVirtualX Interface (BNL)</title>
<para>Qt-ROOT implementation of <emphasis role="bold"><code>TVirtualX</code></emphasis> (Qt-layer) is to provide a convenient way of creating the complex end-user applications that require both Qt GUI and ROOT features. The primary goal is to allow “embedding” the ROOT classes like <emphasis role="bold"><code>TCanvas</code></emphasis> and <emphasis role="bold"><code>TPad</code></emphasis> into the arbitrary Qt widgets and using it seamlessly with other Qt-based components and Qt-based third party libraries. <emphasis role="bold"><code>TGQt</code></emphasis> ROOT class, a Qt-based implementation of <emphasis role="bold"><code>TVirtualX</code></emphasis> interface is an optional ROOT component. The implementation was developed and is supported by the  <uri xmlns:xlink="http://www.star.bnl.gov/">STAR</uri> collaboration at  <uri xmlns:xlink="http://www.bnl.gov/">Brookhaven National Laboratory</uri>.</para>

<sect2>
<title>Installation</title>

<sect3>
<title>Qt Package Installation and Configuration</title>
<para>ROOT Qt-layer requires a “good” properly configured Qt package version. To install it, one has to: </para>
<para>1. Make sure the adequate version of Qt system. Even though Qt ROOT implementation theoretically can work with any Qt release version 3.xx, we found the earlier versions of the package not reliable and recommend installing the Qt version 3.3 or higher. The package was tested against Qt 4.3 also (Qt 4.3 and higher versions contain some features introduced by TrollTech to back the ROOT applications).</para>
<para>2. Check the Qt package configuration and its compilation options are consistent with those used to compile and install ROOT alone. For Qt 3.x, we recommend configuring Qt as follows:</para>
<para>
<code>./configure –thread –no-xft –qt-gif –no-exeptions </code></para>
<para>I.e. one is required to build the Qt version with the "<code>thread</code>" support and with “<code>no exceptions</code>". Generally, you are free to select the remaining Qt options like the types of the different image formats provided etc. You can check the Qt installation parameters by looking up the file:</para>
<para>
<code>more $QTDIR/config.status</code></para>
<para>
<code>No special flag for Qt 4.3 build and higher have been set yet to make QtRoot working.</code></para>
<para>
<code>3. Attention. The Qt port for 4.3 and above versions should be considered as an experimental one. Most examples in this manual are for Qt version 3.3 and they need to be adjusted for Qt 4.3.x.</code></para>
</sect3>

<sect3>
<title>Qt-layer Installation</title>
<para>The Qt-layer is included into the ROOT distribution kit. To install it one has to configure ROOT. The installation does not change any other components of the ROOT package. It produces several extra-shared libraries that may be dynamically loaded into the ROOT session at start time with the regular ROOT plug-in mechanism to replace the “native” GUI interface. To install Qt-layer one should follow the ROOT installation procedure providing the QTDIR environment variable points to the proper version of Qt system. Many Linux flavors come with the pre-installed Qt. May sure you are not going to pick the obsolete version.</para>

<programlisting language="c++">
<code>% cd root </code>
<code>% ./configure &lt;target&gt; --enable-qt </code>
<code>% gmake</code>
<code>% gmake install</code>
</programlisting>

</sect3>

<sect3>
<title>Qt Main C++ Classes CINT Dictionary</title>
<para>The ROOT CINT dictionary allows to call the Qt main classes directly from the ROOT command prompt is an optional component and it is not created during the “Qt-layer installation”. To build / re-build the Qt main classes ROOT dictionary one can invoke the make </para>

<programlisting language="c++">
<code>% cd root </code>
<code>% gmake qtcint</code>
</programlisting>

<para>The dictionary contains so-called Qt main classes as defined by TrollTech on the Web page:  <uri xmlns:xlink="http://doc.trolltech.com/3.3/mainclasses.html">http://doc.trolltech.com/3.3/mainclasses.html</uri>. The dictionary is NOT loaded automatically and it should be loaded by the user ROOT macro as needed. </para>
</sect3>

<sect3>
<title>Qt-layer Configuration</title>
<para>Any ROOT-based application should be configured to use Qt-layer using ROOT “Environment Setup”. The correct <emphasis role="bold"><code>QTDIR</code></emphasis> environment variable to locate the proper version of Qt package should be provided as well. There are several ways to customize the ROOT setup environment to activate Qt-layer.</para>
<para>Look up at <code>$ROOTSYS/etc/system.rootrc</code>. Find there the definition of <code>Gui.Backend</code> and <code>Gui.Factory</code>: </para>

<programlisting language="c++">
# GUI specific settings
Gui.Backend:                native
Gui.Factory:                native
</programlisting>

<para>Now you can either edit the file <code>$ROOTSYS/etc/system.rootrc</code> or provide your own custom <code>.rootrc</code> redefine the options:</para>

<programlisting language="c++">
# GUI specific settings
Gui.Backend:                qt
Gui.Factory:                qt
</programlisting>

<para>If you need to switch often from native layer to qt one back and force you may find convenient to define the type of GUI using some external environment variable defining options indirectly: </para>

<programlisting language="c++">
# GUI specific settings
Gui.Backend:                $(GUI)
Gui.Factory:                $(GUI)
</programlisting>

<para>The last step is to make sure your <code>LD_LIBRARY_PATH</code> variable point to the <code>$QTDIR/lib</code> directory. Optionally, you can define the Qt Widget “look and feel” using the option <code>Gui.Style</code> option. The number of different styles to choose from is defined by your local Qt installation. Usually you can choose from “<code>window</code>”, “<code>motif</code>”, “<code>cde</code>”, “<code>motifplus</code>”, “<code>platinum</code>”, “<code>sgi</code>”, “<code>compact</code>”, “<code>windowsxp</code>”, “<code>aqua</code>” or “<code>macintosh</code>”. For example, the option defined below will force the “windows” look and feel on any platform.</para>

<programlisting language="c++">
# Qt GUI style setting
Gui.Style:                windows
</programlisting>

<para>The default style is so-called “native” style. That is defined by the current application environment.</para>
</sect3>
</sect2>

<sect2>
<title>Applications</title>
<para>As soon as you customize ROOT “Environment Setup” to use Qt-layer you can start any ROOT session or stand-alone ROOT-based applications and … even though your applications will be using the Qt package you should not see any difference. This merely means if the only thing you want to do is just use ROOT or some ROOT-based stand-alone application “as is” then you probably do not need to switch to Qt-layer and should skip this section entirely. It is recommended you communicate the lower graphical layer via the generic <emphasis role="bold"><code>TVirtualX</code></emphasis> interface provided by the global <emphasis role="italic"><emphasis role="bold"><code>gVirtualX</code></emphasis></emphasis>.</para>

<sect3>
<title>Qt-based ROOT Applications</title>
<para>“ROOT application” is the application that either instantiates the ROOT <emphasis role="bold"><code>TApplication</code></emphasis> / <emphasis role="bold"><code>TRint</code></emphasis> class and enters the ROOT event loop or is the shared library that can be loaded into the already running ROOT application via <emphasis role="bold"><code>TSystem</code></emphasis><code>::Load</code> method or via ROOT plug-in mechanism. You must neither initialize Qt <code>QApplication</code> nor enter the Qt event loop. Qt-layer takes care about these two steps. What you need is to instantiate the Qt object of your choice and to keep playing ROOT rules.</para>

<programlisting language="c++">
#include &lt;TRint.h&gt;
#include &lt;qpushbutton.h&gt;
int main( int argc, char **argv ) {
<emphasis role="italic"><code>// Create an interactive ROOT application</code></emphasis>
TRint *theApp = new TRint("Rint", &amp;argc, argv);
<emphasis role="italic"><code>   // Create Qt object within ROOT application</code></emphasis>
QPushButton hello( "Hello world!", 0 );
hello.resize( 100, 30 );
hello.show();
<emphasis role="italic"><code>   // and enter the ROOT event loop...</code></emphasis>
theApp-&gt;Run();
}
</programlisting>

<para>Under UNIX, you can build the stand-alone ROOT HelloWord Qt-based application with the command </para>
<para>
<code>g++ `root-config --cflags --glibs` -I$QTDIR/include -L$QTDIR/lib </code></para>
<para>
<code>                                   -lqt-mt HelloWord.cxx -o HelloWord</code></para>
</sect3>

<sect3>
<title>ROOT-based Qt Applications</title>
<para>“Qt application” is the application that either instantiates the Qt <code>QApplication</code> and enters the Qt event loop or is the shared library that can be loaded into the already running Qt application via Qt plug-in mechanism. You must neither initialize ROOT <emphasis role="bold"><code>TApplication</code></emphasis> / <emphasis role="bold"><code>TRint</code></emphasis> nor enter the ROOT event loop. Qt-layer takes care about both of these steps. What you need is just to instantiate the embedded and regular ROOT objects of your choice and keep playing Qt rules. ROOT-based Qt applications treat the “native” style of the ROOT <emphasis role="bold"><code>Gui.Backend</code></emphasis>         and <emphasis role="bold"><code>Gui.Factory</code></emphasis> parameters as “qt”. For example,</para>
<para/>

<programlisting language="c++">
<emphasis role="italic"><code>// Minimal ROOT based Qt example</code></emphasis>
#include &lt;qapplication.h&gt;
#include "TGraph.h"
#include "TQtWidget.h"
#include "TCanvas.h"

int main( int argc, char **argv ) {

QApplication *app = new QApplication(argc, argv);
TQtWidget *MyWidget= new TQtWidget(0,"MyWidget");
<emphasis role="italic"><code>    // Create any other Qt-widget here</code></emphasis>
MyWidget-&gt;show();
MyWidget-&gt;GetCanvas()-&gt;cd();
TGraph *mygraph;
float x[3] = {1,2,3};
float y[3] = {1.5, 3.0, 4.5};
mygraph  = new TGraph(3,x,y);
mygraph-&gt;SetMarkerStyle(20);
mygraph-&gt;Draw("AP");
MyWidget-&gt;GetCanvas()-&gt;Update();
app-&gt;exec();
return 0;
}
</programlisting>

<para>The code above can be converted into the running application using qmake, TrollTech provided, build utility. As soon as you have qmake project file <code>HelloCanvas.pro</code>:</para>

<programlisting language="c++">
<emphasis role="italic"><code># Automatically generated by qmake (1.07a) Sun Jun 26 02:03:47 2005</code></emphasis>
<emphasis role="italic"><code># Adjusted by hand to include $ROOTSYS/include/rootcint.pri file</code></emphasis>

TEMPLATE = app thread
CONFIG -= moc
INCLUDEPATH += .

<emphasis role="italic"><code># include "by hand" the qmake include file from</code></emphasis>
<emphasis role="italic"><code># ROOT distribution to define</code></emphasis>
<emphasis role="italic"><code>#  1. include path to the ROOT system header files</code></emphasis>
<emphasis role="italic"><code>#  2. the list of the ROOT shared libraries to link</code></emphasis>
<emphasis role="italic"><code>#     Qt application against of</code></emphasis>
<emphasis role="italic"><code>#  3. qmake rules to generate ROOT/Cint dictionaries</code></emphasis>

include("$(ROOTSYS)/include/rootcint.pri")

<emphasis role="italic"><code># Input</code></emphasis>
SOURCES += HelloCanvas.cxx
</programlisting>

<para> You can get the running ROOT-based Qt application with the Unix shell commands:</para>

<programlisting language="c++">
<code>qmake HelloCanvas.pro</code>
<code>make</code>
<code>HelloCanvas</code>
</programlisting>

</sect3>

<sect3>
<title>Qt Project for Creation of ROOT Shared Libraries with Qt Components and ROOT Dictionaries</title>
<para> It is possible and desirable to create the ROOT-based Qt application with TrollTech provided qmake utility. To do that one should include one qmake include file, namely, <code>$ROOTSYS/include/rootcint.pri </code>with one extra line in the project file (as the example above has revealed). The include file defines all necessary components one needs to compile and link the healthy Qt application against of the ROOT shared libraries. It contains the qmake rules to create the ROOT/CINT dictionary from the list of the provided header files.</para>
<para>For example, we may convert the stand-alone Qt-based ROOT application above into C++ class with <code>RootCint</code> dictionary, that one loads into the interactive ROOT session and invokes interactively. This task requires four simple files.</para>
<para>1. Class dictionary definition file <code>LinkDef.h</code>:</para>

<programlisting language="c++">
#ifdef __CINT__
#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class TMyQButton;

#endif
</programlisting>

<para>2. Class header file <code>TMyQButton.h</code>:</para>

<programlisting language="c++">
#ifndef ROOT_TMyQButton
#define ROOT_TMyQButton
#include "Rtypes.h"

class QPushButton;
class TVirtualPad;

class TMyQButton {
private:
QPushButton *fMyButton;
public:
TMyQButton(const char*name="");
virtual ~TMyQButton();
void SetSize(UInt_t w, UInt_t h);
void Show(Bool_t show=kTRUE);
void SetText(const char *text);
void SetOn(Bool_t on=kTRUE);
void SetStyle(const char * style);
};
#endif
</programlisting>

<para> 3. Class implementation file <code>TMyQButton.cxx</code>:</para>

<programlisting language="c++">
#include "TMyQButton.h"
#include &lt;qpushbutton.h&gt;

<emphasis role="italic"><code>// This class allow you to create and manipulate the QPushButton interactively</code></emphasis>
TMyQButton::TMyQButton(const char *name) {
<emphasis role="italic"><code>   // Create Qt QPushButton interactively</code></emphasis>
fMyButton = new QPushButton(name,0);
}

TMyQButton::~TMyQButton() { delete fMyButton; }

void TMyQButton::SetSize(UInt_t w, UInt_t h) { <emphasis role="italic"><code>// Resize the Qt button</code></emphasis>
fMyButton-&gt;resize(w,h);
}
void TMyQButton::Show(Bool_t show) {          <emphasis role="italic"><code> // Show / hide the button</code></emphasis>
if (show)  fMyButton-&gt;show();
else       fMyButton-&gt;hide();
}
void TMyQButton::SetText(const char *text) {   <emphasis role="italic"><code>// Set / </code></emphasis><emphasis role="italic"><code>change the button text</code></emphasis>
fMyButton-&gt;setText(text);
}
void TMyQButton::SetOn(Bool_t on) {
fMyButton-&gt;setOn(on);
}
void TMyQButton::SetStyle(const char * style) { <emphasis role="italic"><code>// Set </code></emphasis><emphasis role="italic"><code>button’s</code></emphasis><emphasis role="italic"><code> look and feel</code></emphasis>
<emphasis role="italic"><code>   // The possible styles are defined by the local Qt inmstallation.</code></emphasis>
<emphasis role="italic"><code>   // For example the possible style can be: "window", "motif", "cde", "sgi",</code></emphasis>
<emphasis role="italic"><code>   // "motifplus", "platinum",  "compact","windowsxp", "aqua", "macintosh</code></emphasis>
fMyButton-&gt;setStyle(style);
}
</programlisting>

<para>4. <code>qmake</code> project file <code>MyQButton.pro</code>:</para>

<programlisting language="c++">
TEMPLATE = lib dll thread
<emphasis role="italic"><code># Input</code></emphasis>
HEADERS += TMyQButton.h
SOURCES += TMyQButton.cxx

CREATE_ROOT_DICT_FOR_CLASSES  = $$HEADERS LinkDef.h
include("$(ROOTSYS)/include/rootcint.pri")
</programlisting>

<para>At this point, you are ready to produce the class-shared library with the ROOT/CINT dictionary by invoking two shell commands (as above):</para>

<programlisting language="c++">
<code>qmake MyQButton.pro</code>
<code>make</code>
</programlisting>

<para>In addition, get you class into the interactive Root session:</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>gSystem-&gt;Load(</code></emphasis>"<emphasis role="bold"><code>lib</code></emphasis><emphasis role="bold"><code>MyQButton.</code></emphasis><emphasis role="bold"><code>so</code></emphasis>"<emphasis role="bold"><code>)</code></emphasis>
root[] <emphasis role="bold"><code>TM</code></emphasis><emphasis role="bold"><code>yQButton knopka;</code></emphasis>
root[] <emphasis role="bold"><code>knopka.SetSize(100,60);</code></emphasis>
root[] <emphasis role="bold"><code>knopka.SetText(</code></emphasis>"<emphasis role="bold"><code>Hell</code></emphasis><emphasis role="bold"><code>o Cint</code></emphasis>"<emphasis role="bold"><code>);</code></emphasis>
root[] <emphasis role="bold"><code>knopka.Show();</code></emphasis>
</programlisting>

<para>Please, pay your attention that class implementation does not contain any Qt system initialization call. Since the above example is a ROOT application, do not forget, one needs the <code>.rootrc</code> file to assign “<code>qt</code>” value for the options<code> Gui.Backend</code> and <code>Gui.Factory</code>.</para>
<para>Note: Do not mix the ROOT GUI and Qt GUI API within the same class implementation. </para>
</sect3>

<sect3>
<title>Using Qt “Designer” to Create Qt GUI with Embedded ROOT Objects</title>
<para>Qt package is equipped with  <uri xmlns:xlink="http://doc.trolltech.com/3.3/designer-manual.html">Qt designer</uri> – a powerful tool to create the high quality, robust GUI interfaces for your applications. It is possible and desirable to use this utility to create the ROOT-based Qt GUI. To do that one should add the <code>$ROOTSYS/include/rootcint.pri</code> in the project file generated by designer and configure Qt designer to use the so-called “custom widget” defined by <code>$ROOTSYS/include/TQtWidget.cw</code>. The file defines the custom <emphasis role="bold"><code>TQtWidget</code></emphasis> Qt widget to back the embedded <emphasis role="bold"><code>TCanvas</code></emphasis> objects. To customize your designer start <code>designer</code> and select “Edit Custom Widget” menu:</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/image549.jpg"/></imageobject></inlinemediaobject>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000224.png" width="262.55pt" depth="224.7pt"/></imageobject></inlinemediaobject>
</para>
<para>Open “Edit Custom Widget” dialog and load the <emphasis role="bold"><code>TQtWidget</code></emphasis> (“embedded” <emphasis role="bold"><code>TCanvas</code></emphasis>) widget definition into the designer. One should do this at once. Designer will remember the last configuration and will be restoring it for all subsequent designer sessions.</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/image551.jpg"/></imageobject></inlinemediaobject>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000225.png" width="261.95pt" depth="129.1pt"/></imageobject></inlinemediaobject>
</para>
<para>Now, you can create your shining GUI interface that contains <emphasis role="bold"><code>TCanvas</code></emphasis> / <emphasis role="bold"><code>TPad</code></emphasis> object with all features of these famous ROOT classes.</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/image553.jpg"/></imageobject></inlinemediaobject>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000226.png" width="272.5pt" depth="220.95pt"/></imageobject></inlinemediaobject>
</para>
<para/>
<para>We strongly recommend you to read the “Quick Start” section of the Qt designer manual  <uri xmlns:xlink="http://doc.trolltech.com/3.3/designer-manual.html">http://doc.trolltech.com/3.3/designer-manual.html</uri>. One can find further information, the examples of the working ROOT-based Qt projects including all examples of this section as well as the list of the references and publications on the Qt project Web site  <uri xmlns:xlink="http://root.bnl.gov">http://root.bnl.gov</uri></para>
</sect3>

<sect3>
<title>Using Qt Class Library from the ROOT C++ Interpreter</title>
<para>Since the Qt package is a regular C++ class library to use it within ROOT C++ interpreter environment one should either load the dedicated RootCint dictionary or apply ACLiC mode.</para>
<para>For example, the following ROOT interactive session is to popup the “Open File” Qt dialog box and print out the file name selected by the user via the dialog.</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>gSystem-&gt;Load(</code></emphasis>"<emphasis role="bold"><code>qtcint</code></emphasis>"<emphasis role="bold"><code>)</code></emphasis><emphasis role="bold"><code>;</code></emphasis>
root[] <emphasis role="bold"><code>cout &lt;&lt; QFileDialog::getOpenFileName() &lt;&lt; endl;</code></emphasis>
</programlisting>

<para>The ROOT session:</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>gSystem-&gt;Load(</code></emphasis>"<emphasis role="bold"><code>qtcint</code></emphasis>"<emphasis role="bold"><code>)</code></emphasis><emphasis role="bold"><code>;</code></emphasis>
root[] <emphasis role="bold"><code>QPrinter p;</code></emphasis>
root[] <emphasis role="bold"><code>p.setup();</code></emphasis>  <emphasis role="italic"><code>// Display the Qt “Setup printer” dialog box</code></emphasis>
root[] <emphasis role="bold"><code>Int_t id = gPad-&gt;GetPixmapID();</code></emphasis>
root[] <emphasis role="bold"><code>QPixmap *pix = (QPixmap *)(TGQt::iwid(id));</code></emphasis>
root[] <emphasis role="bold"><code>QPainter pnt(&amp;p);</code></emphasis>
root[] <emphasis role="bold"><code>pnt.drawPixmap(0,0,*pix);</code></emphasis>
</programlisting>

<para>is to display the Qt “Setup Printer” dialog and use QPrinter object to print the current <emphasis role="bold"><code>TPad</code></emphasis> image to the selected printer. To use the more complex Qt-related code one is advised to apply “ACLiC – Automatic Compiler of Libraries for CINT” (see CINT the C++ Interpreter). For example:</para>

<programlisting language="c++">
#ifndef __CINT__
#  include &lt;qfiledialog.h&gt;
#  include &lt;qstringlist.h&gt;
#  include &lt;qstring.h&gt;
#endif
void FileDialog() {
// This is small AClIC wrapper to use Qt 3.3 QFileDialog class
// See: http://doc.trolltech.com/3.3/qfiledialog.html#getOpenFileNames
// To use, invoke ACLiC from the ROOT prompt:
// root [] .x FileDialog .C++
QStringList files = QFileDialog::getOpenFileNames ();
QStringList::Iterator it = files.begin();
while ( it != files.end() ) {
printf ("Next file selected: %sn", (const char *)(*it));
++it;
}
}
</programlisting>

<para>With the ROOT ACLiC session:</para>

<programlisting language="c++">
root [0]<emphasis role="bold"><code> .x FileDialog.C++</code></emphasis>
Info in &lt;TUnixSystem::ACLiC&gt;: creating shared library   macros/./FileDialog_C.so
Next file selected: macros/QtFileDialog.C
Next file selected: macros/QtMultiFileDialog.C
Next file selected: macros/QtMultiFileDialog_C.so
Next file selected: macros/QtPrintDialog.C
Next file selected: macros/QtPrintDialog_C.so
</programlisting>

<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000227.png" width="194.3pt" depth="139.05pt"/></imageobject></inlinemediaobject>
</para>
<para>the Qt generated “Open File Dialog” pops up and prints out the list of the selected files.</para>
</sect3>
</sect2>

<sect2>
<title>TQtWidget Class, Qt Signals / Slots and TCanvas Interface</title>
<para><emphasis role="bold"><code>TQtWidget</code></emphasis> is a <code>QWidget</code> with the <code>QPixmap</code> double buffer. It is designed to back the ROOT <emphasis role="bold"><code>TCanvasImp</code></emphasis> class interface and it can be used as a regular Qt Widget to create Qt-based GUI with the embedded <emphasis role="bold"><code>TCanvas</code></emphasis> objects. It was mentioned the class can used as a “custom widget” to create the advanced GUI with the TrollTech “designer” utility.</para>
<para>To do that <emphasis role="bold"><code>TQtWidget</code></emphasis> class can emit the set of the “Qt signals” and it is equipped with the collection of the dedicated “Qt slots”.</para>

<sect3>
<title>TQtWidget Public Qt Slots</title>
<para><emphasis role="bold"><code>TQtWidget</code></emphasis> class inherits all slots of its base QWidget class (see:  <uri xmlns:xlink="http://doc.trolltech.com/3.3/qwidget.html">http://doc.trolltech.com/3.3/qwidget.html</uri>). In addition, it is in possession of two groups of the dedicated slots.</para>

<programlisting language="c++">
virtual void cd();
virtual void cd(int subpadnumber);
</programlisting>

<para>Make the associated <emphasis role="bold"><code>TCanvas</code></emphasis>/<emphasis role="bold"><code>TPad</code></emphasis> the current one, the proxy interface to the embedded <emphasis role="bold"><code>TCanvas</code></emphasis><code>::cd()</code>         and <emphasis role="bold"><code>TCanvas</code></emphasis><code>::cd(int subpadnumber)</code> methods.</para>

<programlisting language="c++">
virtual bool Save(const QString &amp;fileName) const
virtual bool Save(const char *fileName) const
virtual bool Save(const QString &amp;fileName,const char *format,
int quality=60) const
virtual bool Save(const char *fileName,const char *format,int quality=60) const
</programlisting>

<para>The slots are to save the double buffer of the <emphasis role="bold"><code>TQtWidget</code></emphasis> object using the default or specified save format. The default save format is defined either by the “known” file extension or by the “default” file format.  </para>
<para>The default format can be changed by <emphasis role="bold"><code>TQtWidget</code></emphasis><code>::SetSaveFormat</code> method and it is set to be “<code>PNG</code>” at the class constructor.</para>
</sect3>

<sect3>
<title>TQtWidget Qt Signals</title>
<para>The class object emits the different signals that can be used to create the sophisticated GUI applications.</para>
<para>The signal <code>CanvasPainted()</code> is emitted to notify the GUI that the double buffer of the widget has been filled and buffer has been painted onto the screen. In the other words, this signal means that all <emphasis role="bold"><code>TObject</code></emphasis> objects of the embedded <emphasis role="bold"><code>TCanvas</code></emphasis> have been visualized on the screen. The signal:</para>

<programlisting language="c++">
Saved(bool ok)
</programlisting>

<para>is emitted to notify the GUI that a <emphasis role="bold"><code>TCanvas</code></emphasis> has been saved into the file:</para>

<programlisting language="c++">
RootEventProcessed(TObject *selected, unsigned int event, TCanvas *c)
</programlisting>

<para>This signal notifies the Qt framework that the Qt mouse/keyboard event has been process by ROOT. The signal is disabled by default, i.e. the connected slot is not called unless the signal is explicitly enabled with <emphasis role="bold"><code>TQtWidget</code></emphasis><code>::EnableSignalEvents</code> method.</para>
<para/>
<para>For example, to create a custom response to the mouse crossing of a <emphasis role="bold"><code>TCanvas</code></emphasis><emphasis role="bold"><code>, </code></emphasis>you need to connect the <code>RootEventProsecced</code> signal with your <code>qt</code> slot. The next piece of the code demonstrates that:</para>

<programlisting language="c++">
connect(tQtWidget,SIGNAL(RootEventProcessed(TObject *,unsigned int, TCanvas *)),
this,SLOT(CanvasEvent(TObject *, unsigned int, TCanvas *)));
. . .
void qtrootexample1::CanvasEvent(TObject *obj,unsigned int event,TCanvas *)
{
TQtWidget *tipped = (TQtWidget *)sender();
const char *objectInfo = obj-&gt;GetObjectInfo(tipped-&gt;GetEventX(),
tipped-&gt;GetEventY());
QString tipText ="You have ";
if  (tipped == tQtWidget1)
tipText +="clicked";
else
tipText +="passed";
tipText += " the object &lt;";
tipText += obj-&gt;GetName();
tipText += "&gt; of class ";
tipText += obj-&gt;ClassName();
tipText += " : ";
tipText += objectInfo;

QWhatsThis::display(tipText)
}
</programlisting>

</sect3>
</sect2>
</sect1>

<sect1>
<title>GSI QtROOT</title>
<para>The Qt Interface developed at Darmstadt GSI is a lightweight interface that enables the user to write a Qt 3 application, which can use ROOT. The Native Qt 4 support is planned and will be available in the near future.  Furthermore, existing Qt 3 Application can use this interface to have almost full access to the Root functionality (see "Create the Main file for the project" below). Using this interface a full access to both ROOT and Qt widgets is possible in one application.</para>
<para>An Embedded Root canvas can be set inside any Qt widget by C++ calls or using the Qt designer. To use the Qt 3.x designer to make ROOT applications with Qt GUI's follow the steps described below: </para>
<para>1) Add the TQRootCanvas to the Qt Designer:</para>
<itemizedlist>
<listitem><para>Start the designer</para></listitem>
<listitem><para>In the designer menu choose tools-&gt;custom-&gt;Edit Custom Widget</para></listitem>
<listitem><para>In the Edit Custom Widget window choose "Load Description"</para></listitem>
<listitem><para>From GSI Qt-Root interface directory load the file "TQRootCanvas.cw"</para></listitem>
</itemizedlist>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/02000228.jpg" width="300.4pt" depth="237.1pt"/></imageobject></inlinemediaobject>
</para>
<para>Now you will see the <emphasis role="bold"><code>TQRootCanvas</code></emphasis> in the Class field, you will also see all other parameters, signals, slots and properties of the <emphasis role="bold"><code>TQRootCanvas</code></emphasis>.</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/02000229.jpg" width="271.85pt" depth="150.85pt"/></imageobject></inlinemediaobject></para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0200022A.jpg" width="271.85pt" depth="150.85pt"/></imageobject></inlinemediaobject>
</para>
<para>Now we are ready use the <emphasis role="bold"><code>TQRootCanvas</code></emphasis> within the Qt 3.x designer. </para>

<sect2>
<title>Create a New Project in the Designer</title>
<para>1). Choose "File-&gt;New"</para>
<para>2). Select C++ Project </para>
<para>3). Create the Project in a directory of your choice. </para>
<para>4). In the project settings (Project-&gt;Setting from the designer main window) select the C++ tab. Add ROOT and GSI Qt-Root libraries into the Libs entry field. For example:</para>
<para>
<code>-L(ROOTSYS)/lib -lCore -lCint -lHist -lGraf -lGraf3d -lGpad -lTree -lRint
-lPostscript -lMatrix -lPhysics -lnsl -lm -ldl -rdynamic  -lqtgsi</code></para>
<para>Add <code>$(ROOTSYS)/include</code> into Includepath entry field.     </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300022B.png" width="309.1pt" depth="178.15pt"/></imageobject></inlinemediaobject>
</para>
<para>These setting will be saved in <code>project.pro</code> file and <code>qmake</code> will generate the <code>Makefile</code> according to them. </para>
<para>Now you can create your own widgets in the designer and add them to the project. </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0200022C.jpg" width="333.3pt" depth="265.65pt"/></imageobject></inlinemediaobject>
</para>
</sect2>

<sect2>
<title>main()</title>
<para>The <code>main</code> file should look like:</para>

<programlisting language="c++">
#include "TQtApplication.h"
#include "TQtRootApplication.h"
#include "MyWidget1.h"
int main( int argc, char ** argv ){
    TQRootApplication a( argc, argv, 0);
    TQApplication app("uno",&amp;argc,argv);
    MyWidget1 *w = new Mywidget1;
    w-&gt;show();
    a.connect( &amp;a, SIGNAL( lastWindowClosed() ), &amp;a, SLOT( quit() ) );
    return a.exec();
}
</programlisting>

</sect2>
</sect1>
</chapter>



