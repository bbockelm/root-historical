/******************************************************************************/
/*                                                                            */
/*                        X r d P o l l D e v . i c c                         */
/*                                                                            */
/* (c) 2004 by the Board of Trustees of the Leland Stanford, Jr., University  */
/*       All Rights Reserved. See XrdInfo.cc for complete License Terms       */
/*   Produced by Andrew Hanushevsky for Stanford University under contract    */
/*              DE-AC03-76-SFO0515 with the Department of Energy              */
/******************************************************************************/

//         $Id$

const char *XrdPollDevCVSID = "cvsid: $Id$";

#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/devpoll.h>

#include "XrdSys/XrdSysError.hh"
#include "Xrd/XrdLink.hh"
#include "Xrd/XrdPollPoll.hh"
#include "Xrd/XrdScheduler.hh"

/******************************************************************************/
/*                           G l o b a l   D a t a                            */
/******************************************************************************/

extern XrdSysError    XrdLog;

extern XrdScheduler   XrdSched;

extern XrdOucTrace    XrdTrace;
  
/******************************************************************************/
/*                             n e w P o l l e r                              */
/******************************************************************************/
  
XrdPoll *XrdPoll::newPoller(int pollid, int maxfd)
{
   int pfd, bytes, alignment, pagsz = getpagesize();
   struct pollfd *pp;

// Open the /dev/poll driver
//
   if ((pfd = open("/dev/poll", O_RDWR)) < 0)
      {XrdLog.Emsg("Poll", errno, "open /dev/poll"); return 0;}
   fcntl(pfd, F_SETFD, FD_CLOEXEC);

// Calculate the size of the poll table and allocate it
//
   bytes     = maxfd * sizeof(struct pollfd);
   alignment = (bytes < pagsz ? 1024 : pagsz);
   if (!(pp = (struct pollfd *)memalign(alignment, bytes)))
      {XrdLog.Emsg("Poll", ENOMEM, "create poll table");
       close(pfd);
       return 0;
      }

// Create new poll object
//
   memset((void *)pp, 0, bytes);
   return (XrdPoll *)new XrdPollDev(pp, maxfd, pfd);
}
 
/******************************************************************************/
/*                            D e s t r u c t o r                             */
/******************************************************************************/
  
XrdPollDev::~XrdPollDev()
{
   if (PollTab) free(PollTab);
   if (PollDfd >= 0) close(PollDfd);
}
  
/******************************************************************************/
/*                               D i s a b l e                                */
/******************************************************************************/

void XrdPollDev::Disable(XrdLink *lp, const char *etxt)
{
   XrdSysSemaphore mySem(0);
   PipeData cmdbuff[2];
   int myerrno = 0;

// Simply return if the link is already disabled
//
   if (!lp->isEnabled) return;

// Trace this event
//
   TRACEI(POLL, "Poller " <<PID <<" async disabling link " <<lp->FD);

// Send a disable request to the poller thread handling this link. We need to
// wait until the operation is actually completed before returning.
//
   cmdbuff[0].req          = PipeData::DiFD;
   cmdbuff[0].Parms.Arg.fd = lp->FD;
   cmdbuff[1].req          = PipeData::Post;
   cmdbuff[1].Parms.theSem = &mySem;
   myerrno = sendCmd((char *)&cmdbuff, sizeof(cmdbuff));

// Verify that all went well and if termination wanted, terminate the link
// Warning! The link's opMutex must be held if termination is requested!
//
   if (myerrno) XrdLog.Emsg("Poll", myerrno, "disable link", lp->ID);
      else {mySem.Wait();
            if (etxt && Finish(lp, etxt)) XrdSched.Schedule((XrdJob *)lp);
           }
}

/******************************************************************************/
/*                                E n a b l e                                 */
/******************************************************************************/

int XrdPollDev::Enable(XrdLink *lp)
{
   PipeData cmdbuff;
   int nogo;

// Simply return if the link is already enabled
//
   if (lp->isEnabled) return 1;

// Send an enable request to the poller thread handling this link
//
   cmdbuff.req           = PipeData::EnFD;
   cmdbuff.Parms.Arg.fd  = lp->FD;
   nogo = sendCmd((char *)&cmdbuff, sizeof(cmdbuff));

// Verify that all went well
//
   if (nogo) XrdLog.Emsg("Poll", nogo, "enable link", lp->ID);
   return !nogo;
}

/******************************************************************************/
/*                               E x c l u d e                                */
/******************************************************************************/
  
void XrdPollDev::Exclude(XrdLink *lp)
{

// Make sure this link is not enabled
//
   if (lp->isEnabled) 
      {XrdLog.Emsg("Poll", "Detach of enabled link", lp->ID);
       Disable(lp);
      }
}

/******************************************************************************/
/*                               s e n d C m d                                */
/******************************************************************************/
  
int XrdPollDev::sendCmd(char *cmdbuff, int cmdblen)
{
   int wlen, myerrno = 0;

   PollPipe.Lock();
   do {if ((wlen = write(CmdFD, cmdbuff, cmdblen)) < 0)
          if (errno == EINTR) wlen = 0;
             else {myerrno = errno; break;}
       cmdbuff += wlen; cmdblen -= wlen;
      } while(cmdblen > 0);
   PollPipe.UnLock();

   return myerrno;
}

/******************************************************************************/
/*                                 S t a r t                                  */
/******************************************************************************/
  
void XrdPollDev::Start(XrdSysSemaphore *syncsem, int &retcode)
{
   int i, xReq, numpolled, num2sched, AOK = 0;
   XrdJob *jfirst, *jlast;
   const short pollOK = POLLIN | POLLRDNORM;
   struct dvpoll dopoll = {PollTab, PollMax, -1};
   XrdLink *lp;

// If we have a com pipe, add it to our set
//
   {struct pollfd ptab = {ReqFD, POLLIN | POLLRDNORM, 0};
    if (PollDfd < 0) XrdLog.Emsg("Poll", "poll pipe not allocated");
       else if (write(PollDfd,&ptab,sizeof(struct pollfd))!=sizeof(struct pollfd))
                XrdLog.Emsg("Poll", errno, "add pipe to poll set");
                else AOK = 1;
   }

// Indicate to the starting thread that all went well
//
   retcode = (AOK ? 0 : -1);
   syncsem->Post();
   if (!AOK) return;

// Now start dispatching links that are ready
//
   do {do {numpolled = ioctl(PollDfd, DP_POLL, &dopoll);}
          while (numpolled < 0 && errno == EINTR);
       if (numpolled == 0) continue;
       if (numpolled <  0)
          {XrdLog.Emsg("Poll", errno, "poll for events");
           abort();
          }
       numEvents += numpolled;

       // Checkout which links must be dispatched (no need to lock)
       //
       jfirst = jlast = 0; num2sched = 0; xReq = 0;
       for (i = 0; i < numpolled; i++)
           {if (PollTab[i].fd == ReqFD) {xReq = 1; continue;}
            if (lp = XrdLink::fd2link(PollTab[i].fd))
               if (!(lp->isEnabled))
                  XrdLog.Emsg("Poll", "Disabled event occured for", lp->ID);
                  else {lp->isEnabled = 0;
                        if (!(PollTab[i].revents & pollOK))
                           Finish(lp, Poll2Text(PollTab[i].revents));
                        lp->NextJob = jfirst; jfirst = (XrdJob *)lp;
                        if (!jlast) jlast=(XrdJob *)lp;
                        num2sched++;
                       } else LogEvent(&PollTab[i]);
            PollTab[i].events  = POLLREMOVE;
            PollTab[i].revents = 0;
           }

       // Disable all of the polled fd's
       //
       if (write(PollDfd, PollTab, numpolled*sizeof(struct pollfd))
                != static_cast<ssize_t>(numpolled*sizeof(struct pollfd)))
          XrdLog.Emsg("Poll", errno, "remove an fd from /dev/poll");

       // Schedule the polled links
       //
       if (num2sched == 1) XrdSched.Schedule(jfirst);
          else if (num2sched) XrdSched.Schedule(num2sched, jfirst, jlast);

       // Handle the queued pipe last
       //
       if (xReq) doRequests(numpolled);
      } while(1);
}

/******************************************************************************/
/*                       P r i v a t e   M e t h o d s                        */
/******************************************************************************/
/******************************************************************************/
/*                            d o R e q u e s t s                             */
/******************************************************************************/

void XrdPollDev::doRequests(int maxreq)
{
   struct pollfd ptab = {0, 0, 0};
   XrdLink *lp;
   const char *act;
   char buff[16], edval;
   int num2do;

// To keep ourselves from being swamped, base request read-aheads on the number
// of pending poll events.
//
   num2do = (maxreq < 3 ? 3 : maxreq);

// Now process all poll table manipulation requests
//
   while(num2do-- && getRequest())
        {
              if (ReqBuff.req == PipeData::Post)
                 {ReqBuff.Parms.theSem->Post();
                  continue;
                 }
              if (!(lp = XrdLink::fd2link(ReqBuff.Parms.Arg.fd)))
                 {sprintf(buff, "%d", ReqBuff.Parms.Arg.fd);
                  XrdLog.Emsg("Poll", "FD", buff, "does not map to a link");
                  ptab.events = POLLREMOVE; act = " remove fd ";
                 }
         else if (ReqBuff.req == PipeData::EnFD)
                 {ptab.events = POLLIN | POLLRDNORM; 
                  act = " enable fd ";  edval = 0x01; numEnabled++;
                 }
         else if (ReqBuff.req == PipeData::DiFD)
                 {ptab.events = POLLREMOVE; 
                  num2do++;
                  act = " disable fd "; edval = 0x00;
                 }
         else    {XrdLog.Emsg("Poll", "Received an invalid poll pipe request");
                  continue;
                 }
         ptab.fd = ReqBuff.Parms.Arg.fd;
         TRACE(POLL, "Poller " <<PID <<act <<ReqBuff.Parms.Arg.fd);
         if (write(PollDfd, &ptab, sizeof(struct pollfd)) != sizeof(struct pollfd))
            XrdLog.Emsg("Poll", errno, act);
         if (lp) lp->isEnabled = edval;
        }
}
  
/******************************************************************************/
/*                              L o g u v e n t                               */
/******************************************************************************/
  
void XrdPollDev::LogEvent(struct pollfd *pp)
{
   char buff[32];
   sprintf(buff,"%.4x fd=%d",pp->revents, pp->fd);
   XrdLog.Emsg("Poll", "Received unexpected event", buff);
}
