<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Automatic HTML Documentation</title>
<para><emphasis role="bold"><code>THtml</code></emphasis> is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.</para>

<sect1>
<title>Reference Guide</title>
<para>The Reference Guide for the ROOT classes at  <uri xmlns:xlink="http://root.cern.ch/root/html/">http://root.cern.ch/root/html/</uri> has been generated by ROOT's <emphasis role="bold"><code>THtml</code></emphasis> class. Just as for ROOT's classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <code>&lt;pre&gt;&lt;/pre&gt;</code> environment to keep the indentation and line length. You can write "raw" HTML by enclosing comments in the keywords <code>Begin_Html</code> and <code>End_Html</code>. </para>
<para>To generate documentation for the class <emphasis role="bold"><code>TObject</code></emphasis> you could run the following commands:</para>

<programlisting language="c++">
root[] THtml h
root[] h.SetInputDir("$(ROOTSYS)");
root[] h.MakeClass("TObject");
root[] h.CreateJavascript();
root[] h.CreateStylesheet();
</programlisting>

<para>The comments following the first comment of the form //____________________, before any method, is assumed to be the <emphasis role="bold">class description</emphasis>. As with any other documentation part, it has to be a continuous block of comments.</para>
<para>Any documented class will have an <emphasis role="bold">class index entry</emphasis> in the <code>ClassIndex.html</code>, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class <code>MyClass</code> has to be given in <code>MyClass’s</code> header file as documentation.</para>
<para>A <emphasis role="bold">method description</emphasis> block starts immediately after '<code>{</code>' and looks like this:</para>

<programlisting language="c++">
void TWorld::HelloWorldFunc(string *text)
{
// This is a documentation example of the function <code>TWorld::HelloWorldFunc</code>
helloWorld.Print(text);
}
</programlisting>

<para>Like in a class description block, everything until the first non-commented line is considered as a valid member function description block.</para>
<para><emphasis role="bold">Data members</emphasis> are documented by putting a C++ comment behind their declaration in the header file, e.g.</para>

<programlisting language="c++">
Int_t fIAmADataMember; // this is a data member
</programlisting>

<para>When documenting a class, <emphasis role="bold"><code>THtml</code></emphasis> creates both a "beautified" version of the source file and a web page containing the class documentation. The documentation also shows the <emphasis role="bold">author</emphasis> and a <emphasis role="bold">copyright statement</emphasis>. This information is extracted from the source file. The author can be in the format</para>

<programlisting language="c++">
// Author: Enrico Fermi
</programlisting>

<para>for people that have an entry in CERN's XWho database, and for those who have not:</para>

<programlisting language="c++">
// Author: Enrico Fermi &lt;mailto:enrico@fnal.gov&gt;
</programlisting>

<para>The copyright statement is introduced by the string "<code>* Copyright</code>" inside a comment. </para>
<para>You should read the class reference page at  <uri xmlns:xlink="http://root.cern.ch/root/html/THtml.html">http://root.cern.ch/root/html/THtml.html</uri> to learn about all of <emphasis role="bold"><code>THtml</code></emphasis>’s features.</para>

<sect2>
<title>Product and Module Documentation</title>
<para>For <emphasis role="bold"><code>THtml</code></emphasis>, a product like ROOT is a combination of several modules. It can include user-provided document for both products and modules. The name of the product can be set by calling <emphasis role="bold"><code>THtml</code></emphasis><code>::SetProductName()</code>. By default, the documentation is searched for in the <code>doc/</code> subdirectory of the source tree, and in the <code>../doc </code>directory, relative to the directory of first source file of a module. This can be set by calls to <emphasis role="bold"><code>THtml</code></emphasis><code>::SetProductDocDir()</code> and <emphasis role="bold"><code>THtml</code></emphasis><code>::SetModuleDocPath()</code>.</para>
<para>The documentation is generated as an index page with links to further files. This index page includes the file <code>index.txt</code> converted to HTML (via <emphasis role="bold"><code>THtml</code></emphasis><code>::Convert()</code>) or the file index.html (without conversion to HTML, of course), if any of these files exist. The index page will also contain a list of links to all files in the directory that end on <code>.html</code> or <code>.txt</code>. Files ending on <code>.txt</code> will be converted to HTML before they are copied to the output directory. For each file, the link's text will be the file name without extension, with underscores replaced by spaces.</para>
<para>You can see an example of the module documentation including links, the corresponding <code>index.html</code>, and the module class index at  <uri xmlns:xlink="http://root.cern.ch/root/html/HIST_Index.html">http://root.cern.ch/root/html/HIST_Index.html</uri>.</para>
</sect2>
</sect1>

<sect1>
<title>Converting Sources (and Other Files) to HTML</title>
<para><emphasis role="bold"><code>THtml</code></emphasis> can take a file (C++ or text) and convert it to HTML. There are two main use cases:</para>
<para>The output of a <emphasis role="bold">macro</emphasis> converted to HTML will almost look like the beautified source file of a class reference. The <code>Begin_Html/End_Html</code> keywords are supported; comments, strings, and keywords are colored like in <emphasis role="bold"><code>THtml</code></emphasis>'s output for source code. </para>
<para>The macro <code>Event.cxx</code> in <code>$ROOTSYS/test</code> can be seen as an example of documented ROOT macros at  <uri xmlns:xlink="http://root.cern.ch/root/html/examples/Event.cxx.html">http://root.cern.ch/root/html/examples/Event.cxx.html</uri></para>
<para><emphasis role="bold"><code>THtml</code></emphasis><code>::Convert()</code>converts a single text file to HTML. For example, it can be run on a change log. Each known class name will be linked to its documentation page. An example is ROOT’s change log at  <uri xmlns:xlink="http://root.cern.ch/root/html/examples/V5.16.txt.html">http://root.cern.ch/root/html/examples/V5.16.txt.html</uri></para>
<para>To convert the source file MyCode.C to HTML, you can run</para>

<programlisting language="c++">
root[] THtml h
root[] h.Convert("MyCode.C", "Look At My Code", "htmlout/");
</programlisting>

<para>This will create the file <code>htmlout/MyCode.C.html</code>. The HTML page will have the title "Look At My Code".</para>
</sect1>

<sect1>
<title>Special Documentation Elements: Directives</title>
<para>A common documentation problem is the inclusion of images. They are usually generated externally, which poses problems with where to keep the images, and how to keep them up to date. <emphasis role="bold"><code>THtml</code></emphasis> solves this by offering a few special documentation elements: macro and latex directives.</para>

<sect2>
<title>Latex Directive</title>
<para>Documentation surrounded by the keywords <code>BEGIN_LATEX / END_LATEX</code> will be passed to ROOT Latex engine <emphasis role="bold"><code>TLatex</code></emphasis>. The keywords can be written with small or capital letters (case insensitive). The output will be stored to an image file, which gets automatically included in the documentation.</para>
<para>
<code>// This function calculates BEGIN_LATEX </code></para>
<para>
<code>//   F(x_{#frac{1}{2}}) = #prod(x &lt; x_{#frac{1}{2}}) = #frac{1}{2}</code></para>
<para>
<code>// END_LATEX</code></para>
<para>THtml will inject the following picture:</para>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/0300022D.png" width="90pt" depth="29.15pt"/></imageobject></inlinemediaobject> </para>
<para>The image file name is generated from the formula and will be unique for all the documentation. It is stored along-side the documentation, and it will be automatically regenerated when the documentation is updated. The handling of the Latex directive is done by the class <emphasis role="bold"><code>TDocLatexDirective</code></emphasis>.</para>
<para>The <code>BEGIN_LATEX</code> keyword can take the following parameters:</para>
<itemizedlist>
<listitem><para><code>fontsize</code>: sets the <emphasis role="bold"><code>TLatex</code></emphasis> font size. The default value is 16.</para></listitem>
<listitem><para><code>separator</code>: sets a list of characters for which a new column will be started. This allows aligned, multi-line, multi-column layout, which can be useful for e.g. mathematical derivations. It is unset by default, meaning the Latex directive will only generate one column.</para></listitem>
<listitem><para><code>rseparator</code>: like separator, but a regular expression. Columns start with a match of this regular expression. Only one of separator or rseparator can be given.</para></listitem>
<listitem><para><code>align</code>: defines the alignment of the columns. Note that the column delimiter counts as a column itself!</para></listitem>
</itemizedlist>
<para>Example invocation, where the font size is set to 10, new columns are started by the characters '<code>=</code>' and '<code>,</code>', and the two columns are left aligned with the separator column centered:</para>
<para>
<code>Begin_Latex(fontsize=10, separator='=,', align=lcl)</code></para>
</sect2>

<sect2>
<title>Macro Directive</title>
<para>A more general approach is offered by the Macro directive, enclosed in the keywords <code>BEGIN_MACRO /</code> <code>END_MACRO</code>. The keywords can be written with small or capital letters (case insensitive). If the text enclosed by these keywords contains the character '<code>{</code>' the text is assumed to be source code. Otherwise it is assumed to be a file name relative to the current file's path, and taking into account the paths specified by <emphasis role="bold"><code>THtml</code></emphasis><code>::AddMacroPath()</code>. The macro file or the C++ source is executed when generating the documentation. It is expected to return a <emphasis role="bold"><code>TObject*</code></emphasis>, which will be saved to a GIF file, by calling the virtual function <emphasis role="bold"><code>TObject</code></emphasis><code>::SaveAs()</code>. </para>
<para>The <code>BEGIN_MACRO</code> keyword can take the following parameters:</para>
<itemizedlist>
<listitem><para><code>GUI</code>: will end batch mode. This is needed e.g. for creating screen shots of GUI elements, where the call to <emphasis role="bold"><code>TObject</code></emphasis><code>::SaveAs()</code> will invoke <emphasis role="bold"><code>TGObject</code></emphasis><code>::SaveAs()</code> which needs the graphics system to be initialized.</para></listitem>
<listitem><para><code>source</code>: requests the source of the macro to be shown in a second tab on the HTML page. This is useful e.g. for example macros, showing how the image was generated. Lines that should be executed but not shown in the source tab can be hidden by ending them with <code>*HIDE*</code> (most probably as a comment). Lines may be hidden because they are not needed for the understanding of the macro or because they only make sense in the context of the documentation, like the statement returning the <emphasis role="bold"><code>TObject*</code></emphasis>.</para></listitem>
</itemizedlist>
<para>Example invocation, with enabled ROOT graphics system and a source tab: </para>
<para>
<code>Begin_Macro(gui, source)</code></para>
</sect2>
</sect1>

<sect1>
<title>Customizing HTML</title>
<para><emphasis role="bold"><code>THtml</code></emphasis> allows a vast amount of customizations, from a custom style to custom links, to customized java scripts. By default, the style sheet is taken from <code>$ROOTSYS/etc/html/ROOT.css</code> when the documentation is generated. The path for <code>ROOT.css</code> can be changed by calling <emphasis role="bold"><code>THtml</code></emphasis><code>::SetEtcDir()</code>; it should contain the same CSS classes and entity IDs as the original <code>ROOT.css</code>. This style sheet is an easy means of customizing the layout and appearance of the documentation pages. Many of <emphasis role="bold"><code>THtml</code></emphasis> setting can be customized by calls to <emphasis role="bold"><code>THtml</code></emphasis> member functions or by settings in .rootrc, as documented in the <emphasis role="bold"><code>THtml</code></emphasis> class reference page  <uri xmlns:xlink="http://root.cern.ch/root/html/THtml">http://root.cern.ch/root/html/THtml</uri>. The following will enumerate some of the highlights.</para>

<sect2>
<title>Referencing Documentation for other Libraries</title>
<para>When <emphasis role="bold"><code>THtml</code></emphasis> generates documentation for classes it recognizes all class names known to ROOT. If <emphasis role="bold"><code>THtml</code></emphasis> does not have sources for a class it determines the class's library name. This has to be set by means of <code>rootmap</code> files, see Library Autoloading of this User's Guide. Given the library name, <emphasis role="bold"><code>THtml</code></emphasis> searches for an entry in its map of libraries to documentation URLs. If it finds it, it will create a link to the documentation at that URL for all occurrences of a given class name. One can set the URL <code>../mylib/</code> for a library name  <code>MyLib</code>         by setting <code>Root.Html.MyLib:</code> <code>../mylib/</code> or by calling <emphasis role="bold"><code>THtml</code></emphasis><code>::SetLibURL("MyLib", "../mylib/")</code>. Occurrences of class <code>MyClass</code> of <code>MyLib</code> will now be referenced as <code>../mylib/MyClass.html</code>.</para>
</sect2>

<sect2>
<title>Search Engine</title>
<para><emphasis role="bold"><code>THtml</code></emphasis> can invoke external search engines. The ROOT reference guide sets <code>Root.Html.Search</code> to        <uri xmlns:xlink="http://www.google.com/search?q=%25s+site%3A%25u">http://www.google.com/search?q=%s+site%3A%u</uri>. Calling <emphasis role="bold"><code>THtml</code></emphasis><code>::SetSearchStemURL()</code> will set the same. If this URL stem is set, <emphasis role="bold"><code>THtml</code></emphasis> will create search fields in the index pages. It will send the words entered in these search fields as %s in the URL; %u will be replaced by the current document's path, allowing a site- and directory-specific search.</para>
</sect2>

<sect2>
<title>ViewCVS</title>
<para>Most code is managed in a version control system like CVS. ViewCVS is a WWW reader interface to the versioning control system that allows e.g. tracking a file's changes. <emphasis role="bold"><code>THtml</code></emphasis> will reference these pages automatically if the <code>.rootrc</code> variable <code>Root.Html.ViewCVS</code> is set to the URL stem of the ViewCVS. installation. Alternatively, one can call THtml::SetViewCVS().</para>
</sect2>

<sect2>
<title>Wiki Pages</title>
<para>In some contexts it might be desirable to let users comment on classes, e.g. for suggestions of use or alternatives, details of behavior, and cross references to other relevant classes. A successful example of this is the PHP.net documentation with its user annotations. <emphasis role="bold"><code>THtml</code></emphasis> can include a link to a class's Wiki page by setting the Wiki base URL via <code>Root.Html.WikiURL</code>  or <emphasis role="bold"><code>THtml</code></emphasis><code>::SetWikiURL()</code>.</para>
</sect2>
</sect1>

<sect1>
<title>Tutorial</title>
<para>You can run the tutorial <code>htmlex.C</code> to see how <emphasis role="bold"><code>THtml</code></emphasis> converts a script to HTML and how it creates the corresponding class reference:</para>

<programlisting language="c++">
root[] .x $(ROOTSYS)/tutorials/htmlex.C+
</programlisting>

<para>Have a look at the HTML version of the macro in <code>htmldoc/htmlex.C.html </code>(which should be the same as the one at  <uri xmlns:xlink="http://root.cern.ch/root/html/examples/htmlex.C.html">http://root.cern.ch/root/html/examples/htmlex.C.html</uri>). </para>
<para>It demonstrates how to generate documentation for your classes and for ROOT classes and how to "beautify" a macro.</para>
</sect1>
</chapter>



