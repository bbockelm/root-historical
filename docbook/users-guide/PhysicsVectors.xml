<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Physics Vectors</title>
<para>The physics vector classes describe vectors in three and four dimensions and their rotation algorithms. The classes were ported to root from CLHEP see: </para>
<para>
<uri xmlns:xlink="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/UserGuide/Vector/vector.html">http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/UserGuide/Vector/vector.html</uri>
</para>

<sect1>
<title>The Physics Vector Classes</title>
<para>In order to use the physics vector classes you will have to load the Physics library:</para>

<programlisting language="c++">
gSystem.Load("libPhysics.so");
</programlisting>

<para>There are four classes in this package. They are:</para>
<para><emphasis role="bold"><code>TVector3</code></emphasis> is a general three-vector. A <emphasis role="bold"><code>TVector3</code></emphasis> may be expressed in Cartesian, polar, or cylindrical coordinates. Methods include dot and cross products, unit vectors and magnitudes, angles between vectors, and rotations and boosts. There are also functions of particular use to HEP, like pseudo-rapidity, projections, and transverse part of a <emphasis role="bold"><code>TVector3</code></emphasis>, and kinetic methods on 4-vectors such as Invariant Mass of pairs or containers of particles<code>.</code></para>
<para><emphasis role="bold"><code>TLorentzVector </code></emphasis>is a general four-vector class, which can be used either for the description of position and time (<code>x</code>, <code>y</code>, <code>z</code>, <code>t</code>) or momentum and energy (<code>px</code>, <code>py</code>, <code>pz</code>, <code>E</code>). <emphasis role="bold"><code>TRotation</code></emphasis> is a class describing a rotation of a <emphasis role="bold"><code>TVector3</code></emphasis> object. <emphasis role="bold"><code>TLorentzRotation</code></emphasis> is a class to describe the Lorentz transformations including Lorentz boosts and rotations. In addition, a <emphasis role="bold"><code>TVector2</code></emphasis> is a basic implementation of a vector in two dimensions and is not part of the CLHEP translation. </para>
</sect1>

<sect1>
<title>TVector3</title>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/030001A9.png" width="163.15pt" depth="147.85pt"/></imageobject></inlinemediaobject><emphasis role="bold"><code>TVector3</code></emphasis>         is a general three-vector class, which can be used for description of different vectors in 3D. Components of three vectors: </para>
<para><code>x</code>, <code>y</code>, <code>z</code> - basic components </para>
<para> = azimuth angle </para>
<para> = polar angle </para>
<para><code>magnitude</code> = <code>mag</code> = <code>sqrt</code>(<code>x</code>2 + <code>y</code>2 + <code>z</code>2)</para>
<para><code>transverse component</code> = <code>perp</code> = <code>sqrt</code>(<code>x</code>2 + <code>y</code>2)</para>
<para>Using the <emphasis role="bold"><code>TVector3</code></emphasis> class, you should remember that it contains only common features of three vectors and lacks methods specific for some particular vector values. For example, it has no translated function because translation has no meaning for vectors. </para>

<sect2>
<title>Declaration / Access to the Components</title>
<para><emphasis role="bold"><code>TVector3</code></emphasis> has been implemented as a vector of three <code>Double_t</code> variables, representing the Cartesian coordinates. By default the values are initialized to zero, however you can change them in the constructor: </para>

<programlisting language="c++">
TVector3 v1;        // v1 = (0,0,0)
TVector3 v2(1);     // v2 = (1,0,0)
TVector3 v3(1,2,3); // v3 = (1,2,3)
TVector3 v4(v2);    // v4 = v2
</programlisting>

<para>It is also possible (but not recommended) to initialize a <emphasis role="bold"><code>TVector3</code></emphasis> with a <code>Double</code><code>_t</code> or <code>Float_t C</code> array. You can get the components by name or by index: </para>

<programlisting language="c++">
xx = v1.X();    or    xx = v1(0);
yy = v1.Y();          yy = v1(1);
zz = v1.Z();          zz = v1(2);
</programlisting>

<para> The methods <code>SetX()</code>, <code>SetY()</code>, <code>SetZ()</code> and <code>SetXYZ()</code> allow you to set the components: </para>

<programlisting language="c++">
v1.SetX(1.); v1.SetY(2.); v1.SetZ(3.);
v1.SetXYZ(1.,2.,3.);
</programlisting>

<para/>
</sect2>

<sect2>
<title>Other Coordinates</title>
<para>To get information on the <emphasis role="bold"><code>TVector3</code></emphasis> in spherical (<code>rho</code>, <code>phi</code>, <code>theta</code>) or cylindrical (<code>z</code>, <code>r</code>, <code>theta</code>) coordinates, the following methods can be used.</para>

<programlisting language="c++">
Double_t m  = v.Mag();
<emphasis role="italic"><code>// get magnitude (=rho=Sqrt(x*x+y*y+z*z))) </code></emphasis>
Double_t m2 = v.Mag2();    // get magnitude squared
Double_t t  = v.Theta();   // get polar angle
Double_t ct = v.CosTheta();// get cos of theta
Double_t p  = v.Phi();     // get azimuth angle
Double_t pp = v.Perp();    // get transverse component
Double_t pp2= v.Perp2();   // get transverse squared
</programlisting>

<para>It is also possible to get the transverse component with respect to another vector: </para>

<programlisting language="c++">
Double_t ppv1  = v.Perp(v1);
Double_t pp2v1 = v.Perp2(v1);
</programlisting>

<para>The pseudo-rapidity <code>(eta = -ln (tan (</code><code>theta</code><code>/2)))</code> can be obtained by <code>Eta()</code> or <code>PseudoRapidity()</code>: </para>

<programlisting language="c++">
Double_t eta = v.PseudoRapidity();
</programlisting>

<para>These setters change one of the non-Cartesian coordinates: </para>

<programlisting language="c++">
v.SetTheta(.5);  <code>// keeping rho and phi</code>
v.SetPhi(.8);    <code>// keeping rho and theta</code>
v.SetMag(10.);   <code>// keeping theta and phi</code>
v.SetPerp(3.);   <code>// keeping z and phi</code>
</programlisting>

</sect2>

<sect2>
<title>Arithmetic / Comparison</title>
<para>The <emphasis role="bold"><code>TVector3</code></emphasis> class has operators to add, subtract, scale and compare vectors: </para>

<programlisting language="c++">
v3  = -v1;
v1  = v2+v3;
v1 += v3;
v1  = v1 - v3;
v1 -= v3;
v1 *= 10;
v1  = 5*v2;
if(v1 == v2) {...}
if(v1 != v2) {...}
</programlisting>

</sect2>

<sect2>
<title>Related Vectors</title>

<programlisting language="c++">
v2 = v1.Unit();        <code>// get unit vector parallel to v1</code>
v2 = v1.Orthogonal();  <code>// get vector orthogonal to v1</code>
</programlisting>

</sect2>

<sect2>
<title>Scalar and Vector Products</title>

<programlisting language="c++">
s = v1.Dot(v2);<code>// scalar product</code>
s = v1 * v2;<code>// scalar product</code>
v = v1.Cross(v2);<code>// vector product</code>
</programlisting>

</sect2>

<sect2>
<title>Angle between Two Vectors</title>

<programlisting language="c++">
Double_t a = v1.Angle(v2);
</programlisting>

</sect2>

<sect2>
<title>Rotation around Axes</title>

<programlisting language="c++">
v.RotateX(.5);
v.RotateY(TMath::Pi());
v.RotateZ(angle);
</programlisting>

</sect2>

<sect2>
<title>Rotation around a Vector</title>

<programlisting language="c++">
v1.Rotate(TMath::Pi()/4, v2); <code>// rotation around v2</code>
</programlisting>

<para/>
</sect2>

<sect2>
<title>Rotation by TRotation Class</title>
<para><emphasis role="bold"><code>TVector3</code></emphasis> objects can be rotated by <emphasis role="bold"><code>TRotation</code></emphasis> objects using the <code>Transform()</code> method, the <code>operator </code><code>*=, </code>or the <code>operator </code><code>*</code> of the <emphasis role="bold"><code>TRotation</code></emphasis> class. See the later section on <emphasis role="bold"><code>TRotation</code></emphasis><code>.</code></para>

<programlisting language="c++">
TRotation m;
...
v1.Transform(m);
v1 = m*v1;
v1 *= m;                          <code>// v1 = m*v1</code>
</programlisting>

</sect2>

<sect2>
<title>Transformation from Rotated Frame</title>
<para>This code transforms v1 from the rotated frame (z' parallel to direction, x' in the theta plane and y' in the <code>xy</code> plane as well as perpendicular to the theta plane) to the (x, y, z) frame.</para>

<programlisting language="c++">
TVector3 direction = v.Unit()
v1.RotateUz(direction);      <code>// direction must be TVector3 of unit length </code>
</programlisting>

</sect2>
</sect1>

<sect1>
<title>TRotation</title>
<para>The <emphasis role="bold"><code>TRotation</code></emphasis> class describes a rotation of <emphasis role="bold"><code>TVector3</code></emphasis> object. It is a 3 * 3 matrix of <code>Double_t</code>: </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AA.png" width="54pt" depth="46.55pt"/></imageobject></inlinemediaobject>

</para>
<para>It describes a so-called active rotation, i.e. a rotation of objects inside a static system of coordinates. In case you want to rotate the frame and want to know the coordinates of objects in the rotated system, you should apply the inverse rotation to the objects. If you want to transform coordinates from the rotated frame to the original frame you have to apply the direct transformation. A rotation around a specified axis means counterclockwise rotation around the positive direction of the axis. Â  </para>

<sect2>
<title>Declaration, Access, Comparisons</title>

<programlisting language="c++">
TRotation r;        <code>// r initialized as identity</code>
TRotation m(r); <code>// m = r</code>
</programlisting>

<para>There is no direct way to set the matrix elements - to ensure that a <emphasis role="bold"><code>TRotation</code></emphasis> always describes a real rotation. But you can get the values by with the methods <code>XX()..ZZ()</code> or the <code>(,)</code> operator: </para>

<programlisting language="c++">
Double_t xx = r.XX();<code>// the same as xx=r(0,0)</code>
xx = r(0,0);
if (r==m) {...}<code>// test for equality</code>
if (r!=m) {..}<code>// test for inequality</code>
if (r.IsIdentity()) {...}       <code>// test for identity</code>
</programlisting>

</sect2>

<sect2>
<title>Rotation around Axes</title>
<para>The following matrices describe counter-clockwise rotations around the coordinate axes and are implemented in: <code>RotateX()</code>,<code> RotateY()</code> and <code>RotateZ()</code>: </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AB.png" width="117.95pt" depth="46.55pt"/></imageobject></inlinemediaobject>

<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AC.png" width="119.15pt" depth="47.15pt"/></imageobject></inlinemediaobject>

<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AD.png" width="117.95pt" depth="47.15pt"/></imageobject></inlinemediaobject>

</para>
<para>
</para>

<programlisting language="c++">
<code>r.RotateX</code><code>(TMath::Pi()); </code><emphasis role="italic">// rotation around the x-axis</emphasis>
</programlisting>

</sect2>

<sect2>
<title>Rotation around Arbitrary Axis</title>
<para>The <code>Rotate(</code><code>)</code> method allows you to rotate around an arbitrary vector (not necessary a unit one) and returns the result.</para>

<programlisting language="c++">
r.Rotate(TMath::Pi()/3,TVector3(3,4,5));
</programlisting>

<para>It is possible to find a unit vector and an angle, which describe the same rotation as the current one:</para>
<para/>

<programlisting language="c++">
Double_t angle;
TVector3 axis;
r.GetAngleAxis(angle,axis);
</programlisting>

</sect2>

<sect2>
<title>Rotation of Local Axes</title>
<para>The <code>RotateAxes()method</code> adds a rotation of local axes to the current rotation and returns the result: </para>

<programlisting language="c++">
TVector3 newX(0,1,0);
TVector3 newY(0,0,1);
TVector3 newZ(1,0,0);
a.RotateAxes(newX,newX,newZ);
</programlisting>

<para>Methods <code>ThetaX()</code>, <code>ThetaY()</code>, <code>ThetaZ()</code>, <code>PhiX()</code>, <code>PhiY()</code>, <code>PhiZ()</code> return azimuth and polar angles of the rotated axes: </para>

<programlisting language="c++">
Double_t tx,ty,tz,px,py,pz;
tx= a.ThetaX();
...
pz= a.PhiZ();
</programlisting>

</sect2>

<sect2>
<title>Inverse Rotation</title>

<programlisting language="c++">
TRotation a,b;
...
b = a.Inverse();<code>// b is inverse of a, a is unchanged</code>
b = a.Invert();<code>// invert a and set b = a</code>
</programlisting>

</sect2>

<sect2>
<title>Compound Rotations</title>
<para>The <code>operator *</code> has been implemented in a way that follows the mathematical notation of a product of the two matrices which describe the two consecutive rotations. Therefore, the second rotation should be placed first: </para>

<programlisting language="c++">
r = r2 * r1;
</programlisting>

</sect2>

<sect2>
<title>Rotation of TVector3</title>
<para>The <emphasis role="bold"><code>TRotation</code></emphasis> class provides an <code>operator *</code> which allows expressing a rotation of a <emphasis role="bold"><code>TVector3</code></emphasis> analog to the mathematical notation: </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AE.png" width="91.25pt" depth="47.15pt"/></imageobject></inlinemediaobject>
</para>

<programlisting language="c++">
TRotation r;
TVector3 v(1,1,1);
v = r * v;
</programlisting>

<para>You can also use the <code>Transform()</code> method or the <code>operator *=</code> of the <emphasis role="bold"><code>TVector3</code></emphasis> class: </para>

<programlisting language="c++">
TVector3 v;
TRotation r;
v.Transform(r);
</programlisting>

</sect2>
</sect1>

<sect1>
<title>TLorentzVector</title>
<para><emphasis role="bold"><code>TLorentzVector</code></emphasis> is a general four-vector class, which can be used either for the description of position and time (<code>x</code>, <code>y</code>, <code>z</code>, <code>t</code>) or momentum and energy (<code>px</code>, <code>py</code>, <code>pz</code>, <code>E</code>). </para>

<sect2>
<title>Declaration</title>
<para><emphasis role="bold"><code>TLorentzVector</code></emphasis> has been implemented as a set a <emphasis role="bold"><code>TVector3</code></emphasis> and a <code>Double_t</code> variable. By default, all components are initialized by zero. </para>

<programlisting language="c++">
TLorentzVector v1;  <code>// initialized by (0.,0.,0.,0.)</code>
TLorentzVector v2(1.,1.,1.,1.);
TLorentzVector v3(v1);
TLorentzVector v4(TVector3(1.,2.,3.),4.);
</programlisting>

<para>For backward compatibility there are two constructors from a <code>Double_t</code> and <code>Float_t</code> array.</para>
</sect2>

<sect2>
<title>Access to Components</title>
<para>There are two sets of access functions to the components of a <emphasis role="bold"><code>T</code></emphasis><emphasis role="bold"><code>LorentzVector</code></emphasis>: <code>X()</code>, <code>Y()</code>, <code>Z()</code>, <code>T()</code> and <code>Px()</code>, <code>Py()</code>, <code>Pz()</code> and <code>E()</code>. Both sets return the same values but the first set is more relevant for use where <emphasis role="bold"><code>TLorentzVector</code></emphasis> describes a combination of position and time and the second set is more relevant where <emphasis role="bold"><code>TLorentzVector</code></emphasis> describes momentum and energy: </para>

<programlisting language="c++">
Double_t xx =v.X();
...
Double_t tt = v.T();
Double_t px = v.Px();
...
Double_t ee = v.E();
</programlisting>

<para>The components of <emphasis role="bold"><code>TLorentzVector</code></emphasis> can also accessed by index:</para>

<programlisting language="c++">
xx = v(0);orxx = v[0];
yy = v(1);yy = v[1];
zz = v(2);zz = v[2];
tt = v(3);tt = v[3];
</programlisting>

<para>You can use the <code>Vect()</code> method to get the vector component of <emphasis role="bold"><code>TLorentzVector</code></emphasis>: </para>

<programlisting language="c++">
TVector3 p = v.Vect();
</programlisting>

<para>For setting components there are two methods: <code>SetX(),.., SetPx(),..:</code></para>

<programlisting language="c++">
v.SetX(1.); orv.SetPx(1.);
......
v.SetT(1.);v.SetE(1.);
</programlisting>

<para>To set more the one component by one call you can use the <code>SetVect()</code> function for the <emphasis role="bold"><code>TVector3</code></emphasis> part or <code>SetXYZT()</code>, <code>SetPxPyPzE()</code>. For convenience there is also a <code>SetXYZM()</code>: </para>

<programlisting language="c++">
v.SetVect(TVector3(1,2,3));
v.SetXYZT(x,y,z,t);
v.SetPxPyPzE(px,py,pz,e);
v.SetXYZM(x,y,z,m);Â Â  <code>// v = (x,y,z,e = Sqrt(x*x+y*y+z*z+m*m))</code>
</programlisting>

</sect2>

<sect2>
<title>Vector Components in Non-Cartesian Coordinates</title>
<para>There are a couple of methods to get and set the <emphasis role="bold"><code>TVector3</code></emphasis> part of the parameters in <code>spherical</code> coordinate systems: </para>

<programlisting language="c++">
Double_t m, theta, cost, phi, pp, pp2, ppv2, pp2v2;
m = v.Rho();
t = v.Theta();
cost = v.CosTheta();
phi  = v.Phi();
v.SetRho(10.);
v.SetTheta(TMath::Pi()*.3);
v.SetPhi(TMath::Pi());
</programlisting>

<para>or get information about the r-coordinate in cylindrical systems: </para>

<programlisting language="c++">
Double_t pp, pp2, ppv2, pp2v2;
pp   = v.Perp();   <code>// get transverse component</code>
pp2  = v.Perp2();   <code>// get transverse component squared</code>
ppv2 = v.Perp(v1);   <code>// get transverse component with</code> <code>respect to another vector</code>
pp2v2 = v.Perp(v1);
</programlisting>

<para>there are two more set functions <code>SetPtEtaPhiE(pt,eta,phi,e)</code> and <code>S</code><code>etPtEtaPhiM</code><code>(pt,eta,phi,m)</code> for convenience.</para>
</sect2>

<sect2>
<title>Arithmetic and Comparison Operators</title>
<para>The <emphasis role="bold"><code>TLorentzVector</code></emphasis> class provides operators to add subtract or compare four-vectors: </para>

<programlisting language="c++">
v3 = -v1;
v1 = v2+v3;
v1+= v3;
v1 = v2 + v3;
v1-= v3;
if(v1 == v2) {...}
if(v1 != v3) {...}
</programlisting>

<para/>
</sect2>

<sect2>
<title>Magnitude/Invariant mass, beta, gamma, scalar product</title>
<para>The scalar product of two four-vectors is calculated with the <code>(-,-,-,+) </code>metric:</para>
<para>

<emphasis role="bold"><code>s = v1*v2 </code></emphasis>
<code>= t1*t2-x1*x2-y1*y2-z1*z2 </code></para>
<para>The magnitude squared <code>mag2</code> of a four-vector is therefore: </para>
<para>

<emphasis role="bold"><code>mag2 = v*v</code></emphasis>
<code> = t*t-x*x-y*y-z*z </code></para>
<para>If <code>mag2</code> is negative:  <emphasis role="bold"><code>mag = -Sqrt(-mag*mag)</code></emphasis>. The methods are: </para>

<programlisting language="c++">
Double_t s, s2;
s  = v1.Dot(v2);<code>// scalar product</code>
s  = v1*v2;<code>// scalar product</code>
s2 = v.Mag2();ors2 = v.M2();
s  = v.Mag();s  = v.M();
</programlisting>

<para>Since in case of momentum and energy the magnitude has the meaning of invariant mass <emphasis role="bold"><code>TLorentzVector</code></emphasis>         provides the more meaningful aliases <code>M2()</code> and <code>M()</code>. The methods <code>Beta()</code> and <code>Gamma()</code> returns <code>beta</code> and <code>gamma = 1/Sqrt(1-beta*beta)</code>.         </para>
</sect2>

<sect2>
<title>Lorentz Boost</title>
<para>A boost in a general direction can be parameterized with three parameters which can be taken as the components of a three vector <code>b=(bx,by,bz)</code>. With <code>x=(x,y,z)</code> and <code>gamma=1/Sqrt(1-beta*beta)</code> (beta being the module of vector b)<code>,</code> an arbitrary active Lorentz boost transformation (from the rod frame to the original frame) can be written as: </para>
<para>

<code>x = x' + (gamma-1)/(beta*beta)*(b*x')*b + gamma*t'*b </code></para>
<para>
<code>t = gamma(t'+ b*x') </code></para>
<para>The <code>Boost()</code> method performs a boost transformation from the rod frame to the original frame. <code>BoostVector()</code> returns a <emphasis role="bold"><code>TVector3</code></emphasis> of the spatial components divided by the time component: </para>

<programlisting language="c++">
TVector3 b;
v.Boost(bx,by,bz);
v.Boost(b);
b = v.BoostVector();<code>// b=(x/t,y/t,z/t)</code>
</programlisting>

</sect2>

<sect2>
<title>Rotations</title>
<para>There are four sets of functions to rotate the <emphasis role="bold"><code>TVector3</code></emphasis> component of a <emphasis role="bold"><code>TLorentzVector</code></emphasis>: </para>
<para>Around Axes:</para>

<programlisting language="c++">
v.RotateX(TMath::Pi()/2.);
v.RotateY(.5);
v.RotateZ(.99);
</programlisting>

<para>Around an arbitrary axis:</para>

<programlisting language="c++">
v.Rotate(TMath::Pi()/4., v1); <code>// rotation around v1</code>
</programlisting>

<para>Transformation from rotated frame:</para>

<programlisting language="c++">
v.RotateUz(direction); <code>// direction must be a unit TVector3</code>
</programlisting>

<para>Rotation by <emphasis role="bold"><code>TRotation</code></emphasis>:</para>

<programlisting language="c++">
TRotation r;
v.Transform(r);<emphasis role="italic">//or v *= r;</emphasis><emphasis role="italic"><emphasis role="bold"><code>  (v = r*v)</code></emphasis></emphasis>
</programlisting>

</sect2>

<sect2>
<title>Miscellaneous</title>
<para>Angle between two vectors:</para>

<programlisting language="c++">
Double_t a = v1.Angle(v2);<code>// get angle between v1 and v2</code>
</programlisting>

<para>Methods <code>Plus()</code> and <code>Minus()</code> return the positive and negative light-cone components: </para>

<programlisting language="c++">
Double_t pcone = v.Plus();
Double_t mcone = v.Minus();
</programlisting>

<para>A general Lorentz transformation (see class <emphasis role="bold"><code>TLorentzRotation</code></emphasis><code>)</code> can be used by the <code>Transform()</code> method, the <code>*=, or *</code> operator of the <emphasis role="bold"><code>TLorentzRotation</code></emphasis> class: </para>

<programlisting language="c++">
TLorentzRotation l;
v.Transform(l);
v = l*v;orv *= l;<code>// v = l*v</code>
</programlisting>

</sect2>
</sect1>

<sect1>
<title>TLorentzRotation</title>
<para>The <emphasis role="bold"><code>TLorentzRotation</code></emphasis> class describes Lorentz transformations including Lorentz boosts and rotations (see <emphasis role="bold"><code>TRotation</code></emphasis>) </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001AF.png" width="109.25pt" depth="57.7pt"/></imageobject></inlinemediaobject>
</para>

<sect2>
<title>Declaration</title>
<para>By default it is initialized to the identity matrix, but it may also be initialized by other <emphasis role="bold"><code>TLorentzRotation</code></emphasis>, by a pure <emphasis role="bold"><code>TRotation</code></emphasis> or by a boost: </para>

<programlisting language="c++">
TLorentzRotation l;   <code>// l is initialized as identity</code>
TLorentzRotation m(l);<code>// m = l</code>
TRotation r;
TLorentzRotation lr(r);
TLorentzRotation lb1(bx,by,bz);
TVector3 b;
TLorentzRotation lb2(b);
</programlisting>

<para>The Matrix for a Lorentz boosts is: </para>

<para>    <code> â1+gamma'*bx*bx     gamma'*bx*by     gamma'*bx*bz   gamma*bx â </code></para>
<para>    <code> â  gamma'*bx*bz   1+gamma'*by*by     gamma'*by*by   gamma*by â </code></para>
<para>    <code> â  gamma'*bz*bx     gamma'*bz*by   1+gamma'*bz*bz   gamma*bz â </code></para>
<para>     <code>â  gamma*bx         gamma*by         gamma*bz       gamma    â </code></para>

<para>with the boost vector <code>b=(bx,by,bz)</code>; <code>gamma=1/Sqrt(1-beta*beta)</code>;<code> gammaâ=(gamma-1)/beta*beta.</code></para>
</sect2>

<sect2>
<title>Access to the Matrix Components/Comparisons</title>
<para>The access to the matrix components is possible with the methods <code>XX()</code>, <code>XY()</code> ... <code>TT()</code>, and with the operator<code> (int,int)</code>: </para>

<programlisting language="c++">
Double_t xx;
TLorentzRotation l;
xx = l.XX();<code>// gets the xx component</code>
xx = l(0,0);<code>// gets the xx component</code>
if (l == m) {...}<code>// test for equality</code>
if (l != m) {...}<code>// test for inequality</code>
if (l.IsIdentity()) {...} <code>// test for identity</code>
</programlisting>

</sect2>

<sect2>
<title>Transformations of a Lorentz Rotation</title>
<para>There are four possibilities to find the product of two <emphasis role="bold"><code>TLorentzRotation</code></emphasis> transformations: </para>

<programlisting language="c++">
TLorentzRotation a,b,c;
c = b*a;<code>// product</code>
c = a.MatrixMultiplication(b);<code>// a is unchanged</code>
a *= b;<code>// a=a*b</code>
c = a.Transform(b)<code>// a=b*a then c=a</code>
</programlisting>

<para>Lorentz boosts:</para>

<programlisting language="c++">
Double_t bx, by, bz;
TVector3 v(bx,by,bz);
TLorentzRotation l;
l.Boost(v);
l.Boost(bx,by,bz);
</programlisting>

<para>Rotations:</para>

<programlisting language="c++">
TVector3 axis;
l.RotateX(TMath::Pi());<code>// rotation around x-axis</code>
l.Rotate(.5,axis);<code>// rotation around specified</code> vector
</programlisting>

<para>Inverse transformation: use the method <code>Inverse() </code>to return the inverse transformation keeping the current one unchanged<code>.</code> The method <code>Invert()</code> inverts the current <emphasis role="bold"><code>TLorentzRotation</code></emphasis>: </para>

<programlisting language="c++">
l1 = l2.Inverse();<code>// l1 is inverse of l2, l2 unchanged</code>
l1 = l2.Invert();<code>// invert l2, thenÂ  l1=l2</code>
</programlisting>

<para/>
<para>The matrix for the inverse transformation of a <emphasis role="bold"><code>TLorentzRotation</code></emphasis> is as follows: </para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001B0.png" width="99.95pt" depth="62.7pt"/></imageobject></inlinemediaobject>
</para>
</sect2>

<sect2>
<title>Transformation of a TLorentzVector</title>
<para>To apply <emphasis role="bold"><code>TLorentzRotation</code></emphasis> to <emphasis role="bold"><code>TLorentzVector</code></emphasis> you can use either the <code>VectorMultiplication()</code> method or the <code>* operator</code>. You can also use the <code>Transform()</code> function and the <code>*= </code>operator of the class <emphasis role="bold"><code>TLorentzVector</code></emphasis>.</para>

<programlisting language="c++">
TLorentzVector v;
TLorentzRotation l;
...
v=l.VectorMultiplication(v);
v = l * v;
v.Transform(l);
v *= l;Â            <code>// v = l*v</code>
</programlisting>

</sect2>

<sect2>
<title>Physics Vector Example</title>
<para>The test file   <code>$ROOTSYS/test/TestVectors.cxx is</code> an example of using physics vectors. The vector classes are not loaded by default, and to run it, you will need to load <code>libPhysics.so</code> first:</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>.L $ROOTSYS/lib/libPhysics.so </code></emphasis>
root[] <emphasis role="bold"><code>.x TestVectors.cxx</code></emphasis>
</programlisting>

<para>To load the physics vector library in a ROOT application use:</para>

<programlisting language="c++">
gSystem-&gt;Load("libPhysics");
</programlisting>

<para>The example <code>$ROOTSYS/test/TestVectors.cxx</code> does not return much, especially if all went well, but when you look at the code you will find examples for many calls.</para>
</sect2>
</sect1>
</chapter>



