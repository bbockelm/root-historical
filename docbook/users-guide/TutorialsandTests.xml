<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>The Tutorials and Tests</title>
<para>This chapter is a guide to the examples that come with the installation of ROOT. They are located in two directories: <code>$ROOTSYS/tutorials</code> and <code>$ROOTSYS/test</code>. </para>

<sect1>
<title>$ROOTSYS/tutorials</title>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/030001F9.png" width="69.75pt" depth="352.95pt"/></imageobject></inlinemediaobject>The tutorials directory contains many example scripts. <emphasis role="underline">To have all examples working you must have write permission and you will need to execute </emphasis><emphasis role="underline"><code>hsimple.C</code> first</emphasis>. If you do not have write permission in the directory<code> $ROOTSYS/tutorials</code>, copy the entire directory to your area. The script <code>hsimple.C</code> displays a histogram as it is being filled, and creates a ROOT file used by the other examples. </para>
<para>To execute it type:</para>

<programlisting language="c++">
&gt; cd $ROOTSYS/tutorials
&gt; root
*******************************************
*                                         *
*        W E L C O M E  to  R O O T       *
*                                         *
*   Version   5.16/00      27 June 2006   *
*                                         *
*  You are welcome to visit our Web site  *
*          http://root.cern.ch            *
*                                         *
*******************************************
FreeType Engine v2.1.9 used to render TrueType fonts.
Compiled on 28 June 2007 for linux with thread support.

CINT/ROOT C/C++ Interpreter version 5.16.21, June 22, 2007
Type ? for help. Commands must be C++ statements.
Enclose multiple statements between { }.
root[0] .x hsimple.C
</programlisting>

<para>Now execute <code>demos.C</code>, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example <code>fit1.C</code>). Once you are done, and want to quit the ROOT session, you can do so by typing <emphasis role="bold"><code>.q</code></emphasis>.</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>.x demos.C</code></emphasis>
root[] <emphasis role="bold"><code>.q</code></emphasis>
</programlisting>

<para/>
</sect1>

<sect1>
<title>$ROOTSYS/test</title>
<para>The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release's backward compatibility.</para>
<para>We see these source files:</para>
<informaltable>
<tgroup cols="2">
<colspec colwidth="1984*" colname="column-1"/>
<colspec colwidth="6161*" colname="column-2"/>
<tbody>
<row>
<entry>
<para>
<code>Makefile</code>
</para>
</entry>
<entry>
<para>Makefile to build all test programs.</para>
</entry>
</row>
<row>
<entry>
<para>
<code>hsimple.cxx</code>
</para>
</entry>
<entry>
<para>Simple test program that creates and saves some histograms</para>
</entry>
</row>
<row>
<entry>
<para>
<code>MainEvent.cxx</code>
</para>
</entry>
<entry>
<para>Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files <code>Event.cxx</code>, <code>EventCint.cxx</code> and <code>Event.h</code>. An example of a procedure to link this program is in <code>bind_Event</code>. Note that the <code>Makefile</code> invokes the <code>rootcint</code> utility to generate the CINT interface <code>EventCint.cxx</code></para>
</entry>
</row>
<row>
<entry>
<para>
<code>Event.cxx</code>
</para>
</entry>
<entry>
<para>Implementation for classes Event and Track</para>
</entry>
</row>
<row>
<entry>
<para>
<code>minexam.cxx</code>
</para>
</entry>
<entry>
<para>Simple test program for data fitting</para>
</entry>
</row>
<row>
<entry>
<para><code>tcollex.cxx</code>  </para>
</entry>
<entry>
<para>Example usage of the ROOT collection classes</para>
</entry>
</row>
<row>
<entry>
<para>
<code>tcollbm.cxx</code>
</para>
</entry>
<entry>
<para>Benchmarks of ROOT collection classes</para>
</entry>
</row>
<row>
<entry>
<para>ctorture.cxx</para>
</entry>
<entry>
<para>Test program for the class <emphasis role="bold"><code>TComplex</code></emphasis></para>
</entry>
</row>
<row>
<entry>
<para>
<code>tstring.cxx</code>
</para>
</entry>
<entry>
<para>Example usage of the ROOT string class</para>
</entry>
</row>
<row>
<entry>
<para><code>vmatrix.cxx</code>  </para>
</entry>
<entry>
<para>Verification program for the <emphasis role="bold"><code>TMatrix</code></emphasis> class</para>
</entry>
</row>
<row>
<entry>
<para><code>vvector.cxx</code>  </para>
</entry>
<entry>
<para>Verification program for the <emphasis role="bold"><code>TVector </code></emphasis>class</para>
</entry>
</row>
<row>
<entry>
<para>
<code>vlazy.cxx</code>
</para>
</entry>
<entry>
<para>Verification program for lazy matrices</para>
</entry>
</row>
<row>
<entry>
<para><code>hworld.cxx</code>   </para>
</entry>
<entry>
<para>Small program showing basic graphics</para>
</entry>
</row>
<row>
<entry>
<para>
<code>guitest.cxx</code>
</para>
</entry>
<entry>
<para>Example usage of the ROOT GUI classes</para>
</entry>
</row>
<row>
<entry>
<para>
<code>gui</code>
<code>viewer</code>
<code>.cxx</code>
</para>
</entry>
<entry>
<para>Another ROOT GUI example program</para>
</entry>
</row>
<row>
<entry>
<para><code>Hello.cxx</code>    </para>
</entry>
<entry>
<para>Dancing text example</para>
</entry>
</row>
<row>
<entry>
<para><code>Aclock.cxx</code>   </para>
</entry>
<entry>
<para>Analog clock (a la X11 <code>xclock</code>)</para>
</entry>
</row>
<row>
<entry>
<para><code>Tetris.cxx</code>  </para>
</entry>
<entry>
<para>The known Tetris game based on the ROOT graphics</para>
</entry>
</row>
<row>
<entry>
<para><code>stress.cxx</code>  </para>
</entry>
<entry>
<para>Important ROOT stress testing program</para>
</entry>
</row>
<row>
<entry>
<para><code>stress*.cxx</code>  </para>
</entry>
<entry>
<para>Stress testing of different ROOT classes</para>
</entry>
</row>
<row>
<entry>
<para><code>bench.cxx</code>  </para>
</entry>
<entry>
<para>STL and ROOT container test and benchmarking program</para>
</entry>
</row>
<row>
<entry>
<para>QpRandomDriver.cxx</para>
</entry>
<entry>
<para>Verfication program for Quadratic programming classes in Quadp library</para>
</entry>
</row>
<row>
<entry>
<para>DrawTest.sh  </para>
</entry>
<entry>
<para>Entry script to extensive <emphasis role="bold"><code>TTree</code></emphasis> query test suite</para>
</entry>
</row>
<row>
<entry>
<para>dt_*  </para>
</entry>
<entry>
<para>Scripts used by DrawTest.sh</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<para>The <code>$ROOTSYS/test</code> directory is a gold mine of root-wisdom nuggets, and we encourage you to explore and exploit it.  These instructions will compile all programs in <code>$ROOTSYS/test</code>:</para>
<para>If you do not have write permission in the <code>$ROOTSYS/test</code> directory, copy the entire <code>$ROOTSYS/test</code> directory to your area. The <code>Makefile</code> is a useful example of how ROOT applications are linked and built. Edit the <code>Makefile</code> to specify your architecture by changing the <code>ARCH</code> variable, for example, on an SGI machine type:<code> ARCH</code> = <code>sgikcc</code>.</para>
<para>Now compile all programs:</para>
<para>% <emphasis role="bold"><code>gmake</code></emphasis> </para>
<para>This will build several applications and shared libraries. We are especially interested in Event, stress, and <code>guitest</code>.</para>

<sect2>
<title>Event – An Example of a ROOT Application</title>
<para>Event is created by compiling <code>MainEvent.cxx</code>, and <code>Event.cxx</code>. It creates a ROOT file with a tree and two histograms. When running <code>Event</code> we have four optional arguments with defaults:</para>
<informaltable frame="all">
<tgroup cols="3">
<colspec colwidth="468*" colname="column-1"/>
<colspec colwidth="6591*" colname="column-2"/>
<colspec colwidth="1448*" colname="column-3"/>
<tbody>
<row>
<entry rowsep="1" colsep="1">
</entry>
<entry rowsep="1" colsep="1">
<para>Argument</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Default</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>1</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Number of Events (1 ... n)</para>
</entry>
<entry rowsep="1" colsep="1">
<para>400</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>2</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Compression level:</para>
<para>0: no compression at all.</para>
<para>1: If the split level is set to zero, everything is compressed according to the <code>gzip</code> level 1. If split level is set to 1, leaves that are not floating point numbers are compressed using the <code>gzip</code> level 1.</para>
<para>2: If the split level is set to zero, everything is compressed according to the <code>gzip</code> level 2. If split level is set to 1, all non floating point leaves are compressed according to the <code>gzip</code> level 2 and the floating point leaves are compressed according to the <code>gzip</code> level 1 (<code>gzip</code> level –1).</para>
<para>Floating point numbers are compressed differently because the gain when compressing them is about 20 - 30%. For other data types it is generally better and around 100%.</para>
</entry>
<entry rowsep="1" colsep="1">
<para>1 </para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>3</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Split or not Split </para>
<para>0: only one single branch is created and the complete event is serialized in one single buffer</para>
<para>1: a branch per variable is created.</para>
</entry>
<entry rowsep="1" colsep="1">
<para>1 </para>
<para>(Split)</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>4</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Fill</para>
<para>0: read the file</para>
<para>1: write the file, but don't fill the histograms</para>
<para>2: don't write, don’t fill the histograms</para>
<para>10: fill the histograms, don't write the file</para>
<para>11: fill the histograms, write the file</para>
<para>20: read the file sequentially</para>
<para>25: read the file at random</para>
</entry>
<entry rowsep="1" colsep="1">
<para>1 </para>
<para>(Write, no fill)</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<sect3>
<title>Effect of Compression on File Size and Write Times</title>
<para>You may have noticed that a ROOT file has up to nine compression level, but here only levels 0, 1, and 2 are described. Compression levels above 2 are not competitive. They take up to much write time compared to the gain in file space. Below are three runs of <code>Event</code> on a Pentium III 650 MHz and the resulting file size and write and read times. </para>
<para>No Compression:</para>

<programlisting language="c++">
<emphasis role="bold"><code>&gt; Event 400 0 1 1</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=6.840000 seconds, CpuTime=3.560000 seconds
compression level=0, split=1, arg4=1
You write 2.800173 Mbytes/Realtime seconds
You write 5.380107 Mbytes/Cputime seconds

&gt; ls <emphasis role="bold"><code>-l Event.root</code></emphasis>
… 19752171 Feb 23 18:26 Event.root

&gt; <emphasis role="bold"><code>Event 400 0 1 20</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=0.790000 seconds, CpuTime=0.790000 seconds
You read 24.244533 Mbytes/Realtime seconds
You read 24.244533 Mbytes/Cputime seconds
</programlisting>

<para>We see the file size without compression is 19.75 MB, the write time is 6.84 seconds and the read time is 0.79 seconds.</para>
<para>Compression = 1: event is compressed:</para>

<programlisting language="c++">
&gt; <emphasis role="bold"><code>Event 400 1 1 1</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=6.440000 seconds, CpuTime=4.020000 seconds
compression level=1, split=1, arg4=1
You write 2.974096 Mbytes/Realtime seconds
You write 4.764473 Mbytes/Cputime seconds

&gt; <emphasis role="bold"><code>ls -l Event.root</code></emphasis>
…     17728188 Feb 23 18:28 Event.root

&gt; <emphasis role="bold"><code>Event 400 1 1 20</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=0.900000 seconds, CpuTime=0.900000 seconds
You read 21.281312 Mbytes/Realtime seconds
You read 21.281312 Mbytes/Cputime seconds
</programlisting>

<para>We see the file size 17.73, the write time was 6.44 seconds and the read time was 0.9 seconds.</para>
<para>Compression = 2: Floating point numbers are compressed with level 1:</para>

<programlisting language="c++">
<emphasis role="bold"><code>&gt; Event 400 2 1 1</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=11.340000 seconds, CpuTime=9.510000 seconds
compression level=2, split=1, arg4=1
You write 1.688993 Mbytes/Realtime seconds
You write 2.014004 Mbytes/Cputime seconds

&gt; <emphasis role="bold"><code>ls -l Event.root</code></emphasis>
…     13783799 Feb 23 18:29 Event.root

&gt; <emphasis role="bold"><code>Event 400 2 1 20</code></emphasis>
400 events and 19153182 bytes processed.
RealTime=2.170000 seconds, CpuTime=2.170000 seconds
You read 8.826351 Mbytes/Realtime seconds
You read 8.826351 Mbytes/Cputime seconds
</programlisting>

<para>The file size is 13.78 MB, the write time is 11.34 seconds and the read time is 2.17 seconds.</para>
<para>This table summarizes the findings on the impact of compressions:</para>
<informaltable frame="all">
<tgroup cols="4">
<colspec colwidth="2353*" colname="column-1"/>
<colspec colwidth="2434*" colname="column-2"/>
<colspec colwidth="2109*" colname="column-3"/>
<colspec colwidth="1620*" colname="column-4"/>
<tbody>
<row>
<entry rowsep="1" colsep="1">
<para>Compression</para>
</entry>
<entry rowsep="1" colsep="1">
<para>File Size</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Write Times</para>
</entry>
<entry rowsep="1" colsep="1">
<para>Read Times</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>0</para>
</entry>
<entry rowsep="1" colsep="1">
<para>19.75 MB</para>
</entry>
<entry rowsep="1" colsep="1">
<para>6.84 sec.</para>
</entry>
<entry rowsep="1" colsep="1">
<para>0.79 sec.</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>1</para>
</entry>
<entry rowsep="1" colsep="1">
<para>17.73 MB</para>
</entry>
<entry rowsep="1" colsep="1">
<para>6.44 sec.</para>
</entry>
<entry rowsep="1" colsep="1">
<para>0.90 sec.</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>2</para>
</entry>
<entry rowsep="1" colsep="1">
<para>13.78 MB</para>
</entry>
<entry rowsep="1" colsep="1">
<para>11.34 sec.</para>
</entry>
<entry rowsep="1" colsep="1">
<para>2.17 sec.</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect3>

<sect3>
<title>Setting the Split Level</title>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/080001FA.png" width="146.4pt" depth="199.2pt"/></imageobject></inlinemediaobject>Split Level = 0:</para>
<para>Now we execute Event with the split parameter set to 0:</para>

<programlisting language="c++">
&gt; <emphasis role="bold"><code>Event 400 1 0 1</code></emphasis>
&gt; <emphasis role="bold"><code>root</code></emphasis>
root[] <emphasis role="bold"><code>TFile f("Event.root")</code></emphasis>
root[] <emphasis role="bold"><code>TBrowser</code></emphasis><emphasis role="bold"><code> T</code></emphasis>
</programlisting>

<para>We notice that only one branch is visible (event). The individual data members of the <code>Event</code> object are no longer visible in the browser. They are contained in the event object on the event branch, because we specified no splitting. Split Level = 1:</para>
<para>Setting the split level to 1 will create a branch for each data member in the Event object. First we execute <code>Event</code> and set the split level to 1 and start the browser to examine the split tree:</para>

<programlisting language="c++">
<code>&gt; </code>    <emphasis role="bold"><code>Event 400 1 1 1</code></emphasis>
</programlisting>

<programlisting language="c++">
<code>&gt; </code>    <emphasis role="bold"><code>root</code></emphasis>
root[] <emphasis role="bold"><code>TFile f("Event.root")</code></emphasis>
root[] <emphasis role="bold"><code>TBrowser browser</code></emphasis>
</programlisting>

<para/>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/080001FB.png" width="341.4pt" depth="313.45pt"/></imageobject></inlinemediaobject>
</para>
</sect3>
</sect2>

<sect2>
<title>stress - Test and Benchmark</title>
<para>The executable stress is created by compiling <code>stress.cxx</code>. It completes sixteen tests covering the following capabilities of the ROOT framework. </para>
<itemizedlist>
<listitem><para>Functions, Random Numbers, Histogram Fits</para></listitem>
<listitem><para>Size &amp; compression factor of a ROOT file</para></listitem>
<listitem><para>Purge, Reuse of gaps in <emphasis role="bold"><code>TFile</code></emphasis></para></listitem>
<listitem><para>2D Histograms, Functions, 2D Fits</para></listitem>
<listitem><para>Graphics &amp; PostScript </para></listitem>
<listitem><para>Subdirectories in a ROOT file</para></listitem>
<listitem><para><emphasis role="bold"><code>TNtuple</code></emphasis>, Selections, <emphasis role="bold"><code>TCutG</code></emphasis>, <emphasis role="bold"><code>TEventList</code></emphasis></para></listitem>
<listitem><para>Split and Compression modes for Trees</para></listitem>
<listitem><para>Analyze <code>Event.root</code> file of stress 8</para></listitem>
<listitem><para>Create 10 files starting from <code>Event.root</code></para></listitem>
<listitem><para>Test chains of Trees using the 10 files</para></listitem>
<listitem><para>Compare histograms of test 9 and 11</para></listitem>
<listitem><para>Merging files of a chain</para></listitem>
<listitem><para>Check correct rebuilt of <code>Event.root</code> in test 13</para></listitem>
<listitem><para>Divert Tree branches to separate files</para></listitem>
<listitem><para>CINT test (3 nested loops) with <code>LHCb</code> trigger</para></listitem>
</itemizedlist>
<para>The program stress takes one argument, the number of events to process. The default is 1000 events. Be aware that executing stress with 1000 events<emphasis role="italic"> will create several files consuming about 100 MB of disk space;</emphasis> running stress with 30 events will consume about 20 MB. The disk space is released once stress is done.</para>
<para>There are two ways to run <code>stress</code>:</para>
<para>From the system prompt or from the ROOT prompt using the interpreter. </para>

<programlisting language="c++">
&gt; <emphasis role="bold"><code>cd $ROOTSYS/test</code></emphasis>
&gt; <emphasis role="bold"><code>stress</code></emphasis>             <code>// default 1000 events</code>
&gt; <emphasis role="bold"><code>stress 30</code></emphasis>          <code>// test with 30 events</code>
</programlisting>

<para>Start ROOT with the batch mode option (-b) to suppress the graphic output.</para>

<programlisting language="c++">
&gt; <emphasis role="bold"><code>root -b</code></emphasis>
root[] <emphasis role="bold"><code>.L stress.cxx</code></emphasis>
root[] <emphasis role="bold"><code>stress(1000)</code></emphasis><code>// test with 1000 events</code>
root[] <emphasis role="bold"><code>stress(30)</code></emphasis><code>// test with 30 events</code>
</programlisting>

<para>The output of stress includes a pass/fail conclusion for each test, the total number of bytes read and written, and the elapsed real and CPU time. It also calculates a performance index for your machine relative to a reference machine a DELL Inspiron 7500 (Pentium III 600 MHz) with 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine. </para>
<para>Here is a sample run:</para>

<programlisting language="c++">
% <emphasis role="bold"><code>root –b</code></emphasis>
root[] .<emphasis role="bold"><code>x stress.cxx(30)</code></emphasis>

Test  1 : Functions, Random Numbers, Histogram Fits............. OK
Test  2 : Check size &amp; compression factor of a Root file........ OK
Test  3 : Purge, Reuse of gaps in TFile......................... OK
Test  4 : Test of 2-d histograms, functions, 2-d fits........... OK
Test  5 : Test graphics &amp; PostScript ............................OK
Test  6 : Test subdirectories in a Root file.................... OK
Test  7 : TNtuple, selections, TCutG, TEventList.......... OK
Test  8 : Trees split and compression modes..................... OK
Test  9 : Analyze Event.root file of stress 8................... OK
Test 10 : Create 10 files starting from Event.root.............. OK
Test 11 : Test chains of Trees using the 10 files............... OK
Test 12 : Compare histograms of test 9 and 11................... OK
Test 13 : Test merging files of a chain......................... OK
Test 14 : Check correct rebuilt of Event.root in test 13........ OK
Test 15 : Divert Tree branches to separate files................ OK
Test 16 : CINT test (3 nested loops) with LHCb trigger.......... OK
******************************************************************
*  IRIX64 fnpat1 6.5 01221553 IP27
******************************************************************
stress    : Total I/O =   75.3 Mbytes, I =   59.2, O =  16.1
stress    : Compr I/O =   75.7 Mbytes, I =   60.0, O =  15.7
stress    : Real Time = 307.61 seconds Cpu Time = 292.82 seconds
******************************************************************
*  ROOTMARKS =  53.7   *  Root2.25/00   20000710/1022
</programlisting>

</sect2>

<sect2>
<title>guitest – A Graphical User Interface</title>
<para>The <code>guitest</code> example, created by compiling <code>guitest.cxx</code>, tests and illustrates the use of the native GUI widgets such as cascading menus, dialog boxes,
sliders and tab panels. It is a very useful example to study when designing a GUI. Some examples of the output of <code>guitest</code> are shown next. To run it type <code>guitest</code>
at the system prompt in the <code>$ROOTSYS/test</code> directory. We have included an entire chapter on this subject where we explore <code>guitest</code> in detail and use it to explain
how to build our own ROOT application with a GUI. See “Writing a Graphical User Interface”.</para>

<figure><title>Native GUI widgets</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/030001FC.png" width="343.25pt" depth="270.6pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect2>
</sect1>
</chapter>



