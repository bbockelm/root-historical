<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Introduction</title>
<para>In the mid 1990's, René Brun and Fons Rademakers had many years of experience developing interactive tools and simulation packages. They had lead successful projects such as PAW,
PIAF, and GEANT, and they knew 
<indexterm><primary>PAW</primary></indexterm>
the twenty-year-old FORTRAN libraries had reached their limits. Although still very popular, these tools could not scale up to the challenges offered by
the Large Hadron Collider, where the data is a few orders of magnitude larger than anything seen before.</para>
<para>At the same time, computer science had made leaps of progress especially in the area of Object Oriented Design, and René and Fons were ready to take advantage of it.</para>
<para>ROOT was developed in the context of the NA49 experiment at CERN. NA49 has generated an impressive amount of data, around 10 Terabytes per run. This rate provided the ideal
environment to develop and test the next generation data analysis. </para>
<para>One cannot mention ROOT without mentioning CINT, its C++ interpreter. CINT was created by Masa Goto in Japan. It is an independent product, which ROOT is using for the
command line and script processor.</para>
<para>ROOT was, and still is, developed in the "Bazaar style", a term from the book "The Cathedral and the Bazaar" by Eric S. Raymond. It means a liberal, informal development
style that heavily relies on the diverse and deep talent of the user community. The result is that physicists developed ROOT for themselves; this made it specific, appropriate,
useful, and over time refined and very powerful. The development of ROOT is a continuous conversation between users and developers with the line between the two blurring at times
and the users becoming co-developers.</para>
<para>When it comes to storing and mining large amount of data, physics plows the way with its Terabytes, but other fields and industry follow close behind as they acquiring more
and more data over time. They are ready to use the true and tested technologies physics has invented. In this way, other fields and industries have found ROOT useful and they have
started to use it also.</para>
<para>In the bazaar view, software is released early and frequently to expose it to thousands of eager co-developers to pound on, report bugs, and contribute possible fixes. More
users find more bugs, because they stress the program in different ways. By now, after ten years, the age of ROOT is quite mature. Most likely, you will find the features you are
looking for, and if you have found a hole, you are encouraged to participate in the dialog and post your suggestion or even implementation on <code>roottalk</code>, the ROOT
mailing list.</para>

<sect1>
<title>The ROOT Mailing Lists</title>
<para>The <code>roottalk</code> was the very first active ROOT mailing list.
   <indexterm><primary>mailing list</primary></indexterm>
 People can subscribe to it by registering at the ROOT web site:
<uri xmlns:xlink="http://root.cern.ch/root/Registration.phtml">http://root.cern.ch/root/Registration.phtml</uri>.
The <code>RootTalk</code> Forum  <uri xmlns:xlink="http://root.cern.ch/phpBB2/">http://root.cern.ch/phpBB2/</uri>
has been gradually replaced this mailing list since September 2003. The <code>RootTalk</code> Forum is a web-based news group with about 10 discussion sub-units.</para>
<para>If you have a question, it is likely that it has been asked, answered, and stored in the <code>roottalk</code> or <code>RootTalk</code>
Forum archives. Please use the search engine to see if your question has already been answered before sending a mail to the <code>roottalk</code> list or post a topic in the Forum.</para>
<para>You can browse the <code>roottalk</code> archives at:  <uri xmlns:xlink="http://root.cern.ch/root/roottalk/AboutRootTalk.html">http://root.cern.ch/root/roottalk/AboutRootTalk.html</uri>.
You can send your question without subscribing to:  <uri xmlns:xlink="mailto:roottalk@root.cern.ch">roottalk@root.cern.ch</uri></para>
</sect1>

<sect1>
<title>Contact Information</title>
<para>Several authors wrote this book and you may see a "change of voice" from one chapter to the next. We felt we could accept this in order to have the expert
explain what they know best. If you would like to contribute a chapter or add to a section, please contact
<uri xmlns:xlink="mailto:rootdoc@root.cern.ch">rootdoc@root.cern.ch</uri>. We count on you to send us suggestions on additional topics or on the topics that need more
documentation. Please send your comments, corrections, questions, and suggestions to the <code>rootdoc</code> list:
<uri xmlns:xlink="mailto:rootdoc@root.cern.ch">rootdoc@root.cern.ch</uri></para>
<para>We attempt to give the user insight into the many capabilities of ROOT. The book begins with the elementary functionality and progresses in complexity reaching the
specialized topics at the end. The experienced user looking for special topics may find these chapters useful: see “Networking”, “Writing a Graphical User Interface”, “Threads”,
and “PROOF: Parallel Processing”.</para>
</sect1>

<sect1>
<title>Conventions Used in This Book</title>
<para>We tried to follow a style convention for the sake of clarity. The styles in used are described below.</para>
<para>To show source code in scripts or source files: </para>

<programlisting language="c++">{
   cout &lt;&lt; " Hello" &lt;&lt; endl;
   float x = 3.;
   float y = 5.;
   int   i = 101;
   cout &lt;&lt;" x = "&lt;&lt;x&lt;&lt;" y = "&lt;&lt;y&lt;&lt;" i = "&lt;&lt;i&lt;&lt; endl;
}</programlisting>

<para>
To show the ROOT command line, we show the ROOT prompt without numbers. In the interactive system, the ROOT prompt has a line number
(<code>root[12]</code>); for the sake of simplicity, the line numbers are left off. Bold monotype font indicates the ROOT class names as
<emphasis role="bold"><code>TObject</code></emphasis>, <emphasis role="bold"><code>TClass</code></emphasis>, and text for you to enter at verbatim.</para>

<programlisting language="c++"
>root[] <emphasis role="bold"><code>TLine l</code></emphasis>
root[] <emphasis role="bold"><code>l.Print()</code></emphasis>
TLine  X1=0.000000 Y1=0.000000 X2=0.000000 Y2=0.000000
</programlisting>

<para>Italic bold monotype font indicates a global variable, for example 
<emphasis role="italic"><emphasis role="bold"><code>gDirectory</code></emphasis></emphasis>.
<indexterm><primary>gDirectory</primary></indexterm>
We also used the italic font to <emphasis><code>highlight the comments</code></emphasis> in the code listing. </para>
<para>When a variable term is used, it is shown between angled brackets. In the example below the variable term &lt;library&gt; can be replaced with any library in the
<code>$ROOTSYS</code> directory: <code>$ROOTSYS/&lt;library&gt;/inc.</code></para>
</sect1>

<sect1>
<title>The Framework</title>
<para>ROOT is an object-oriented framework aimed at solving the data analysis challenges of high-energy physics. There are two key words in this definition, object oriented and framework. First, we explain what we mean by a framework and then why it is an object-oriented framework.</para>

<sect2>
<title>What Is a Framework?</title>
<indexterm><primary>framework</primary><secondary>components</secondary></indexterm>
<para>Programming inside a framework is a little like living in a city. Plumbing, electricity, telephone, and transportation are services provided by the city. In your house, you have interfaces to the services such as light switches, electrical outlets, and telephones. The details, for example, the routing algorithm of the phone switching system, are transparent to you as the user. You do not care; you are only interested in using the phone to communicate with your collaborators to solve your domain specific problems.</para>
<para>Programming outside of a framework may be compared to living in the country. In order to have transportation and water, you will have to build a road and dig a well. To have services like telephone and electricity you will need to route the wires to your home. In addition, you cannot build some things yourself. For example, you cannot build a commercial airport on your patch of land. From a global perspective, it would make no sense for everyone to build his or her own airport. You see you will be very busy building the infrastructure (or framework) before you can use the phone to communicate with your collaborators and have a drink of water at the same time. In software engineering, it is much the same way. In a framework, the basic utilities and services, such as I/O and graphics, are provided. In addition, ROOT being a HEP analysis framework, it provides a large selection of HEP specific utilities such as histograms and fitting. The drawback of a framework is that you are constrained to it, as you are constraint to use the routing algorithm provided by your telephone service. You also have to learn the framework interfaces, which in this analogy is the same as learning how to use a telephone.</para>
<para>If you are interested in doing physics, a good HEP framework will save you much work. Next is a list of the more commonly used components of ROOT: Command Line Interpreter, Histograms and Fitting, Writing a Graphical User Interface, 2D Graphics, Input/Output , Collection Classes, Script Processor.</para>
<para>There are also less commonly used components, as: 3D Graphics, Parallel Processing (PROOF), 
Run Time Type Identification (RTTI), Socket and Network Communication, Threads.
<indexterm><primary>RTTI</primary></indexterm>
</para>

<sect3>
<title>Advantages of Frameworks</title>
<para>The benefits of frameworks can be summarized as follows:</para>
<itemizedlist>
<listitem><para>Less code to write – the programmer should be able to use and reuse the majority of the existing code. Basic functionality, such as fitting and histogramming are implemented and ready to use and customize.</para></listitem>
<listitem><para>More reliable and robust code – the code inherited from a framework has already been tested and integrated with the rest of the framework.</para></listitem>
<listitem><para>More consistent and modular code – the code reuse provides consistency and common capabilities between programs, no matter who writes them. Frameworks make it easier to break programs into smaller pieces.</para></listitem>
<listitem><para>More focus on areas of expertise – users can concentrate on their particular problem domain. They do not have to be experts at writing user interfaces, graphics, or networking to use the frameworks that provide those services.</para></listitem>
</itemizedlist>
</sect3>
</sect2>

<sect2>
<title>Why Object-Oriented?</title>
<para>Object-Oriented Programming offers considerable benefits compared to Procedure-Oriented Programming:</para>
<itemizedlist>
<listitem><para>Encapsulation enforces data abstraction and increases opportunity for reuse.</para></listitem>
<listitem><para>Sub classing and inheritance make it possible to extend and modify objects.</para></listitem>
<listitem><para>Class hierarchies and containment <indexterm><primary>containment</primary></indexterm> hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.</para></listitem>
<listitem><para>Complexity is reduced because there is little growth of the global state, the state is contained within each object, rather than scattered through the program in the form of global variables.</para></listitem>
<listitem><para>Objects may come and go, but the basic structure of the program remains relatively static, increases opportunity for reuse of design.</para></listitem>
</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>Installing ROOT</title>
<indexterm><primary>install ROOT</primary></indexterm>
<para>To install ROOT you will need to go to the ROOT website at:  <uri xmlns:xlink="http://root.cern.ch/root/Availability.html">http://root.cern.ch/root/Availability.html</uri>. You have a choice to download the binaries or the source. The source is quicker to transfer since it is only ~22 MB, but you will need to compile and link it. The binaries compiled with no degug information range from ~35 MB to ~45 MB depending on the target platform. </para>
<para>The installation and building of ROOT is described in Appendix A: Install and Build ROOT. You can download the binaries, or the source. The GNU g++ compiler on most UNIX platforms can compile ROOT. </para>
<para>Before downloading a binary version make sure your machine contains the right run-time environment. In most cases it is not possible to run a version compiled with, e.g., gcc4.0 on a platform where only gcc 3.2 is installed. In such cases you'll have to install ROOT from source.</para>
<para>ROOT is currently running on the following platforms:
<indexterm><primary>supported platforms</primary></indexterm>
</para>
<itemizedlist>
<listitem><para><code>GNU/Linux x86-32 (IA32) and x86-64 (AMD64)(GCC,Intel/icc,Portland/PGCC,KAI/KCC)</code> </para> </listitem>
<listitem><para><code>Intel Itanium (IA64) GNU/Linux (GCC, Intel/ecc, SGI/CC) </code></para> </listitem>
<listitem><para><code>FreeBSD and OpenBSD (GCC)</code></para> </listitem>
<listitem><para><code>GNU/Hurd (GCC)</code></para> </listitem>
<listitem><para><code>HP HP-UX 10.x (IA32) and 11 (IA64) (HP CC, aCC, GCC)</code> </para> </listitem>
<listitem><para><code>IBM AIX 4.1 (xlC compiler, GCC)</code> </para> </listitem>
<listitem><para><code>Sun Solaris for SPARC (SUN C++ compiler, GCC) </code></para> </listitem>
<listitem><para><code>Sun Solaris for x86 (SUN C++ compiler, KAI/KCC)</code></para> </listitem>
<listitem><para><code>Compaq Alpha (GCC, KAI/KCC, DEC/CXX)</code> </para> </listitem>
<listitem><para><code>SGI Irix 32 and 64 bits (GCC, KAI/KCC, SGI C++ compiler) </code></para> </listitem>
<listitem><para><code>Windows ≥ 95 (Microsoft Visual C++ compiler, Cygwin/GCC) </code></para> </listitem>
<listitem><para><code>MacOS X PPC, x86-32, x86-64 (GCC, Intel/ICC, IBM/xl)</code></para> </listitem>
<listitem><para><code>PowerPC with GNU/Linux and GCC, Debian v2</code></para> </listitem>
<listitem><para><code>PowerPC64 with GNU/Linux and GCC</code></para> </listitem>
<listitem><para><code>ARM with GNU/Linux and GCC</code></para> </listitem>
<listitem><para><code>LynxOS</code></para> </listitem>
</itemizedlist>
</sect1>

<sect1>
<title>The Organization of the ROOT Framework</title>
<indexterm><primary>framework</primary><secondary>organization</secondary></indexterm>
<para>Now after we know in abstract terms what the ROOT framework is, let us look at the physical directories and files that come with the ROOT installation.
You may work on a platform where your system administrator has already installed ROOT. You will need to follow the specific development environment for your
setup and you may not have write access to the directories. In any case, you will need an environment variable called <code>ROOTSYS</code>, which holds the path of the top ROOT directory. </para>

<programlisting language="c++"
>&gt; <emphasis role="bold"><code>echo $ROOTSYS</code></emphasis>
/opt/root
</programlisting>

<para>In the <code>ROOTSYS</code> directory are examples, executables, tutorials, header 
<indexterm><primary>tutorials</primary></indexterm>
files, and, if you opted to download it, the source is here. The directories of special interest to us are <code>bin</code>, <code>tutorials</code>, <code>lib</code>, <code>test</code>, and<code> include</code>.  The next figure shows the contents of these directories.</para>

<figure><title>ROOT framework directories</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/02000004.jpg" width="273.1pt" depth="292.95pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<figure><title>ROOT framework directories</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/02000004.jpg" width="273.1pt" depth="292.95pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<sect2>
<title>$ROOTSYS/bin</title>
<para>The <code>bin</code> directory contains several executables.</para>
<informaltable frame="topbot">
<tgroup cols="2">
<colspec colwidth="1629*" colname="column-1"/>
<colspec colwidth="7059*" colname="column-2"/>
<tbody>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>root</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>shows the ROOT splash screen and calls <code>root.exe</code></para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>root.exe</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>the executable that <code>root</code> calls, if you use a debugger such as <code>gdb</code>, you will 
need to run <code>root.exe</code> directly
<indexterm><primary>CINT</primary><secondary>debugger</secondary></indexterm>
</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>rootcint</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>is the utility ROOT uses to create a class dictionary for CINT</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>rmkdepend</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>a modified version of <code>makedepend</code> that is used by the ROOT build system</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>root-config</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>a script returning the needed compile flags and libraries for projects that compile and link with ROOT</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>cint</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>the C++ interpreter executable that is independent of ROOT</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>makecint</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>the pure CINT version of <code>rootcint</code>, used to generate a dictionary; It is used by some of CINT install scripts to generate dictionaries for external system libraries</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>proofd</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>a small daemon used to authenticate a user of ROOT parallel processing capability (PROOF)</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>proofserv</code>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>the actual PROOF process, which is started by <code>proofd</code> after a user, has successfully been  authenticated</para>
</entry>
</row>
<row>
<entry rowsep="1" colsep="1">
<para>
<code>rootd</code>
<indexterm><primary>rootd</primary></indexterm>
</para>
</entry>
<entry rowsep="1" colsep="1">
<para>is the daemon for remote ROOT file access (see the <emphasis role="bold"><code>TNetFile</code></emphasis>)</para>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</sect2>

<sect2>
<title>$ROOTSYS/lib</title>
<para>There are several ways to use ROOT, one way is to run the executable by typing <code>root</code> at the system prompt another way is to link with the ROOT libraries
and make the ROOT classes available in your own program. </para>
<para>Here is a short description of the most relevant libraries, the ones marked with a * are only installed when the options specified them.</para>
<itemizedlist>
<listitem><para><code>libAsImage</code> is the image manipulation library</para></listitem>
<listitem><para><code>libCint</code> is the C++ interpreter (CINT)</para></listitem>
<listitem><para><code>libCore</code> is the Base classes</para></listitem>
<listitem><para><code>libEG</code> is the abstract event generator interface classes</para></listitem>
<listitem><para>*<code>libEGPythia</code> is the Pythia5 event generator interface</para></listitem>
<listitem><para>*<code>libEGPythia6</code> is the Pythia6 event generator interface</para></listitem>
<listitem><para><code>libFitPanel</code> contains the GUI used for fitting</para></listitem>
<listitem><para><code>libGed</code> contains the GUI used for editing the properties of histograms, graphs, etc.</para></listitem>
<listitem><para><code>libGeom</code> is the geometry package (with builder and painter)</para></listitem>
<listitem><para><code>libGpad</code> is the pad and canvas classes which depend on low level graphics</para></listitem>
<listitem><para><code>libGraf</code> is the 2D graphics primitives (can be used independent of libGpad)</para></listitem>
<listitem><para><code>libGraf3d</code> is the 3D graphics primitives</para></listitem>
<listitem><para><code>libGui</code> is the GUI classes (depend on low level graphics)</para></listitem>
<listitem><para><code>libGuiBld</code> is the GUI designer</para></listitem>
<listitem><para><code>libGuiHtml</code> contains the embedded HTML browser</para></listitem>
<listitem><para><code>libGX11</code> is the low level graphics interface to the X11 system</para></listitem>
<listitem><para>*<code>libGX11TTF</code> is an add-on library to libGX11 providing TrueType fonts</para></listitem>
<listitem><para><code>libHbook</code> is for interface ROOT - HBOOK</para></listitem>
<listitem><para><code>libHist</code> is the histogram classes (with accompanying painter library)</para></listitem>
<listitem><para><code>libHtml</code> is the HTML documentation generation system</para></listitem>
<listitem><para><code>libMatrix</code> is the matrix and vector manipulation</para></listitem>
<listitem><para><code>libMathCore</code> contains the core mathematics and physics vector classes</para></listitem>
<listitem><para><code>libMathMore</code> contains additional functions, interfacing the GSL math library</para></listitem>
<listitem><para><code>libMinuit</code> is the MINUIT fitter</para></listitem>
<listitem><para><code>libNet</code> contains functionality related to network transfer</para></listitem>
<listitem><para><code>libNew</code> is the special global new/delete, provides extra memory checking and interface for shared memory (optional)</para></listitem>
<listitem><para><code>libPhysics</code> contains the legacy physics classes (TLorentzVector, etc.)</para></listitem>
<listitem><para><code>libPostscript</code> is the PostScript interface</para></listitem>
<listitem><para><code>libProof</code> is the parallel ROOT Facility classes</para></listitem>
<listitem><para><code>libPython</code> provides the interface to Python</para></listitem>
<listitem><para>*<code>libRFIO</code> is the interface to CERN RFIO remote I/O system.</para></listitem>
<listitem><para>*<code>libRGL</code> is the interface to OpenGL.</para></listitem>
<listitem><para><code>libReflex</code> is the runtime type database library used by CINT</para></listitem>
<listitem><para><code>libRint</code> is the interactive interface to ROOT (provides command prompt)</para></listitem>
<listitem><para><code>libRIO</code> provides the functionality to write and read objects to and from ROOT files</para></listitem>
<listitem><para><code>libRooFit</code> is the RooFit fitting framework</para></listitem>
<listitem><para><code>libRuby</code> is the interface to Ruby</para></listitem>
<listitem><para><code>libSpectrum</code> provides functionality for spectral analysis</para></listitem>
<listitem><para>*<code>libThread</code> is the interface to TThread classes</para></listitem>
<listitem><para><code>libTMVA</code> contains the multivariate analysis toolkit</para></listitem>
<listitem><para><code>libTree</code> is the TTree object container system</para></listitem>
<listitem><para><code>libTreePlayer</code> is the TTree drawing classes</para></listitem>
<listitem><para><code>libTreeViewer</code> is the graphical TTree query interface</para></listitem>
</itemizedlist>
<sect3>
<title>Library Dependencies</title>

<figure><title>ROOT libraries dependencies</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000005.png" width="253.25pt" depth="184.95pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>The libraries are designed and organized to minimize dependencies, such that you can load just enough code for the task at hand rather than having to load all libraries or one monolithic chunk. The core library (<code>libCore.so</code>) contains the essentials; it is a part of all ROOT applications. In the Figure 1-2 you see that libCore.so is made up of base classes, container classes, meta information classes, operating system specific classes, and the ZIP algorithm used for compression of the ROOT files.</para>
<para>The CINT library (<code>libCint.so</code>) is also needed in all ROOT applications, and even by <code>libCore</code>. It can be used independently of <code>libCore</code>, in case you only need the C++ interpreter and not ROOT. A program referencing only <emphasis role="bold"><code>TObject</code></emphasis> only needs <code>libCore</code> and <code>libCint</code>. To add the ability to read and write ROOT objects one also has to load libRIO. As one would expect, none of that depends on graphics or the GUI.</para>
<para>Library dependencies have different consequences; depending on whether you try to build a binary, or you just try to access a class that is defined in a library. </para>
</sect3>

<sect3>
<title>Linktime Library Dependencies</title>
<para>When building your own executable you will have to link against the libraries that contain the classes 
you use. The ROOT reference guide states the library a class is 
<indexterm><primary>reference guide</primary></indexterm>
defined in. Almost all relevant classes can 
be found in libraries returned by <code>root-config –glibs</code>; the graphics libraries are retuned by <code>root-config --libs</code>. These commands are commonly used in <code>Makefiles</code>. Using <code>root-config</code> instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.</para>
<para>A batch program that does not have a graphic display, which creates, fills, and saves histograms and 
trees, only needs to link the core libraries (<code>libCore</code>, <code>libCint</code>, <code>libRIO</code>),
<code>libHist</code> and <code>libTree</code>. If ROOT needs access to other libraries, it loads them
dynamically. For example, if the <emphasis role="bold"><code>TreeViewer</code></emphasis> is used,
<code>libTreePlayer</code> and all libraries <code>libTreePlayer</code> depends on are loaded also.
The dependent libraries are shown in the ROOT reference guide’s library dependency graph.
The difference between <indexterm><primary>reference guide</primary></indexterm>
<code>libHist</code> and <code>libHistPainter</code> is that the former needs to be explicitly linked and the
latter will be loaded automatically at runtime when ROOT needs it, by means of the Plugin Manager.
<indexterm><primary>plugin manager</primary></indexterm>
</para>
<para>In the Figure 1-2, the libraries represented by green boxes outside of the core are loaded via the 
plugin manager <indexterm><primary>plugin manager</primary></indexterm> or equivalent techniques, while the white ones are not. Of course, if one wants to access a plugin library directly, it has to be explicitly linked. An example of a plugin library is <code>libMinuit</code>. To create and fill histograms you need to link <code>libHist.so</code>. If the code has a call to fit the histogram, the "fitter" will dynamically load libMinuit if it is not yet loaded.</para>
</sect3>

<sect3>
<title>Plugins: Runtime Library Dependencies for Linking</title>
<para>
<indexterm><primary>plugin manager</primary></indexterm>
The Plugin Manager <emphasis role="bold"><code>TPluginManager</code></emphasis> allows postponing library dependencies to runtime: a plugin library will only be loaded when it is needed. Non-plugins will need to be linked, and are thus loaded at start-up. Plugins are defined by a base class (e.g. <emphasis role="bold"><code>TFile</code></emphasis>) that will be implemented in a plugin, a tag used to identify the plugin (e.g. <code>^rfio:</code> as part of the protocol string), the plugin class of which an object will be created (e.g. <emphasis role="bold"><code>TRFIOFile</code></emphasis>), the library to be loaded (in short <code>libRFIO.so</code> to RFIO), and the constructor to be called (e.g. “<code>TRFIOFile()</code>”). This can be specified in the <code>.rootrc</code> which already contains many plugin definitions, or by calls to <code>gROOT-&gt;GetPluginManager()-&gt;AddHandler()</code>.</para>
</sect3>

<sect3>
<title>Library Autoloading</title>
<para>When using a class in CINT, e.g. in an interpreted source file, ROOT will automatically load the library
that defines this class. On start-up, ROOT parses all files ending on <code>.rootmap</code>
<indexterm><primary>rootmap</primary></indexterm>
that are in one of the <code>$LD_LIBRARY_PATH</code> (or <code>$DYLD_LIBRARY_PATH</code> for <code>MacOS</code>, or <code>$PATH</code> for <code>Windows</code>). They contain class names and the library names that the class depends on. After reading them, ROOT knows which classes are available, and which libraries to load for them.</para>
<para>When <emphasis role="bold"><code>TSystem</code></emphasis><code>::Load("ALib")</code> is called, ROOT uses this information to determine which libraries <code>libALib.so</code> depends on. It will load these libraries first. Otherwise, loading the requested library could cause a system (dynamic loader) error due to unresolved symbols.</para>
</sect3>
</sect2>

<sect2>
<title>$ROOTSYS/tutorials</title>
<para>
<indexterm><primary>tutorials</primary></indexterm>
The tutorials directory contains many example <indexterm><primary>example</primary></indexterm>
scripts. They assume some basic knowledge of ROOT, and for the new user we recommend reading the chapters: “Histograms” and “Input/Output” before trying the examples. The more experienced user can jump to chapter “The Tutorials and Tests” to find more explicit and specific information about how to build and run the examples.</para>
<para>The <code>$ROOTSYS/tutorials/</code> directory include the following sub-directories:</para>
<para>
<code>fft</code>:      Fast Fourier Transform with the fftw package
<code>fit</code>:      Several examples illustrating minimization/fitting
<code>foam</code>:     Random generator in multidimensional space
<code>geom</code>:     Examples of use of the geometry package (<emphasis role="bold"><code>TGeo</code></emphasis> classes)
<code>gl</code>:       Visualisation with OpenGL
<code>graphics</code>: Basic graphics
<code>graphs</code>:   Use of <emphasis role="bold"><code>TGraph</code></emphasis>, <emphasis role="bold"><code>TGraphErrors</code></emphasis>, etc.
<code>gui</code>:      Scripts to create Graphical User Interface
<code>hist</code>:     Histograming
<code>image</code>:    Image Processing
<code>io</code>:       Input/Output
<code>math</code>:     Maths and Statistics functions
<code>matrix</code>:   Matrices (<emphasis role="bold"><code>TMatrix</code></emphasis>) examples
<code>mlp</code>:      Neural networks with <emphasis role="bold"><code>TMultiLayerPerceptron</code></emphasis>
<code>net</code>:      Network classes (client/server examples)
<code>physics</code>:  LorentzVectors, phase space
<code>pyroot</code>:   Python tutorials
<code>pythia</code>:   Example with <code>pythia6</code>
<code>quadp</code>:    Quadratic Programming
<code>ruby</code>:     ruby tutorials
<code>smatrix</code>:  Matrices with a templated package
<code>spectrum</code>: Peak finder, background, deconvolutions
<code>splot</code>:    Example of the <emphasis role="bold"><code>TSplot</code></emphasis> class (signal/background estimator)
<code>sql</code>:      Interfaces to SQL (mysql, oracle, etc)
<code>thread</code>:   Using Threads
<code>tmva</code>:     Examples of the MultiVariate Analysis classes
<code>tree</code>:     Creating Trees, Playing with Trees
<code>unuran</code>:   Interface with the unuram random generator library
<code>xml</code>:      Writing/Reading xml files
</para>
<para>You can execute the scripts in <code>$ROOTSYS/tutorials</code> (or sub-directories) by setting your current directory in the script directory or from any user directory with write access. Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.</para>
</sect2>

<sect2>
<title>$ROOTSYS/test</title>
<para>The test directory contains a set of examples <indexterm><primary>example</primary></indexterm>
that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release's
backward compatibility. The list of source files is described in chapter “The Tutorials and Tests”.</para>
<para>The <code>$ROOTSYS/test</code> directory is a gold mine of ROOT-wisdom nuggets, and we encourage you to explore and exploit it. We recommend the new users to read the chapter “Getting Started”.
The chapter “The Tutorials and Tests” has instructions on how to build all the programs and it goes over the examples <code>Event</code> and <code>stress</code>.</para>
</sect2>

<sect2>
<title>$ROOTSYS/include</title>
<para>The <code>include</code> directory contains all header files. It is especially important because the header files contain the class definitions. </para>
</sect2>

<sect2>
<title>$ROOTSYS/&lt;library&gt;</title>
<para>The directories we explored above are available when downloading the binaries. When downloading the source you also get a directory for each library with the corresponding header and source files, located in the <code>inc</code> and <code>src</code> subdirectories. To see what classes are in a library, you can check the <code>&lt;library&gt;/inc</code> directory for the list of class definitions. For example, the physics library <code>libPhysics.so</code> contains these class definitions: </para>

<programlisting language="c++"
><emphasis role="bold"><code>&gt; ls -m $ROOTSYS/physics/inc</code></emphasis>
CVS,LinkDef.h,TLorentzRotation.h,TLorentzVector.h,TRotation.h,TVector2.h,
TVector3.h
</programlisting>

</sect2>
</sect1>

<sect1>
<title>How to Find More Information</title>
<para>
<indexterm><primary>web</primary><secondary>site</secondary></indexterm>
The ROOT web site has up to date documentation. The ROOT source code automatically generates this documentation, so each class is explicitly documented on its own web page, which is always up to date with the latest official release of ROOT. </para>
<para>The ROOT Reference Guide web pages can be found at
<indexterm><primary>class index</primary></indexterm>
<indexterm><primary>reference guide</primary></indexterm>
<uri xmlns:xlink="http://root.cern.ch/root/html/ClassIndex.html">http://root.cern.ch/root/html/ClassIndex.html</uri>.
Each page contains a class description, and an explanation of each method. It shows the class inheritance
tree and lets you jump to the parent class page by clicking on the class name. If you want more details, you
can even see the source. There is a help page available in the little box on the upper right hand side of each
class documentation page. You can see on the next page what a typical class documentation web page looks like.
The ROOT web site also contains in addition to this Reference Guide, "How To's", a list of publications and
example applications. </para>

<sect2>
<title>Class Reference Guide</title>
<indexterm><primary>reference guide</primary></indexterm>
<para>The top of any class reference page lets you jump to different parts of the documentation. The first line links to the class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information – a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages.</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000006.png" width="317.15pt" depth="44.7pt"/></imageobject></inlinemediaobject>
</para>
<para>This is an example for function documentation, with automatically generated LaTeX-like graphics:</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000007.png" width="316.55pt" depth="80.7pt"/></imageobject></inlinemediaobject>
</para>
<para>The class diagrams show e. g. the inheritance tree, so you know what the current class derives from, and which classes inherit from it:</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000008.png" width="316.55pt" depth="130.95pt"/></imageobject></inlinemediaobject>
</para>
<para>The HTML version of the source file links all types and most functions so you can study what’s happening inside ROOT itself:</para>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000009.png" width="244.55pt" depth="144.6pt"/></imageobject></inlinemediaobject>
</para>
</sect2>
</sect1>
</chapter>



