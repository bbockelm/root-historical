<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Collection Classes</title>
<para>Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections.
If you have used parameterized C++ collections or polymorphic collections before, some of this material will be review.
However, much of this chapter covers aspects of collections specific to the ROOT system. When you have read this chapter, you will know</para>
<itemizedlist>
<listitem><para>How to create instances of collections</para></listitem>
<listitem><para>The difference between lists, arrays, hash tables, maps, etc. </para></listitem>
<listitem><para>How to add and remove elements of a collection </para></listitem>
<listitem><para>How to search a collection for a specific element </para></listitem>
<listitem><para>How to access and modify collection elements </para></listitem>
<listitem><para>How to iterate over a collection to access collection elements</para></listitem>
<listitem><para>How to manage memory for collections and collection elements </para></listitem>
<listitem><para>How collection elements are tested for equality (<code>IsEqual(</code>)) </para></listitem>
<listitem><para>How collection elements are compared (<code>Compare())</code> in case of sorted collections </para></listitem>
<listitem><para>How collection elements are hashed (<code>Hash()</code>) in hash tables </para></listitem>
</itemizedlist>
<sect1>
<title>Understanding Collections</title>
<para>A collection is a group of related objects. You will find it easier to manage a large number of items as a collection.
For example, a diagram editor might manage a collection of points and lines. A set of widgets for a graphical user interface can be placed in a collection.
A geometrical model can be described by collections of shapes, materials and rotation matrices. Collections can themselves be placed in collections.
Collections act as flexible alternatives to traditional data structures of computers science such as arrays, lists and trees.</para>

<sect2>
<title>General Characteristics</title>
<para>The ROOT collections are polymorphic containers that hold pointers to <code>TObjects</code>, so:</para>
<itemizedlist>
<listitem><para>They can only hold objects that inherit from <emphasis role="bold"><code>TObject</code></emphasis></para></listitem>
<listitem><para>They return pointers to <emphasis role="bold"><code>TObject</code></emphasis><code>s</code>, that have to be cast back to the correct subclass</para></listitem>
</itemizedlist>
<para>Collections are dynamic; they can grow in size as required. Collections themselves are descendants of <emphasis role="bold"><code>TObject</code></emphasis> so can themselves be held in collections. It is possible to nest one type of collection inside another to any level to produce structures of arbitrary complexity.</para>
<para>Collections do not own the objects they hold for the very good reason that the same object could be a member of more than one collection. Object ownership is important when it comes to deleting objects; if nobody owns the object it could end up as wasted memory (i.e. a memory leak) when no longer needed. If a collection is deleted, its objects are not. The user can force a collection to delete its objects, but that is the user’s choice.</para>
</sect2>

<sect2>
<title>Determining the Class of Contained Objects</title>
<para>Most containers may hold heterogeneous collections of objects and then it is left to the user to correctly cast the <emphasis role="bold"><code>TObject</code></emphasis> pointer to the right class. Casting to the wrong class will give wrong results and may well crash the program! Therefore, the user has to be very careful. Often a container only contains one class of objects, but if it really contains a mixture, it is possible to ask each object about its class using the <code>InheritsFrom</code> method. </para>
<para>For example if <code>myObject</code> is a <emphasis role="bold"><code>TObject </code></emphasis>pointer:</para>

<programlisting language="c++">
if (myObject-&gt;InheritsFrom("TParticle") {
printf("myObject is a TParticlen");
}
</programlisting>

<para>As the name suggests, this test works even if the object is a subclass of <emphasis role="bold"><code>TParticle</code></emphasis>. The member function <code>IsA()</code> can be used instead of <code>InheritsFrom</code> to make the test exact. The <code>InheritsFrom</code> and <code>IsA</code> methods use the extensive Run Time Type Information (RTTI) available via the ROOT meta-classes.</para>
</sect2>

<sect2>
<title>Types of Collections</title>
<para>The ROOT system implements the following basic types of collections: unordered collections, ordered collections and sorted collections.
Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class <emphasis role="bold"><code>TCollection</code></emphasis>.</para>

<figure><title>The inheritance hierarchy of the primary collection classes</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A3.jpg" width="253.25pt" depth="144.6pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect2>

<sect2>
<title>Ordered Collections (Sequences)</title>
<para>Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:</para>
<itemizedlist>
<listitem><para> <emphasis role="bold"><code>TList</code></emphasis> </para></listitem>
<listitem><para> <emphasis role="bold"><code>THashList</code></emphasis> </para></listitem>
<listitem><para> <emphasis role="bold"><code>TOrdCollection</code></emphasis> </para></listitem>
<listitem><para> <emphasis role="bold"><code>TObjArray</code></emphasis></para></listitem>
<listitem><para> <emphasis role="bold"><code>TClonesArray</code></emphasis> </para></listitem>
</itemizedlist>
<para>The <emphasis role="bold"><code>TOrdCollection</code></emphasis>, <emphasis role="bold"><code>TObjArray</code></emphasis> as well as the <emphasis role="bold"><code>TClonesArray</code></emphasis> can be sorted using their Sort member function (if the stored items are sort able). Ordered collections all derive from the abstract base class <emphasis role="bold"><code>TSeqCollection</code></emphasis>. Sorted collections are ordered by an internal (automatic) sorting mechanism. The following sorted collections are available (the stored items must be sortable):</para>
<itemizedlist>
<listitem><para> <emphasis role="bold"><code>TSortedList</code></emphasis> </para></listitem>
<listitem><para> <emphasis role="bold"><code>TBtree</code></emphasis> </para></listitem>
</itemizedlist>
<para>Unordered collections don't maintain the order in which the elements were added, i.e. when you iterate over an unordered collection, you are not likely to retrieve elements in the same order they were added to the collection. The following unordered collections are available:</para>
<itemizedlist>
<listitem><para> <emphasis role="bold"><code>THashTable</code></emphasis> </para></listitem>
<listitem><para> <emphasis role="bold"><code>TMap</code></emphasis> </para></listitem>
</itemizedlist>
</sect2>
</sect1>

<sect1>
<title>Iterators: Processing a Collection</title>
<para>The concept of processing all the members of a collection is generic, i.e. independent of any specific representation of a collection.
To process each object in a collection one needs some type of cursor that is initialized and then steps over each member of the collection in turn.
Collection objects could provide this service but there is a snag: as there is only one collection object per collection there would only be one cursor.
Instead, to permit the use of as many cursors as required, they are made separate classes called iterator.
For each collection class there is an associated iterator class that knows how to sequentially retrieve each member in turn.
The relationship between a collection and its iterator is very close and may require that the iterator has full access to the collection (i.e. it is a friend class).
In general iterator will be used via the <emphasis role="bold"><code>TIter</code></emphasis> wrapper class. For example:</para>
<itemizedlist>
<listitem><para><emphasis role="bold"><code>TList</code></emphasis>        <emphasis role="bold"><code>TListIter</code></emphasis></para></listitem>
<listitem><para><emphasis role="bold"><code>TMap</code></emphasis>        <emphasis role="bold"><code>TMapIter</code></emphasis></para></listitem>
</itemizedlist>
</sect1>

<sect1>
<title>Foundation Classes</title>
<para>All collections are based on the fundamental classes: <emphasis role="bold"><code>TCollection</code></emphasis> and <emphasis role="bold"><code>TIterator</code></emphasis>.
They are so generic that it is not possible to create objects from them; they are only used as base classes for other classes (i.e. they are abstract base classes). </para>
<para>The <emphasis role="bold"><code>TCollection</code></emphasis> class provides the basic protocol (i.e. the minimum set of member functions) that all collection classes have to implement.
These include:</para>
<itemizedlist>
<listitem><para> <code>Add</code> <code>Adds another object to the collection.</code></para></listitem>
<listitem><para> <code>GetSize</code> <code>Returns the number of objects in the collection.</code></para></listitem>
<listitem><para> <code>Clear</code> <code>Clears out the collection, but does not delete the removed objects.</code></para></listitem>
<listitem><para> <code>Delete</code> <code>Clears out the collection and deletes the removed objects. This should only </code> <code>be used if the collection owns its objects (which are not normally the case).</code></para></listitem>
<listitem><para> <code>FindObject</code> <code>Finds an object given either its name or address.</code></para></listitem>
<listitem><para> <code>MakeIterator</code> <code>Returns an iterator associated with the collection.</code></para></listitem>
<listitem><para> <code>Remove</code> <code>Removes an object from the collection.</code></para></listitem>
</itemizedlist>
<para>The code example below shows a class containing three lists, where the <code>fTracks</code> list is the owning collection and the other two lists are used to store a sub-set of the track objects. In the destructor of the class, the method <code>Delete</code> is called for the owning collection to delete correctly its entire track objects. To delete the objects in the container use         <code>fTrack-&gt;Delete()</code>. To delete the container itself, do '<code>delete fTracks'.</code></para>

<programlisting language="c++">
class TEvent : public TObject {
private:
TList *fTracks;  <code>//list of all tracks</code>
TList *fVertex1; <code>//subset of tracks part of vertex1</code>
TList *fVertex2; <code>//subset of tracks part of vertex2</code>
};
TEvent::~TEvent()
{
fTracks-&gt;Delete();
delete fTracks;
delete fVertex1;
delete fVertex2;
}
</programlisting>

<para>The <emphasis role="bold"><code>TIterator</code></emphasis> class defines the minimum set of member functions that all iterators must support. These include:</para>
<itemizedlist>
<listitem><para>    <code>Next</code>    <code>Returns the next member of the collection or 0 if no more members.</code></para></listitem>
<listitem><para>    <code>Reset</code>    <code>Resets the iterator so that </code>    <code>Next</code>    <code> returns the first object.</code></para></listitem>
</itemizedlist>
</sect1>

<sect1>
<title>A Collectable Class</title>
<para>By default, all objects of <emphasis role="bold"><code>TObject</code></emphasis> derived classes can be stored in ROOT containers. However, the <emphasis role="bold"><code>TObject</code></emphasis> class provides some member functions that allow you to tune the behavior of objects in containers. For example, by default two objects are considered equal if their pointers point to the same address. This might be too strict for some classes where equality is already achieved if some or all of the data members are equal. By overriding the following <emphasis role="bold"><code>TObject</code></emphasis> member functions, you can change the behavior of objects in collections:</para>
<itemizedlist>
<listitem><para><code>IsEqual()</code>is used by the <code>FindObject() </code>collection method. By default, <code>IsEqual()</code> compares the two object pointers.</para></listitem>
<listitem><para><code>Compare()</code>returns –1, 0 or 1 depending if the object is smaller, equal or larger than the other object. By default, a <emphasis role="bold"><code>TObject</code></emphasis> has not a valid <code>Compare()</code> method.</para></listitem>
<listitem><para><code>IsSortable() </code>returns true if the class is sort able (i.e. if it has a valid <code>Compare(</code>) method). By default, a <emphasis role="bold"><code>TObject</code></emphasis> is not sort able.</para></listitem>
<listitem><para><code>Hash() </code>returns a hash value. It needs to be implemented if an object has to be stored in a collection using a hashing technique, like <emphasis role="bold"><code>THashTable</code></emphasis>, <emphasis role="bold"><code>THashList</code></emphasis> and <emphasis role="bold"><code>TMap</code></emphasis>. By default, <code>Hash(</code>) returns the address of the object. It is essential to choose a good hash function.</para></listitem>
</itemizedlist>
<para>The example below shows how to use and override these member functions.</para>

<programlisting language="c++">
class TObjNum : public TObject {
private:
Int_t  num; <code> // TObjNum is a simple container for an integer.</code>
public:
TObjNum(Int_t i = 0) : num(i) { }
~TObjNum() { }
void     SetNum(Int_t i) { num = i; }
Int_t    GetNum() const { return num; }
void     Print(Option_t *) const
{ printf("num = %dn", num); }
Bool_t   IsEqual(TObject *obj) const
{ return num == ((TObjNum*)obj)-&gt;num; }
Bool_t   IsSortable() const { return kTRUE; }
Int_t    Compare(const TObject *obj) const
{ if (num &lt; ((TObjNum*)obj)-&gt;num) return -1;
else if (num &gt; ((TObjNum*)obj)-&gt;num) return 1;
else return 0; }
ULong_t  Hash() const { return num; }
};
</programlisting>

</sect1>

<sect1>
<title>The TIter Generic Iterator</title>
<para>As stated above, the <emphasis role="bold"><code>TIterator</code></emphasis> class is abstract; it is not possible to create <emphasis role="bold"><code>TIterator</code></emphasis> objects. However, it should be possible to write generic code to process all members of a collection so there is a need for a generic iterator object. A <emphasis role="bold"><code>TIter</code></emphasis> object acts as generic iterator. It provides the same <code>Next()</code> and <code>Reset()</code> methods as <emphasis role="bold"><code>TIterator</code></emphasis> although it has no idea how to support them! It works as follows:</para>
<itemizedlist>
<listitem><para>To create a <emphasis role="bold"><code>TIter</code></emphasis> object its constructor must be passed an object that inherits from <emphasis role="bold"><code>TCollection</code></emphasis>. The <emphasis role="bold"><code>TIter</code></emphasis> constructor calls the <code>MakeIterator()</code> method of this collection to get the appropriate iterator object that inherits from <emphasis role="bold"><code>TIterator</code></emphasis>.</para></listitem>
<listitem><para>The <code>Next()</code> and <code>Reset()</code> methods of <emphasis role="bold"><code>TIter</code></emphasis> simply call the <code>Next()</code> and <code>Reset()</code> methods of the iterator object.</para></listitem>
</itemizedlist>
<para>Therefore, <emphasis role="bold"><code>TIter</code></emphasis> simply acts as a wrapper for an object of a concrete class inheriting from <emphasis role="bold"><code>TIterator</code></emphasis>.</para>
<para>To see this working in practice, consider the <emphasis role="bold"><code>TObjArray</code></emphasis> collection. Its associated iterator is <emphasis role="bold"><code>TObjArrayIter</code></emphasis>. Suppose <code>myarray</code> is a pointer to a <emphasis role="bold"><code>TObjArray</code></emphasis> that contains <code>MyClass</code> objects, i.e.</para>

<programlisting language="c++">
<code>TObjArray</code> *<code>myarray</code>;
</programlisting>

<para>To create a <emphasis role="bold"><code>TIter</code></emphasis> object called <code>myiter</code>:</para>

<programlisting language="c++">
<code>TIter myiter(myarray);</code>
</programlisting>

<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A4.jpg" width="199.25pt" depth="130.95pt"/></imageobject></inlinemediaobject>
</para>
<para>As shown in the diagram, this results in several methods being called:</para>
<itemizedlist>
<listitem><para>The <emphasis role="bold"><code>TIter</code></emphasis> constructor is passed a <emphasis role="bold"><code>TObjArray</code></emphasis></para></listitem>
<listitem><para><emphasis role="bold"><code>TIter</code></emphasis> asks embedded <emphasis role="bold"><code>TCollection</code></emphasis> to make an iterator</para></listitem>
<listitem><para><emphasis role="bold"><code>TCollection</code></emphasis> asks <emphasis role="bold"><code>TObjArray</code></emphasis> to make an iterator</para></listitem>
<listitem><para><emphasis role="bold"><code>TObjArray</code></emphasis> returns a <emphasis role="bold"><code>TObjArrayIter</code></emphasis>.</para></listitem>
</itemizedlist>
<para>Now define a pointer for <code>MyClass</code> objects and set it to each member of the <emphasis role="bold"><code>TObjArray</code></emphasis>:</para>

<programlisting language="c++">
MyClass *myobject;
while ((myobject = (MyClass *)myiter.Next())) {
<emphasis role="italic"><code>      // process myobject</code></emphasis>
}
</programlisting>

<para>The heart of this is the <code>myiter.Next()</code> expression which does the following:</para>
<itemizedlist>
<listitem><para>The <code>Next()</code> method of the <emphasis role="bold"><code>TIter</code></emphasis> object <code>myiter</code> is called</para></listitem>
<listitem><para>The <emphasis role="bold"><code>TIter</code></emphasis> forwards the call to the <emphasis role="bold"><code>TIterator</code></emphasis> embedded in the <emphasis role="bold"><code>TObjArrayIter</code></emphasis></para></listitem>
<listitem><para><emphasis role="bold"><code>TIterator</code></emphasis> forwards the call to the <emphasis role="bold"><code>TObjArrayIter</code></emphasis></para></listitem>
<listitem><para><emphasis role="bold"><code>TObjArrayIter</code></emphasis> finds the next <code>MyClass</code> object and returns it</para></listitem>
<listitem><para><emphasis role="bold"><code>TIter</code></emphasis> passes the <code>MyClass</code> object back to the caller</para></listitem>
</itemizedlist>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A5.jpg" width="244.55pt" depth="114.2pt"/></imageobject></inlinemediaobject>
</para>
<para>Sometimes the <emphasis role="bold"><code>TIter</code></emphasis> object is called next, and then instead of writing: <code>next.Next() </code>which is legal, but looks rather odd, iteration is written as <code>next()</code>. This works because the function <code>operator()</code> is defined for the <emphasis role="bold"><code>TIter</code></emphasis> class to be equivalent to the <code>Next()</code> method.</para>
</sect1>

<sect1>
<title>The TList Collection</title>
<para>A <emphasis role="bold"><code>TList</code></emphasis> is a doubly linked list. Before being inserted into the list the object pointer is wrapped in a
<emphasis role="bold"><code>TObjLink</code></emphasis> object that contains, besides the object pointer also a previous and next pointer. </para>
<para>Objects are typically added using:</para>

<itemizedlist>
<listitem><para>    <code>Add()</code></para></listitem>
<listitem><para>    <code>AddFirst(), AddLast()</code></para></listitem>
<listitem><para>    <code>AddBefore(), AddAfter()</code></para></listitem>
</itemizedlist>

<para><emphasis role="bold">Main features of </emphasis><emphasis role="bold"><code>TList</code></emphasis>: very low cost of adding/removing elements anywhere in the list.</para>
<para><emphasis role="bold">Overhead per element</emphasis>: 1 <code>TObjLink</code>, i.e. two 4 (or 8) byte pointers + pointer to <code>vtable</code> = 12 (or 24) bytes.</para>
<para>Next figure shows the internal data structure of a <emphasis role="bold"><code>TList</code></emphasis>.</para>

<figure><title>The internal data structure of a TList</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A6.jpg" width="262.55pt" depth="152.05pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<sect2>
<title>Iterating Over a TList</title>
<para>There are four ways to iterate over a <emphasis role="bold"><code>TList</code></emphasis>:</para>
<itemizedlist>
<listitem><para>Using the <code>ForEach</code> script:</para></listitem>
</itemizedlist>
<programlisting language="c++">
GetListOfPrimitives()-&gt;ForEach(TObject,Draw)();
</programlisting>
<itemizedlist>
<listitem><para>Using the <emphasis role="bold"><code>TList</code></emphasis> iterator <emphasis role="bold"><code>TListIter</code></emphasis> (via the wrapper class <emphasis role="bold"><code>TIter</code></emphasis>):</para></listitem>
</itemizedlist>
<programlisting language="c++">
TIter next(GetListOfTracks());
while ((TTrack *obj = (TTrack *)next()))
obj-&gt;Draw();
</programlisting>
<itemizedlist>
<listitem><para>Using the <emphasis role="bold"><code>TObjLink</code></emphasis> list entries (that wrap the <emphasis role="bold"><code>TObject</code></emphasis>*):</para></listitem>
</itemizedlist>
<programlisting language="c++">
TObjLink *lnk = GetListOfPrimitives()-&gt;FirstLink();
while (lnk) {
lnk-&gt;GetObject()-&gt;Draw();
lnk = lnk-&gt;Next();
}
</programlisting>
<itemizedlist>
<listitem><para>Using the <emphasis role="bold"><code>TList</code></emphasis>'s <code>After()</code> and <code>Before()</code> member functions:</para></listitem>
</itemizedlist>
<programlisting language="c++">
TFree *idcur = this;
while (idcur) {
...
idcur = (TFree*)GetListOfFree()-&gt;After(idcur);
}
</programlisting>

<para>Method 1 uses internally method 2.</para>
<para>Method 2 works for all collection classes. <emphasis role="bold"><code>TIter</code></emphasis> overloads <code>operator()</code>.</para>
<para>Methods 3 and 4 are specific for <emphasis role="bold"><code>TList</code></emphasis>.</para>
<para>Methods 2, 3 and 4 can also easily iterate backwards using either a backward <emphasis role="bold"><code>TIter</code></emphasis> (using argument <code>kIterBackward</code>) or by using <code>LastLink()</code> and <code>lnk&gt;Prev</code>() or by using the <code>Before()</code> method.</para>
</sect2>
</sect1>

<sect1>
<title>The TObjArray Collection</title>
<para>A <emphasis role="bold"><code>TObjArray</code></emphasis> is a collection which supports traditional array semantics via the overloading of <code>operator[]</code>. Objects can be directly accessed via an index. The array expands automatically when objects are added. At creation time one specifies the default array size (default = 16) and lower bound (default = 0). Resizing involves a re-allocation and a copy of the old array to the new. This can be costly if done too often. If possible, set initial size close to expected final size. Index validity is always checked (if you are 100% sure and maximum performance is needed you can use <code>UnCheckedAt()</code> instead of <code>At()</code> or <code>operator[]</code>). If the stored objects are sort able the array can be sorted using <code>Sort()</code>. Once sorted, efficient searching is possible via the <code>BinarySearch()</code> method. The figure shows the internal data structure of a <emphasis role="bold"><code>TObjArray</code></emphasis>: </para>

<figure><title>The internal data structure of a TObjArray</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A7.jpg" width="180.6pt" depth="93.7pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>Iterating can be done using a <emphasis role="bold"><code>TIter</code></emphasis> iterator or via a simple for loop: </para>

<programlisting language="c++">
for (int i = 0; i &lt;= fArr.GetLast(); i++)
if ((track = (TTrack*)fArr[i]))     <emphasis role="italic"><code>// or fArr.At(i)</code></emphasis>
track-&gt;Draw();
</programlisting>

<para>Main features of <emphasis role="bold"><code>TObjArray</code></emphasis> are simple, well-known array semantics. <emphasis role="bold">Overhead per element</emphasis>: none, except possible over sizing of <code>fCont</code>.</para>
</sect1>

<sect1>
<title>TClonesArray – An Array of Identical Objects</title>
<para>A <emphasis role="bold"><code>TClonesArray</code></emphasis> is an array of identical (clone) objects. The memory for the objects stored in the array is allocated only once in the lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as a <emphasis role="bold"><code>TObjArray</code></emphasis>.</para>

<figure><title>The internal data structure of a TClonesArray</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/020001A8.jpg" width="189.95pt" depth="148.35pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>The figure above shows the internal data structure of a <emphasis role="bold"><code>TClonesArray</code></emphasis>. The class is specially designed for repetitive data analysis tasks, where in a loop many times the same objects, are created and deleted. The only supported way to add objects to a <emphasis role="bold"><code>TClonesArray</code></emphasis> is via the <code>new</code> with placement method. The different <code>Add()</code> methods of <emphasis role="bold"><code>TObjArray</code></emphasis> and its base classes are not supported.</para>

<sect2>
<title>The Idea Behind TClonesArray</title>
<para>To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete):</para>

<programlisting language="c++">
TObjArray a(10000);
while (TEvent *ev = (TEvent *)next()) {        <emphasis role="italic"><code>// O(100000)</code></emphasis>
for (int i = 0; i &lt; ev-&gt;Ntracks; i++) {     <emphasis role="italic"><code>// O(10000)</code></emphasis>
a[i] = new TTrack(x,y,z,...);
...
}
...
a.Delete();
}
</programlisting>

<para>You better use a <emphasis role="bold"><code>TClonesArray</code></emphasis> which reduces the number of new/delete calls to only O(10000):</para>
<para/>

<programlisting language="c++">
TClonesArray a("TTrack", 10000);
while (TEvent *ev = (TEvent *)next()) {      <code>// O(100000</code><emphasis role="italic">)</emphasis>
for (int i = 0; i &lt; ev-&gt;Ntracks; i++) {   <code>// O(10000)</code>
new(a[i]) TTrack(x,y,z,...);
...
}
...
a.Delete();
}
</programlisting>

<para>Considering that a pair of new/delete calls on average cost about 70 s, O(109) new/deletes will save about 19 hours. For the other collections, see the class reference guide on the web and the test program <code>$ROOTSYS/test/tcollex.cxx.</code></para>
</sect2>
</sect1>

<sect1>
<title>Template Containers and STL</title>
<para>Some people dislike polymorphic containers because they are not truly “type safe”. In the end, the compiler leaves it the user to ensure that the types are correct. This only leaves the other alternative: creating a new class each time a new (container organization) / (contained object) combination is needed. To say the least this could be very tedious. Most people faced with this choice would, for each type of container:</para>
<para>Define the class leaving a dummy name for the contained object type. When a particular container was needed, copy the code and then do a global search and replace for the contained class. C++ has a built in template scheme that effectively does just this. For example:</para>

<programlisting language="c++">
template&lt;class T&gt;
class ArrayContainer {
private:
T *member[10];
...
};
</programlisting>

<para>This is an array container with a 10-element array of pointers to T, it could hold up to 10 T objects. This array is flawed because it is static and hard-coded, it should be dynamic. However, the important point is that the template statement indicates that T is a template, or parameterized class. If we need an <code>ArrayContainer</code> for Track objects, it can be created by:</para>

<programlisting language="c++">
<code>ArrayContainer&lt;Track&gt; MyTrackArrayContainer;</code>
</programlisting>

<para>C++ takes the parameter list and substitutes Track for T throughout the definition of the class <code>ArrayContainer</code>, then compiles the code so generated, effectively doing the same we could do by hand, but with a lot less effort. </para>
<para>This produces code that is type safe, but does have different drawbacks:</para>
<itemizedlist>
<listitem><para>Templates make code harder to read. </para></listitem>
<listitem><para>At the time of writing this documentation, some compilers can be very slow when dealing with templates. </para></listitem>
<listitem><para>It does not solve the problem when a container has to hold a heterogeneous set of objects. </para></listitem>
<listitem><para>The system can end up generating a great deal of code; each container/object combination has its own code, a phenomenon that is sometimes referred to as <emphasis role="italic">code bloat</emphasis>. </para></listitem>
<listitem><para>The Standard Template Library (STL) is part on ANSI C++, and includes a set of template containers.</para></listitem>
</itemizedlist>
</sect1>
</chapter>



