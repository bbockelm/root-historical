<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Graphs</title>
<para>A graph is a graphics object made of two arrays X and Y, holding the x, y coordinates of <code>n</code> points. There are several graph classes; they are <emphasis role="bold"><code>TGraph</code></emphasis>, <emphasis role="bold"><code>TGraphErrors</code></emphasis>, <emphasis role="bold"><code>TGraphAsymmErrors</code></emphasis>, and <emphasis role="bold"><code>TMultiGraph</code></emphasis>. </para>

<sect1>
<title>TGraph</title>
<para>The <emphasis role="bold"><code>TGraph</code></emphasis> class supports the general case with non-equidistant points, and the special case with equidistant points. Graphs are created with the <emphasis role="bold"><code>TGraph</code></emphasis> constructor. First, we define the arrays of coordinates and then create the graph. The coordinates can be arrays of doubles or floats.</para>

<programlisting language="c++">
Int_t n = 20;
Double_t x[n], y[n];
for (Int_t i=0; i&lt;n; i++) {
x[i] = i*0.1;
y[i] = 10*sin(x[i]+0.2);
}
TGraph *gr1 = new TGraph (n, x, y);
</programlisting>

<para>An alternative constructor takes only the number of points <code>n</code>. It is expected that the coordinates will be set later.</para>

<programlisting language="c++">
TGraph *gr2 = new TGraph(n);
</programlisting>

<para>The default constructor can also be used. Further calls to <code>SetPoint()</code> will extend the internal vectors.</para>

<programlisting language="c++">
TGraph *gr3 = new TGraph();
</programlisting>

<sect2>
<title>Graph Draw Options</title>
<para>The various draw options for a graph are explained in <emphasis role="bold"><code>TGraph</code></emphasis><code>::PaintGraph</code>. They are:</para>
<itemizedlist>
<listitem><para>"<code>L</code>"A simple poly-line between every points is drawn</para></listitem>
<listitem><para>"<code>F</code>"A fill area is drawn </para></listitem>
<listitem><para>“<code>F1</code>”Idem as "<code>F</code>" but fill area is no more repartee around X=0 or Y=0</para></listitem>
<listitem><para>"<code>F2</code>"draw a fill area poly line connecting the center of bins</para></listitem>
<listitem><para>"<code>A</code>"Axis are drawn around the graph</para></listitem>
<listitem><para>"<code>C</code>"A smooth curve is drawn</para></listitem>
<listitem><para>"<code>*</code>"A star is plotted at each point</para></listitem>
<listitem><para>"<code>P</code>"The current marker of the graph is plotted at each point</para></listitem>
<listitem><para>"<code>B</code>"A bar chart is drawn at each point</para></listitem>
<listitem><para>"<code>[]</code>" Only the end vertical/horizontal lines of the error bars are drawn. This option only applies to the <emphasis role="bold"><code>TGraphAsymmErrors</code></emphasis>.</para></listitem>
<listitem><para>"<code>1</code>"<code>ylow</code>         <code>=</code>         <code>rwymin</code></para></listitem>
</itemizedlist>
<para>The options are not case sensitive and they can be concatenated in most cases. Let us look at some examples.</para>

<sect3>
<title>Continuous Line, Axis and Stars (AC*)</title>

<figure><title>A graph drawn with axis, * markers and continuous line (option AC*)</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300004B.png" width="270.6pt" depth="190.55pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<programlisting language="c++">
<code>{  </code>
<code>  Int_t n = 20;</code>
<code>  Double_t x[n], y[n];</code>
<code>  for (Int_t i=0;i&lt;n;i++) {</code>
<code>    x[i] = i*0.1;</code>
<code>    y[i] = 10*sin(x[i]+0.2);</code>
<code>  }</code>
<emphasis role="italic"><code>  // create graph</code></emphasis>
<code>  TGraph *gr  = new TGraph(n,x,y);</code>
<code>  TCanvas *c1 = new TCanvas("c1","Graph Draw Options",200,10,600,400);</code>
<emphasis role="italic"><code>  // draw the graph with axis,</code></emphasis> <emphasis role="italic"><code>contineous line, and put a * at each point</code></emphasis>
gr-&gt;Draw("AC*");
}
</programlisting>

</sect3>

<sect3>
<title>Bar Graphs (AB)</title>

<figure><title>A graph drawn with axis and bar (option AB)</title>
<para><inlinemediaobject><imageobject><imagedata fileref="pictures/0300004C.png" width="281.15pt" depth="200.5pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<programlisting language="c++">
root[] <emphasis role="bold"><code>TGraph *gr1 = new TGraph(n,x,y);</code></emphasis>
root[] <emphasis role="bold"><code>gr1-&gt;SetFillColor</code></emphasis><emphasis role="bold"><code>(40);</code></emphasis>
root[] <emphasis role="bold"><code>gr1-&gt;Draw("AB");</code></emphasis>
</programlisting>

<para>This code will only work if n, x, and y is defined.  The previous example defines these. You need to set the fill color, because by default the fill color is white and will not be visible on a white canvas. You also need to give it an axis, or the bar chart will not be displayed properly.</para>
</sect3>

<sect3>
<title>Filled Graphs (AF)</title>

<figure><title>A graph drawn with axis and fill (option AF)</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300004D.png" width="280.55pt" depth="198pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para/>

<programlisting language="c++">
root[] <emphasis role="bold"><code>TGraph *gr3 = new TGraph(n,x,y);</code></emphasis>
root[] <emphasis role="bold"><code>gr3-&gt;SetFillColor(45);</code></emphasis>
root[] <emphasis role="bold"><code>gr3-&gt;Draw("AF")</code></emphasis>
</programlisting>

<para>This code will only work if <code>n</code>, <code>x</code>, <code>y </code>are defined.  The first example defines them. You need to set the fill color, because by default the fill color is white and will not be visible on a white canvas. You also need to give it an axis, or the bar chart will not be displayed properly. Currently one cannot specify the "<code>CF</code>" option.</para>
</sect3>

<sect3>
<title>Marker Options</title>

<figure><title>Graph markers created in different ways</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300004E.png" width="285.5pt" depth="201.1pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<programlisting language="c++">
<code>{</code>
<code>  Int_t n = 20;</code>
<code>  Double_t x[n], y[n];</code>
<emphasis role="italic"><code>// build the arrays with the coordinate of points </code></emphasis>
<code>  for (Int_t i=0; i&lt;n; i++) {</code>
<code>     x[i] = i*0.1;</code>
<code>     y[i] = 10*sin(x[i]+0.2);</code>
<code>  }</code>
<emphasis role="italic"><code> // create graphs</code></emphasis>
TGraph *gr3  = new TGraph(n,x,y);
TCanvas *c1 = new TCanvas ("c1","Graph Draw Options",200,10,600,400);

<emphasis role="italic"><code>  // draw the graph with the axis,contineous line, and put </code></emphasis>
<emphasis role="italic"><code>  // a marker using the graph's marker style at each point</code></emphasis>
gr3-&gt;SetMarkerStyle(21);
c1-&gt;cd(4);
gr3-&gt;Draw("APL");

<emphasis role="italic"><code>// get the points in the graph and put them into an array  </code></emphasis>
Double_t *nx = gr3-&gt;GetX();
Double_t *ny = gr3-&gt;GetY();

<emphasis role="italic"><code>// create markers of different colors </code></emphasis>
for (Int_t j=2; j&lt;n-1; j++) {
TMarker *m = new TMarker(nx[j], 0.5*ny[j], 22);
m-&gt;SetMarkerSize(2);
m-&gt;SetMarkerColor(31+j);
m-&gt;Draw();
}
}
</programlisting>

</sect3>
</sect2>
</sect1>

<sect1>
<title>Superimposing Two Graphs</title>
<para>To super impose two graphs you need to draw the axis only once, and leave out the "A" in the draw options for the second graph. Next is an example:</para>

<figure><title>Superimposing two graphs</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300004F.png" width="289.25pt" depth="204.85pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<programlisting language="c++">
{
Int_t n = 20;
Double_t x[n], y[n], x1[n], y1[n];

<emphasis role="italic"><code>// create a </code></emphasis><emphasis role="italic"><code>blue graph with a cos function</code></emphasis><emphasis role="italic"><code> and red one with sin function</code></emphasis>
for (Int_t i=0; i&lt;n; i++) {
x[i]  = i*0.5;
y[i]  = 5*cos(x[i]+0.2);
x1[i] = i*0.5;
y1[i] = 5*sin(x[i]+0.2);
}
TGraph *gr1 = new TGraph(n,x,y);
TGraph *gr2  = new TGraph(n,x1,y1);
TCanvas *c1 = new TCanvas("c1","Two Graphs",200,10,600,400);
<emphasis role="italic"><code>  // draw the graph with axis,</code></emphasis> <emphasis role="italic"><code>contineous line, and put a * at each point</code></emphasis>
gr1-&gt;SetLineColor(4);
gr1-&gt;Draw("AC*");
<emphasis role="italic"><code>  // superimpose the second graph by leaving out the axis option "A"</code></emphasis>
gr2-&gt;SetLineWidth(3);
gr2-&gt;SetMarkerStyle(21);
gr2-&gt;SetLineColor(2);
gr2-&gt;Draw("CP");
}
</programlisting>

</sect1>

<sect1>
<title>Graphs with Error Bars</title>
<para>A <emphasis role="bold"><code>TGraphErrors</code></emphasis> is a <emphasis role="bold"><code>TGraph</code></emphasis> with error bars. The various draw format options of <emphasis role="bold"><code>TGraphErrors</code></emphasis><code>::Paint()</code> are derived from <emphasis role="bold"><code>TGraph</code></emphasis>. </para>

<programlisting language="c++">
<code>void TGraphErrors::Paint(Option_t *option)</code>
</programlisting>

<figure><title>Graphs with different draw options of error bars</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000050.png" width="189.3pt" depth="150.2pt"/></imageobject></inlinemediaobject>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000051.png" width="191.8pt" depth="149.6pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>In addition, it can be drawn with the "<code>Z</code>" option to leave off the small lines at the end of the error bars. If option contains "<code>&gt;</code>", an arrow is drawn at the end of the error bars. If option contains "<code>|&gt;</code>", a full arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. </para>
<para>The option “<code>[]</code>” is interesting to superimpose systematic errors on top of the graph with the statistical errors. When it is specified, only the end vertical/horizontal lines of the error bars are drawn. </para>
<para>To control the size of the lines at the end of the error bars (when option 1 is chosen) use <code>SetEndErrorSize(np)</code>. By default <code>np=1</code>; <code>np</code> represents the number of pixels.</para>

<programlisting language="c++">
<code>gStyle-&gt;SetEndErrorSize(np); </code>
</programlisting>

<para>The four parameters of <emphasis role="bold"><code>TGraphErrors</code></emphasis> are: <code>X, Y</code> (as in <emphasis role="bold"><code>TGraph</code></emphasis><emphasis role="bold"><code>),</code></emphasis> <code>X</code>-errors, and <code>Y</code>-errors - the size of the errors in the <code>x</code> and <code>y</code> direction. Next example is <code>$ROOTSYS/tutorials/graphs/gerrors.C.</code></para>

<programlisting language="c++">
{
c1 = new TCanvas("c1","A Simple Graph with error bars",200,10,700,500);
c1-&gt;SetFillColor(42);
c1-&gt;SetGrid();
c1-&gt;GetFrame()-&gt;SetFillColor(21);
c1-&gt;GetFrame()-&gt;SetBorderSize(12);
<emphasis role="italic"><code>  // create the coordinate arrays</code></emphasis>
Int<code>_t n = 10;</code>
<code>  Float_t x[n]  = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};</code>
<code>  Float_t y[n]  = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};</code>
<emphasis role="italic"><code>// create the error arrays</code></emphasis>
<code>  Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};</code>
<code>  Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};</code>
<emphasis role="italic"><code>// create the TGraphErrors and draw it</code></emphasis>
gr = new TGraphErrors(n,x,y,ex,ey);
gr-&gt;SetTitle("TGraphErrors Example");
gr-&gt;SetMarkerColor(4);
gr-&gt;SetMarkerStyle(21);
gr-&gt;Draw("ALP");
c1-&gt;Update();
}
</programlisting>

</sect1>

<sect1>
<title>Graphs with Asymmetric Error Bars</title>
<para>A <emphasis role="bold"><code>TGraphAsymmErrors</code></emphasis> is a <emphasis role="bold"><code>TGraph</code></emphasis> with asymmetric error bars. It inherits the various draw format options from <emphasis role="bold"><code>TGraph</code></emphasis>. Its method <code>Paint(Option_t *option)</code> paints the <emphasis role="bold"><code>TGraphAsymmErrors</code></emphasis> with the current attributes.  You can set the following additional options for drawing:</para>
<itemizedlist>
<listitem><para>"<code>z</code>" or “<code>Z</code>”the horizontal and vertical small lines are not drawn at the end of error bars</para></listitem>
<listitem><para>“<code>&gt;</code>”an arrow is drawn at the end of the error bars </para></listitem>
<listitem><para>“<code>|&gt;</code>”a full arrow is drawn at the end of the error bar; its size is 2/3 of the marker size</para></listitem>
<listitem><para>“<code>[]</code>”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors.</para></listitem>
</itemizedlist>
<para>The constructor has six arrays as parameters: X and Y as <emphasis role="bold">TGraph</emphasis> and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.</para>

<figure><title>A graph with asymmetric error bars</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000052.png" width="244.55pt" depth="184.95pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para/>

<programlisting language="c++">
{
c1 = new TCanvas("c1","A Simple Graph with error bars",200,10,700,500);
c1-&gt;SetFillColor(42);
c1-&gt;SetGrid();
c1-&gt;GetFrame()-&gt;SetFillColor(21);
c1-&gt;GetFrame()-&gt;SetBorderSize(12);
<emphasis role="italic"><code>   // create the arrays for the points </code></emphasis>
Int_t n = 10;
Double_t x[n]  = {-.22,.05,.25,.35,.5, .61,.7,.85,.89,.95};
Double_t y[n]  = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};
<emphasis role="italic"><code>   // create the arrays with high and low errors</code></emphasis>
Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};
Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};
Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};
Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};
<emphasis role="italic"><code>// create TGraphAsymmErrors with the arrays</code></emphasis>
gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);
gr-&gt;SetTitle("TGraphAsymmErrors Example");
gr-&gt;SetMarkerColor(4);
gr-&gt;SetMarkerStyle(21);
gr-&gt;Draw("ALP");
}
</programlisting>

</sect1>

<sect1>
<title>Graphs with Asymmetric Bent Errors</title>
<para>A <emphasis role="bold"><code>TGraphBentErrors</code></emphasis> is a <emphasis role="bold"><code>TGraph</code></emphasis> with bent, asymmetric error bars. The various format options to draw a <emphasis role="bold"><code>TGraphBentErrors</code></emphasis> are explained in <emphasis role="bold"><code>TGraphBentErrors</code></emphasis><code>::Paint</code> method. The <emphasis role="bold"><code>TGraphBentErrors</code></emphasis> is drawn by default with error bars and small horizontal and vertical lines at the end of the error bars. If option "<code>z</code>" or "<code>Z</code>" is specified, these small lines are not drawn. If the option "<code>X</code>" is specified, the errors are not drawn (the <emphasis role="bold"><code>TGraph</code></emphasis><code>::Paint</code> method equivalent).</para>
<itemizedlist>
<listitem><para>if option contains "<code>&gt;</code>", an arrow is drawn at the end of the error bars</para></listitem>
<listitem><para>if option contains "<code>|&gt;</code>", a full arrow is drawn at the end of the error bars</para></listitem>
<listitem><para>the size of the arrow is set to 2/3 of the marker size</para></listitem>
<listitem><para>if option "<code>[]</code>" is specified, only the end vertical/horizontal lines of the error bars are drawn. This option is interesting to superimpose systematic errors on top of a graph with statistical errors.</para></listitem>
</itemizedlist>

<figure><title>A graph with asymmetric bent error bars</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000053.png" width="245.15pt" depth="165.7pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>This figure has been generated by the following macro:</para>

<programlisting language="c++">
{
Int_t n = 10;
Double_t x[n]   = {-0.22,0.05,0.25,0.35,0.5,0.61,0.7,0.85,0.89,0.95};
Double_t y[n]   = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};
Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};
Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};
Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};
Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};
Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};
Double_t eyld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};
Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};
Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};
gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);
gr-&gt;SetTitle("TGraphBentErrors Example");
gr-&gt;SetMarkerColor(4);
gr-&gt;SetMarkerStyle(21);
gr-&gt;Draw("ALP");
}
</programlisting>

</sect1>

<sect1>
<title>TGraphPolar</title>
<para>The <emphasis role="bold"><code>TGraphPolar</code></emphasis> class creates a polar graph (including error bars). A <emphasis role="bold"><code>TGraphPolar</code></emphasis> is a <emphasis role="bold"><code>TGraphErrors</code></emphasis> represented in polar coordinates. It uses the class <emphasis role="bold"><code>TGraphPolargram</code></emphasis> to draw the polar axis.</para>

<figure><title>A polar graph</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000054.png" width="217.25pt" depth="208.55pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<programlisting language="c++">
{
TCanvas *CPol = new TCanvas("CPol","TGraphPolar Examples",600,600);
Double_t rmin=0;
Double_t rmax=TMath::Pi()*2;
Double_t r[1000];
Double_t theta[1000];
TF1 * fp1 = new TF1("fplot","cos(x)",rmin,rmax);
for (Int_t ipt = 0; ipt &lt; 1000; ipt++) {
r[ipt] = ipt*(rmax-rmin)/1000+rmin;
theta[ipt] = fp1-&gt;Eval(r[ipt]);
}
TGraphPolar * grP1 = new TGraphPolar(1000,r,theta);
grP1-&gt;SetLineColor(2);
grP1-&gt;Draw("AOL");
}
</programlisting>

<para>The TGraphPolar drawing options are:</para>
<para>"O" Polar labels are paint orthogonally to the polargram radius.</para>
<para>"P" Polymarker are paint at each point position.</para>
<para>"E" Paint error bars.</para>
<para>"F" Paint fill area (closed polygon).</para>
<para>"A"Force axis redrawing even if a polagram already exists.</para>
</sect1>

<sect1>
<title>TGraph Exclusion Zone</title>
<para>When a graph is painted with the option "<code>C</code>" or "<code>L</code>", it is possible to draw a filled area on one side of the line. This is useful to show exclusion zones. This drawing mode is activated when the absolute value of the graph line width (set thanks to <code>SetLineWidth</code>) is greater than 99. In that case the line width number is interpreted as <code>100*ff+ll = ffll</code>. The two-digit numbers "<code>ll</code>" represent the normal line width whereas "<code>ff</code>" is the filled area width. The sign of "<code>ffll</code>" allows flipping the filled area from one side of the line to the other. The current fill area attributes are used to draw the hatched zone.</para>

<figure><title>Graphs with exclusion zones</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000055.png" width="271.25pt" depth="185.6pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para/>

<programlisting language="c++">
{
c1 = new TCanvas("c1","Exclusion graphs examples",200,10,700,500);
c1-&gt;SetGrid();
TMultiGraph *mg = new TMultiGraph();
mg-&gt;SetTitle("Exclusion graphs");
const Int_t n = 35;
Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];
for (Int_t i=0;i&lt;n;i++) {
x1[i] = i*0.1; y1[i] = 10*sin(x1[i]);
x2[i] = x1[i]; y2[i] = 10*cos(x1[i]);
x3[i] = x1[i]+.5; y3[i] = 10*sin(x1[i])-2;
}
gr1 = new TGraph(n,x1,y1);
gr1-&gt;SetLineColor(2);
gr1-&gt;SetLineWidth(1504);
gr1-&gt;SetFillStyle(3005);
gr2 = new TGraph(n,x2,y2);
gr2-&gt;SetLineColor(4);
gr2-&gt;SetLineWidth(-2002);
gr2-&gt;SetFillStyle(3004);
gr2-&gt;SetFillColor(9);
gr3 = new TGraph(n,x3,y3);
gr3-&gt;SetLineColor(5);
gr3-&gt;SetLineWidth(-802);
gr3-&gt;SetFillStyle(3002);
gr3-&gt;SetFillColor(2);
mg-&gt;Add(gr1);
mg-&gt;Add(gr2);
mg-&gt;Add(gr3);
mg-&gt;Draw("AC");
}
</programlisting>

</sect1>

<sect1>
<title>TGraphQQ</title>
<para>A <emphasis role="bold"><code>TGraphQQ</code></emphasis> allows drawing quantile-quantile plots. Such plots can be drawn for two datasets, or for one dataset and a theoretical distribution function.</para>

<sect2>
<title>Two Datasets</title>
<para>Quantile-quantile plots are used to determine whether two samples come from the same distribution. A qq-plot draws the quantiles of one dataset against the quantile of the other. The quantiles of the dataset with fewer entries are on Y-axis, with more entries - on X-axis. A straight line, going through 0.25 and 0.75 quantiles is also plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the datasets. If the datasets come from the same distribution, points of the plot should fall approximately on the 45 degrees line. If they have the same distribution function, but different parameters of location or scale, they should still fall on the straight line, but not the 45 degrees one.</para>

<figure><title>Examples of qq-plots of 2 datasets</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000056.png" width="289.85pt" depth="194.9pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>The greater their departure from the straight line, the more evidence there is that the datasets come from different distributions. The advantage of qq-plot is that it not only shows that the underlying distributions are different, but, unlike the analytical methods, it also gives information on the nature of this difference: heavier tails, different location/scale, different shape, etc.</para>
</sect2>

<sect2>
<title>One Dataset</title>
<para>Quantile-quantile plots are used to determine if the dataset comes from the specified theoretical distribution, such as normal. A qq-plot draws quantiles of the dataset against quantiles of the specified theoretical distribution. Note, that density, not CDF should be specified a straight line, going through 0.25 and 0.75 quantiles could also be plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the dataset. As in the two datasets case, departures from straight line indicate departures from the specified distribution. Next picture shows an example of a qq-plot of a dataset from N(3, 2) distribution and TMath::Gaus(0, 1) theoretical function. Fitting parameters are estimates of the distribution mean and sigma.</para>

<figure><title>Examples of qq-plots of 1 dataset</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000057.png" width="289.85pt" depth="194.3pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect2>
</sect1>

<sect1>
<title>TMultiGraph</title>
<para>A <emphasis role="bold"><code>TMultiGraph</code></emphasis> is a collection of <emphasis role="bold"><code>TGraph</code></emphasis> (or derived) objects.
Use <emphasis role="bold"><code>TMultiGraph</code></emphasis><code>::Add </code>to add a new graph to the list. The <emphasis role="bold"><code>TMultiGraph</code></emphasis>
owns the objects in the list. The drawing and fitting options are the same as for <emphasis role="bold"><code>TGraph</code></emphasis>.
</para>

<programlisting language="c++">
{
<emphasis role="italic"><code>// create the points</code></emphasis>
Int_t n = 10;
Double_t x[n]  = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};
Double_t y[n]  = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};
Double_t x2[n]  = {-.12,.15,.35,.45,.6,.71,.8,.95,.99,1.05};
Double_t y2[n]  = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};
<emphasis role="italic"><code>// create the width of errors in x and y direction</code></emphasis>
Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};
Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};
<emphasis role="italic"><code>// create two graphs</code></emphasis>
TGraph *gr1 = new TGraph(n,x2,y2);
TGraphErrors *gr2 = new TGraphErrors(n,x,y,ex,ey);
<emphasis role="italic"><code>   // create a multigraph and draw it</code></emphasis>
TMultiGraph  *mg  = new TMultiGraph();
mg-&gt;Add(gr1);
mg-&gt;Add(gr2);
mg-&gt;Draw("ALP");
}
</programlisting>

<figure><title>A multigraph example</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000058.png" width="252.6pt" depth="191.15pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect1>

<sect1>
<title>TGraph2D</title>
<para>This class is a set of <code>N</code> points <code>x[i]</code>, <code>y[i]</code>, <code>z[i]</code> in a non-uniform grid. Several visualization techniques are implemented, including Delaunay triangulation. Delaunay triangulation is defined as follow: ‘for a set <code>S</code> of points in the Euclidean plane, the unique triangulation <code>DT(S)</code> of <code>S</code> such that no point in <code>S</code> is inside the circum-circle of any triangle in <code>DT(S)</code>. <code>DT(S)</code> is the dual of the Voronoi diagram of <code>S</code>. If n is the number of points in <code>S</code>, the Voronoi diagram of S is the partitioning of the plane containing <code>S</code> points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. </para>

<figure><title>Delaunay triangles and Voronoi diagram</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/03000059.png" width="222.2pt" depth="119.8pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para>The <emphasis role="bold"><code>TGraph2D</code></emphasis> class has the following constructors:</para>
<itemizedlist>
<listitem><para>With an arrays’ dimension <code>n</code> and three arrays <code>x</code>, <code>y</code>, and <code>z</code> (can be arrays of
doubles, floats, or integers):</para></listitem>
</itemizedlist>
<programlisting language="c++">
<code>TGraph2D *g = new TGraph2D(n,x,y,z);</code>
</programlisting>
<itemizedlist>
<listitem><para>With an array dimension only:</para></listitem>
</itemizedlist>
<programlisting language="c++">
<code>TGraph2D *g = new TGraph2D(n);</code>
</programlisting>
<itemizedlist>
<listitem><para>Internal arrays are filled with the method <code>SetPoint</code> at the position "<code>i</code>" with the values <code>x</code>, <code>y</code>, <code>z</code>:</para></listitem>
</itemizedlist>
<programlisting language="c++">
<code>g-&gt;SetPoint(i,x,y,z);</code>
</programlisting>
<itemizedlist>
<listitem><para>Without parameters; the method <code>SetPoint</code> must be used to fill the internal arrays.</para></listitem>
</itemizedlist>
<programlisting language="c++">
<code>TGraph2D *g = new TGraph2D();</code>
</programlisting>
<itemizedlist>
<listitem><para>From a file:</para></listitem>
</itemizedlist>
<programlisting language="c++">
<code>TGraph2D *g = new TGraph2D("graph.dat");</code>
</programlisting>

<para>The arrays are read from the ASCII file "<code>graph.dat</code>" according to a specified format. The format's default value is "<code>%lg %lg %lg</code>". Note that in any of last three cases, the <code>SetPoint</code> method can be used to change a data point or to add a new one. If the data point index (<code>i</code>) is greater than the size of the internal arrays, they are automatically extended.</para>
<para>Specific drawing options can be used to paint a <emphasis role="bold"><code>TGraph2D</code></emphasis>:</para>
<itemizedlist>
<listitem><para>"<code>TRI</code>"  the Delaunay triangles are drawn using filled area. A hidden surface drawing technique is used. The surface is painted with the current fill area color. The edges of the triangles are painted with the current line color;</para></listitem>
<listitem><para>"<code>TRIW</code>"the Delaunay triangles are drawn as wire frame;</para></listitem>
<listitem><para>"<code>TRI1</code>" the Delaunay triangles are painted with color levels. The edges of the triangles are painted with the current line color;</para></listitem>
<listitem><para>"<code>TRI2</code>" the Delaunay triangles are painted with color levels;</para></listitem>
<listitem><para>"<code>P</code>"draws a marker at each vertex;</para></listitem>
<listitem><para>"<code>P0</code>" draws a circle at each vertex. Each circle background is white.</para></listitem>
</itemizedlist>
<para>A <emphasis role="bold"><code>TGraph2D</code></emphasis> can be also drawn with ANY options valid for 2D histogram drawing. In this case, an intermediate 2D histogram is filled using the Delaunay triangles technique to interpolate the data set. <emphasis role="bold"><code>TGraph2D</code></emphasis> linearly interpolate a <code>Z</code> value for any <code>(X,Y)</code> point given some existing <code>(X,Y,Z)</code> points. The existing <code>(X,Y,Z)</code> points can be randomly scattered. The algorithm works by joining the existing points to make Delaunay triangles in <code>(X,Y)</code>. These are then used to define flat planes in <code>(X,Y,Z)</code> over which to interpolate. The interpolated surface thus takes the form of tessellating triangles at various angles. Output can take the form of a 2D histogram or a vector. The triangles found can be drawn in 3D. This software cannot be guaranteed to work under all circumstances. It was originally written to work with a few hundred points in an<code> XY</code> space with similar <code>X</code> and <code>Y</code> ranges.</para>

<figure><title>Graph2D drawn with option "surfl" and "tril p0"</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300005A.png" width="3in" depth="168.85pt"/></imageobject></inlinemediaobject>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300005B.png" width="217.25pt" depth="168.85pt"/></imageobject></inlinemediaobject>
</para>
</figure>

<para/>

<programlisting language="c++">
<code>{  </code>
<code>   TCanvas *c = new TCanvas("c","Graph2D example",0,0,700,600);</code>
<code>   Double_t x, y, z, P = 6.; </code>
<code>   Int_t np = 200;</code>
<code>   TGraph2D *dt = new TGraph2D();</code>
<code>   TRandom *r = new TRandom();</code>

<code>   for (Int_t N=0; N&lt;np; N++) {</code>
<code>      x = 2*P*(r-&gt;Rndm(N))-P;</code>
<code>      y = 2*P*(r-&gt;Rndm(N))-P;</code>
<code>      z = (sin(x)/x)*(sin(y)/y)+0.2;</code>
<code>      dt-&gt;SetPoint(N,x,y,z);</code>
<code>   }</code>
<code>   gStyle-&gt;SetPalette(1);</code>
<code>   dt-&gt;Draw("surf1");       </code><emphasis role="italic"><code>// use “surf1” to generate the left picture</code></emphasis>
<code>}                           </code><emphasis role="italic"><code>// use “tri1 p0” to generate the right one</code></emphasis>
</programlisting>

<para>A more complete example is <code>$ROOTSYS/tutorials/fit/graph2dfit.C</code> that produces the next figure.</para>

<figure><title>Output of macro graph2dfit.C</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300005C.png" width="296.7pt" depth="284.3pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect1>

<sect1>
<title>TGraph2DErrors</title>
<para>A <emphasis role="bold"><code>TGraph2DErrors</code></emphasis> is a <emphasis role="bold"><code>TGraph2D</code></emphasis> with errors. It is useful to perform fits with errors on a 2D graph. An example is the macro <code>$ROOTSYS/tutorials/graphs/graph2derrorsfit.C</code>.</para>
</sect1>

<sect1>
<title>Fitting a Graph</title>
<para>The graph <code>Fit</code> method in general works the same way as the <emphasis role="bold"><code>TH1</code></emphasis><code>::Fit</code>. See “Fitting Histograms”.</para>
</sect1>

<sect1>
<title>Setting the Graph's Axis Title</title>
<para>To give the axis of a graph a title you need to draw the graph first, only then does it actually have an axis object. Once drawn, you set the title by getting the axis and calling the <emphasis role="bold"><code>TAxis</code></emphasis><code>::SetTitle</code> method, and if you want to center it, you can call the <emphasis role="bold"><code>TAxis</code></emphasis><code>::CenterTitle</code> method. </para>
<para>Assuming that <code>n, x,</code> and <code>y</code> are defined. Next code sets the titles of the <code>x</code> and <code>y</code> axes.</para>

<programlisting language="c++">
root[] <emphasis role="bold"><code>gr5 = new TGraph(n,x,y)</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;Draw()</code></emphasis>
<code>&lt;TCanvas::MakeDefCanvas&gt;: created default TCanvas with name c1</code>
root[] <emphasis role="bold"><code>gr5-&gt;Draw("ALP")</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;GetXaxis()-&gt;SetTitle("X-Axis")</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;GetYaxis()-&gt;SetTitle("Y-Axis")</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;GetXaxis()-&gt;CenterTitle()</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;GetYaxis()-&gt;CenterTitle()</code></emphasis>
root[] <emphasis role="bold"><code>gr5-&gt;Draw(“ALP”) </code></emphasis>
</programlisting>

<para>For more graph examples see the scripts: <code>$ROOTSYS/tutorials</code> directory <code>graph.C</code>, <code>gerrors.C</code>, <code>zdemo.C</code>, and <code>gerrors2.C</code>.</para>

<figure><title>A graph with axis titles</title>
<para> <inlinemediaobject><imageobject><imagedata fileref="pictures/0300005D.png" width="206.05pt" depth="181.25pt"/></imageobject></inlinemediaobject></para>
</figure>

</sect1>

<sect1>
<title>Zooming a Graph</title>
<para>To zoom a graph you can create a histogram with the desired axis range first. Draw the empty histogram and then draw the graph using the existing axis from the histogram. </para>

<programlisting language="c++">
{ gROOT-&gt;Reset();
c1 = new TCanvas("c1","A Zoomed Graph",200,10,700,500);
hpx = new TH2F("hpx","Zoomed Graph Example",10,0,0.5,10,1.0,8.0); // axis range
hpx-&gt;SetStats(kFALSE);   <emphasis role="italic"><code>// no statistics</code></emphasis>
hpx-&gt;Draw();
Int_t n = 10;
Double_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};
Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};
gr = new TGraph(n,x,y);
gr-&gt;SetMarkerColor(4);
gr-&gt;SetMarkerStyle(20);
gr-&gt;Draw("LP");<emphasis role="italic"><code>// and draw it without an axis</code></emphasis>
}
</programlisting>

<para>The next example is the same graph as above with a zoom in the x and y directions. </para>

<figure><title>A zoomed graph</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300005E.png" width="225.95pt" depth="183.1pt"/></imageobject></inlinemediaobject>
</para>
</figure>

</sect1>

<sect1>
<title>The User Interface for Graphs</title>
<para>
<inlinemediaobject><imageobject><imagedata fileref="pictures/0300005F.png" width="389.8pt" depth="231.5pt"/></imageobject></inlinemediaobject>
</para>
<para>The class <emphasis role="bold"><code>TGraphEditor</code></emphasis> provides the user interface for setting the following graph attributes interactively:</para>
<para>     Title text entry field – sets the title of the graph.</para>
<para>     Shape radio button group – sets the graph shapes:                    </para>
<para>       <emphasis role="italic">No Line</emphasis>:draw unconnected points;</para>
<para>       <emphasis role="italic">Smooth Line</emphasis>: a smooth curve;</para>
<para>       <emphasis role="italic">Simple Line</emphasis>:a simple poly-line;            </para>
<para>       <emphasis role="italic">Ba</emphasis><emphasis role="italic">r</emphasis><emphasis role="italic">t Chart</emphasis>:a bar chart at each point.</para>
<para>       <emphasis role="italic">Fill Area</emphasis>:a fill area is drawn.          </para>
<para>   Show Marker - sets markers as visible or invisible.</para>
<para>   Exclusion Zone – specifies the exclusion zone parameters :</para>
<para>       <emphasis role="italic">’+-‘ check button</emphasis>:  sets on which side of the line the exclusion zone will be drawn;</para>
<para>       <emphasis role="italic">Width combo box</emphasis>: defines the width of the zone.</para>
</sect1>
</chapter>



